# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "ubuntu_13.10"
  config.vm.box_url = 'http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-13.10_chef-provisionerless.box'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # number of nodes to provision
  numNodes = 4

  TimeZone = `systemsetup -gettimezone|cut -d':' -f2`

  # ip address prefix
  #ipAddrPrefix = "192.168.33.10"
  ipAddrPrefix = "10.1.33.10"
  
  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "#{ENV['HOME']}/projects", "/projects"

  config.vm.provider 'virtualbox' do |v|
    v.memory = 2048
    v.cpus = 2
  end

$script = <<SCRIPT
sudo test -f /etc/bootstrapped && exit
sudo apt-get -y install curl
curl -L https://www.getchef.com/chef/install.sh | sudo bash
sudo date > /etc/bootstrapped
SCRIPT

  # provision config for each node
  1.upto(numNodes) do |num|
	nodeName = ("fdsnode" + num.to_s).to_sym
        vdiName = (nodeName.to_s + "_disk0.vdi").to_sym
        config.vm.define nodeName do |node|
		node.vm.box = "ubuntu_13.10"
		node.vm.network :private_network, ip: ipAddrPrefix + num.to_s
        node.vm.network "public_network", bridge: 'en0: Wi-Fi (AirPort)'
		node.vm.hostname = nodeName.to_s

        node.vm.provision "shell", path: "guest-host-timezone-map.sh", args:TimeZone

		node.vm.provider "virtualbox" do |v|
			v.name = nodeName.to_s
    	        	unless File.exist?(vdiName.to_s)
  				v.customize ['createhd', '--filename', vdiName, '--size', 100 * 1024]
 				# NOT commenting out for now... on restart this is failing because it already exists
				v.customize ['storagectl', :id, '--name', 'SATA Controller', '--add', 'sata', '--controller', 'IntelAHCI'] 
  			    v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', vdiName]
			end
		end

  config.vm.provision "shell", inline:
    $script

  config.vm.provision "chef_solo" do |chef|
    chef.log_level = "debug"
    chef.cookbooks_path = [ "../../cookbooks", "../../site-cookbooks" ]
    chef.roles_path = "../../roles"
    chef.data_bags_path = "../../data_bags"
    chef.add_recipe "fds-cluster"
  
    # You may also specify custom JSON attributes:
    chef.json = { :om_ip => "#{ipAddrPrefix}1",
                  :node1_ip => "#{ipAddrPrefix}1",
                  :node2_ip => "#{ipAddrPrefix}2",
                  :node3_ip => "#{ipAddrPrefix}3",
                  :node4_ip => "#{ipAddrPrefix}4",
                  :installer_dir => "/projects" }
  end

	end
  end
  
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Provision with the Formation devsetup.sh script
  #config.vm.provision "shell" do |s|
  #  s.path = "devsetup.sh"
  #  s.args   = "--fdspkgs"
  #end

  # Enable provisioning with CFEngine. CFEngine Community packages are
  # automatically installed. For example, configure the host as a
  # policy server and optionally a policy file to run:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.am_policy_hub = true
  #   # cf.run_file = "motd.cf"
  # end
  #
  # You can also configure and bootstrap a client to an existing
  # policy server:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.policy_server_address = "10.0.2.15"
  # end

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file default.pp in the manifests_path directory.
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { mysql_password: "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
