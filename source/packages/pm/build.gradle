buildscript {
	repositories {
		jcenter()
		mavenLocal()
	}

	dependencies {
		classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.2.0'
	}
}

apply plugin: 'nebula.deb'

task buildDeb(type: Deb) {

	def build_num = "$System.env.BUILD_NUMBER"

	if ( null == build_num || '' == build_num || 'null' == build_num ) {
		build_num = 'dev'
	}

	version = '1.0.0'
	ext.packagePrefix = 'fds-platform-manager'
	release = build_num
	packageName = packagePrefix + '-' + version
	arch = "amd64"

	def baseDir = main_dir_build

	into '/opt/fds/formation_one/packages/' + packagePrefix + '-' + version + '-' + release
	from(baseDir + '/bin/platformd') {
		into 'bin'
		fileMode 755
	}

	from(baseDir + '/bin/disk_format.py') {
		into 'bin'
		fileMode 755
	}

	from(baseDir + '/bin/disk_id.py') {
		into 'bin'
		fileMode 755
	}

	from(baseDir + '/bin/disk_type.py') {
		into 'bin'
		fileMode 755
	}

	from(baseDir + '/lib/libfds-disk-lib.a') {
		into 'lib'
		fileMode 644
	}

	from(baseDir + '/lib/libfds-plat-lib.a') {
		into 'lib'
		fileMode 644
	}

	from(baseDir + '/lib/libfds-pm-lib.a') {
		into 'lib'
		fileMode 644
	}

	from( '../../../ansible/templates/deploy_fds/upstart' ){
		include 'fds_upstart_defaults*', 'fds-pm.conf.j2'
		into 'upstart'
		fileMode 755
 	}
  
	from( '../../tools' ){
		include 'coroner.py'
		into 'bin'
		fileMode 755
	}

	from( 'etc' ){
		into 'etc'
		fileMode 755
	}

}

task deployDeb( dependsOn: 'buildDeb' ) << {
	if ( !project.hasProperty( 'username' ) || !project.hasProperty( 'password' ) ){
		println 'You must specify both a -Pusername and -Ppassword value. Skipping deployDeb task.'
		return
	}

	def debName = 'NONE'
	new File( projectDir.getName() + '/build/distributions' ).eachFile( { f -> 

		if ( f.name.startsWith( buildDeb.packagePrefix ) && f.name.endsWith( 'deb' ) ) {
			debName = f.name
		}

	})

	if ( debName == 'NONE' ) {
		println 'Nothing to deploy'
		return
	}

	def fullName = debName

	def command = 'curl -v -X PUT http://' + username + ':' + password + '@artifacts.artifactoryonline.com/artifacts/formation-apt/pool/nightly/' + fullName + ';deb.distribution=platform;deb.component=nightly;deb.architecture=amd64 -T ' + projectDir.getName() + '/build/distributions/' + fullName

	def proc = command.execute()

	proc.text.eachLine { line -> println line }

	if ( proc.exitValue() ) {
		throw new GradleException( 'Artifact upload failed.' )
	}

  def deploy_artifactory_local = 'curl -v -X PUT http://' + username + ':' + password + '@bld-artifactory:8081/artifactory/formation-apt/pool/nightly/' + fullName + ';deb.distribution=platform;deb.component=nightly;deb.architecture=amd64 -T ' + projectDir.getName() + '/build/distributions/' + fullName

	println deploy_artifactory_local

	def proc_local = deploy_artifactory_local.execute()

	proc_local.text.eachLine { line -> println line }

	if ( proc_local.exitValue() ) {
		println 'Artifact upload to local artifactory failed.'
	}

}
