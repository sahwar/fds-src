buildscript {
	repositories {
		jcenter()
	}
}

plugins {
  id "nebula.ospackage" version "3.2.0"
}

ospackage {

	def build_num = "$System.env.BUILD_NUMBER"

    if ( null == build_type || '' == build_type || 'nul' == build_type ) {
        build_type = 'debug'
    }

	if ( null == build_num || '' == build_num || 'null' == build_num ) {
		build_num = 'dev'
	}

	version = '1.0.0'
	ext.packagePrefix = 'fds-orchestration-manager'
	release = build_num
	packageName = packagePrefix + '-' + build_type + '-' + version + '-' + release

	def baseDir = main_dir_build

	into '/opt/fds/formation_one/packages/' + packageName

	from(baseDir + '/bin/orchMgr') {
		into 'bin'
		fileMode 755
        user 'root'
        permissionGroup 'root'
}

	from(baseDir + '/bin/liborchmgr.so') {
		into 'bin'
		fileMode 755
        user 'root'
        permissionGroup 'root'
}

	from(baseDir + '/lib/libfds-om-common.a') {
		into 'lib'
		fileMode 644
        user 'root'
        permissionGroup 'root'
}

	from(baseDir + '/lib/java') {
		into 'lib/java'
        user 'root'
        permissionGroup 'root'
}

	from(baseDir + '/lib/admin-webapp') {
		into 'lib/admin-webapp'
        user 'root'
        permissionGroup 'root'
}

	from( '../../../ansible/templates/deploy_fds/upstart' ){
		into 'upstart'
		include 'fds_upstart_defaults*', 'fds-om.conf.j2'
		fileMode 755
        user 'root'
        permissionGroup 'root'
}

	from( '../../config/etc/ssl' ) {
		into 'etc/ssl'
		fileMode 755
        user 'root'
        permissionGroup 'root'
}

	from( 'etc' ){
		into 'etc'
		fileMode 755
	    user 'root'
        permissionGroup 'root'
    }
}

buildDeb {
	arch = "amd64"
}

buildRpm {
    os = LINUX
    arch = "X86_64"
}

task deployDeb( dependsOn: 'buildDeb' ) << {
	if ( !project.hasProperty( 'username' ) || !project.hasProperty( 'password' ) ){
		println 'You must specify both a -Pusername and -Ppassword value. Skipping deployDeb task.'
		return
	}

    def repo_folder = "$System.env.REPO_FOLDER"
    if ( null == repo_folder || '' == repo_folder || 'null' == repo_folder ) {
        repo_folder = 'nightly'
    }

	def debName = 'NONE'
	new File( projectDir.getName() + '/build/distributions' ).eachFile( { f ->

		if ( f.name.startsWith( ospackage.packageName ) && f.name.endsWith( 'deb' ) ) {
			debName = f.name
		}

	})

	if ( debName == 'NONE' ) {
		println 'Nothing to deploy'
		return
	}

	def fullName = debName

	def command = 'curl -v -X PUT http://' + username + ':' + password + '@artifacts.artifactoryonline.com/artifacts/formation-apt/pool/' + repo_folder + '/' + fullName + ';deb.distribution=platform;deb.component=' + repo_folder + ';deb.architecture=amd64 -T ' + projectDir.getName() + '/build/distributions/' + fullName

	def proc = command.execute()

	proc.text.eachLine { line -> println line }

	if ( proc.exitValue() ) {
		throw new GradleException( 'Artifact upload failed.' )
	}

  def deploy_artifactory_local = 'curl -v -X PUT http://' + username + ':' + password + '@bld-artifactory:8081/artifactory/formation-apt/pool/' + repo_folder + '/' + fullName + ';deb.distribution=platform;deb.component=' + repo_folder + ';deb.architecture=amd64 -T ' + projectDir.getName() + '/build/distributions/' + fullName

	println deploy_artifactory_local

	def proc_local = deploy_artifactory_local.execute()

	proc_local.text.eachLine { line -> println line }

	if ( proc_local.exitValue() ) {
		println 'Artifact upload to local artifactory failed.'
	}

}

task deployRpm( dependsOn: 'buildRpm' ) << {
	if ( !project.hasProperty( 'username' ) || !project.hasProperty( 'password' ) ){
		println 'You must specify both a -Pusername and -Ppassword value. Skipping deployRpm task.'
		return
	}

	def repo_folder = "$System.env.REPO_FOLDER"

	if ( null == repo_folder || '' == repo_folder || 'null' == repo_folder ) {
		repo_folder = 'nightly'
	}

	def rpmName = 'NONE'
	new File( projectDir.getName() + '/build/distributions' ).eachFile( { f ->

		if ( f.name.startsWith( ospackage.packageName ) && f.name.endsWith( 'rpm' ) ) {
			rpmName = f.name
		}
	})

	if ( rpmName == 'NONE' ) {
		println 'Nothing to deploy'
		return
	}

	println rpmName

	def fullName = rpmName

    def deploy_artifactory_local = 'curl -v -X PUT http://' + username + ':' + password + '@bld-artifactory:8081/artifactory/formation-yum/' + repo_folder + '/' + fullName + '; -T ' + projectDir.getName() + '/build/distributions/' + fullName

	println deploy_artifactory_local

	def proc_local = deploy_artifactory_local.execute()

	proc_local.text.eachLine { line -> println line }

	if ( proc_local.exitValue() ) {
		throw new GradleException( 'Artifact upload to Boulder Artifactory failed.' )
	}
}
