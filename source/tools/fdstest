#!/usr/bin/env python
import sys
import os
import unittest
import time
import json
import random
import xml.etree.ElementTree as ET
try:
    import requests
    from requests import ConnectionError
except ImportError:
    print 'oops!! - I need the [requests] pkg. do: "sudo easy_install requests" OR "pip install requests"'
    sys.exit(0)

# from : http://tinyurl.com/kanklrj
# remove unnecceasry unicode encoding
def _decode_list(data):
    rv = []
    for item in data:
        if isinstance(item, unicode):
            item = item.encode('utf-8')
        elif isinstance(item, list):
            item = _decode_list(item)
        elif isinstance(item, dict):
            item = _decode_dict(item)
        rv.append(item)
    return rv

def _decode_dict(data):
    rv = {}
    for key, value in data.iteritems():
        if isinstance(key, unicode):
            key = key.encode('utf-8')
        if isinstance(value, unicode):
            value = value.encode('utf-8')
        elif isinstance(value, list):
            value = _decode_list(value)
        elif isinstance(value, dict):
            value = _decode_dict(value)
        rv[key] = value
    return rv

class Api:
    def __init__(self):
        self.host = 'localhost'
        self.port = 8000
        self.omhost = 'localhost'
        self.omport = 7777
        self.ua = 'fdstest/1.0'
        self.postheaders={'content-type':'application/x-www-form-urlencoded','User-Agent':self.ua}
        self.headers={'User-Agent':self.ua}
        if 'testhost' in os.environ:
            host=os.environ['testhost']
            port=self.port
            if ':' in host:
                host,port = host.split(':')
            self.host=host
            self.port=port

    def getUrl(self,bucket=None,objName=None):
        if bucket == None:
            return 'http://%s:%s' %(self.host,str(self.port))

        if objName == None:
            return 'http://%s:%s/%s' %(self.host,str(self.port), bucket)

        return 'http://%s:%s/%s/%s' %(self.host,str(self.port), bucket, objName)

    def getBucketList(self):
        try:
            r = requests.get("http://%s:%d/config/volumes" % (self.omhost,self.omport), headers=self.headers)
            print r
            return [bucket['name'] for bucket in json.loads(r.text, object_hook=_decode_dict )]
        except ConnectionError:
            print "unable to connect to [%s:%s]"  % (self.omhost,self.omport)
        except KeyboardInterrupt:
            print "request cancelled on interrupt"
        return None

    def getBucketItems(self,bucket):
        try:
            resp=requests.get(self.getUrl(bucket),headers=self.headers)
            print resp
            root = ET.fromstring(resp.text)
            return [item.text for item in root.findall('Contents/Key')]
        except ConnectionError:
            print "unable to connect to [%s:%s]"  % (self.host,self.port)
        except KeyboardInterrupt:
            print "request cancelled on interrupt"
            
    def createBucket(self,bucket):
        try:
            return requests.put(self.getUrl(bucket),headers=self.headers)
        except ConnectionError:
            print "unable to connect to [%s:%s]"  % (self.host,self.port)
        except KeyboardInterrupt:
            print "request cancelled on interrupt"

    def getBucket(self,bucket):
        try:
            return requests.get(self.getUrl(bucket),headers=self.headers).text
        except ConnectionError:
            print "unable to connect to [%s:%s]"  % (self.host,self.port)
        except KeyboardInterrupt:
            print "request cancelled on interrupt"

    def deleteBucket(self,bucket):
        try:
            return requests.delete(self.getUrl(bucket),headers=self.headers)
        except ConnectionError:
            print "unable to connect to [%s:%s]"  % (self.host,self.port)
        except KeyboardInterrupt:
            print "request cancelled on interrupt"

    def putFile(self,bucket,filepath,name=None):
        try:
            name = name if name else os.path.basename(filepath)
            return requests.post(self.getUrl(bucket,name),data=open(filepath,'rb'),headers=self.postheaders)
        except ConnectionError:
            print "unable to connect to [%s:%s]"  % (self.host,self.port)
        except KeyboardInterrupt:
            print "request cancelled on interrupt"

    def put(self,bucket,objname,data):
        try:
            return requests.post(self.getUrl(bucket,objname),data=data,headers=self.postheaders)
        except ConnectionError:
            print "unable to connect to [%s:%s]"  % (self.host,self.port)

    def get(self,bucket,objname):
        try:
            r=requests.get(self.getUrl(bucket,objname),headers=self.headers)
            print r
            return r.text
        except ConnectionError:
            print "unable to connect to [%s:%s]"  % (self.host,self.port)
        except KeyboardInterrupt:
            print "request cancelled on interrupt"
                
    def delete(self,bucket,objname):
        try:
            return requests.delete(self.getUrl(bucket,objname),headers=self.headers)
        except ConnectionError:
            print "unable to connect to [%s:%s]"  % (self.host,self.port)
        except KeyboardInterrupt:
            print "request cancelled on interrupt"


class basic(unittest.TestCase):
    def setUp(self):
        self.f=Api()
        
    def testCreateBucket(self):
        bucket='bucket_%d' % (random.randint(201,301))
        r=self.f.createBucket(bucket)
        self.assertIn(r.status_code,[200,500])

    def testPutObject(self):
        obj = 'This is a test object'
        
        bucket='bucket_%d' % (random.randint(201,301))
        objname='obj_%d' % (random.randint(201,301))

        r=self.f.createBucket(bucket)
        self.assertIn(r.status_code,[200,500])

        r=self.f.put(bucket,objname,obj)
        self.assertEqual(r.status_code,200)

        time.sleep(2)
        text=self.f.get(bucket,objname)
        self.assertEqual(obj,text)

class delete(unittest.TestCase):
    def setUp(self):
        self.f=Api()

    def testDeleteBucket(self):
        bucket='bucket_%d' % (random.randint(200,202))
        r=self.f.createBucket(bucket)
        self.assertIn(r.status_code,[200,409])

        r=self.f.deleteBucket(bucket)
        self.assertIn(r.status_code,[204])

    def testDeleteObject(self):
        obj = 'This is a test object'
        bucket='bucket_%d' % (random.randint(200,202))
        objname='obj_%d' % (random.randint(201,301))

        r=self.f.createBucket(bucket)
        self.assertIn(r.status_code,[200,409])

        r=self.f.put(bucket,objname,obj)
        self.assertEqual(r.status_code,200)
        
        time.sleep(2)
        text=self.f.get(bucket,objname)
        self.assertEqual(obj,text)

        r=self.f.delete(bucket,objname)
        self.assertIn(r.status_code,[204])

class zero(unittest.TestCase):
    def setUp(self):
        self.f=Api()
        self.bucket='bucket_%d' % (random.randint(200,202))
        r=self.f.createBucket(self.bucket)
        self.assertIn(r.status_code,[200,409])

    def testZeroSize(self):
        obj=''
        objname='obj_%d' % (random.randint(201,301))

        r=self.f.put(self.bucket,objname,obj)
        self.assertEqual(r.status_code,200)

        time.sleep(2)
        text=self.f.get(self.bucket,objname)
        self.assertEqual(obj,text)

        r=self.f.delete(self.bucket,objname)
        self.assertIn(r.status_code,[200,204])

class medium(unittest.TestCase):
    def setUp(self):
        self.f=Api()

    # put 10 objects from 1KB to 10KB
    def testPutMediumObjects(self):
        bucket='bucket_%d' % (random.randint(200,202))
        objname='obj_%d' % (random.randint(201,301))
        r=self.f.createBucket(bucket)
        self.assertIn(r.status_code,[200,409])

        alphastr = ''.join([chr(n+65) for n in range(0,26)])

        # 1 KB Object
        onekb=''
        for n in range(0,39):
            onekb += alphastr 
            onekb += ','

        obj=''
        num = 10
        print 'uploading [%d] objects ' % (num)
        # test 1-10 kb
        for n in range(0,num):
            obj += onekb
            objname='obj_%d' % (random.randint(201,301))

            print 'uploading [%s] to [bkt:%s] : %d ' %(objname,bucket,len(obj)),
            r=self.f.put(bucket,objname,obj)
            self.assertEqual(r.status_code,200)
            print ' : done'

            time.sleep(2)
            text=self.f.get(bucket,objname)
            self.assertEqual(obj,text)
    
if __name__ == "__main__":
    unittest.main(defaultTest='basic',verbosity=2)
    
