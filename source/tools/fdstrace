#!/usr/bin/env python
import argparse
import subprocess
import types
import traceback
import re
import sys
import os
import time

class FDSTrace:
    '''
    Helper module around ngrep
    '''
    def __init__(self):
        self.apps = {}
        self.apps["om"] = "orchmgr"
        self.apps["am"] = "bare_am"
        self.apps["sm"] = "StorMgr"
        self.apps["dm"] = "DataMgr"
        self.apps["xdi"] = "java"

        #T 127.0.0.1:49917 -> 127.0.0.1:8904 [AP]
        self.infoLine = re.compile(r'T [0-9\.:]+:\d+ -> [0-9\.:]+:\d+ \[\w+\]')
        self.ports = {}
        self.portMap = {}
        self.setupKnownPorts()

    def setupKnownPorts(self):
        ports = [
            (7000, 'pm'),
            (7001, 'sm'),
            (7002, 'dm'),
            (7003, 'am'),
            (7004, 'om'),
            (9090, 'om.config.api'),
            (8903, 'om.cfg.path'),
            (8904, 'om.ctrl.path'),
            (7777, 'om.ui'),
            (7443, 'om.ui.ssl'),
            (9988, 'am.sync'),
            (8899, 'am.async'),
            (10809, 'am.nbd'),
            (8000, 'xdi'),
            (8999, 'xdi.stats'),
            (9999, 'xdi.swift'),
            (9876, 'xdi.async'),
            (8443, 'xdi.ssl')
        ]
        self.knownPorts = {}
        self.knownPortNames = {}
        for p in ports:
            self.knownPorts[p[0]] = p[1]
            self.knownPortNames[p[1]] = p[0]

    def addPort(self, name, port=None):
        if port == None:
            self.ports[self.knownPortNames[name]] = name
        else:
            self.ports[port] = name

    def getName(self,name):
        if name in self.apps:
            return name

        for (k,v) in self.apps.iteritems():
            if v == name:
                return k

        return name

    def getPid(self,name):
        cmd= ['pgrep']
        if name in self.apps:
            name=self.apps[name]
        cmd.extend(self.getAsList(name))
        pid=self.getCmdOutput(cmd)
        if len(pid)>0:
            return int(pid[0])
        else:
            return -1

    def getProcess(self,pid):
        if int(pid) <=0 :
            return ''

        cmd=['ps','-up',pid]
        ps=self.getCmdOutput(cmd)
        del ps[0]
        if len(ps) == 0:
            return ''
        psname=ps[0].split()[10]
        if '/' in psname:
            psname = psname.split('/')[-1]
            
        if psname == 'java':
            if 'com.formationds.am.Main' in ps[0]:
                psname = 'am'
            elif 'com.formationds.om.Main' in ps[0]:
                psname = 'om'
        
        return self.getName(psname)

    def getPortOwner(self,port):
        cmd=['lsof','-i','TCP:' + str(port) , '-P']
        output = self.getCmdOutput(cmd)
        #print output
        if len(output) == 0:
            return -1
        del output[0]
        #print output
        pidinfo= [(l[0],l[1],l[8]) for l in   [ line.split() for line in output ]]

        for info in pidinfo:
            #print info
            if info[2].find('->') == -1 :
                return info[1];
            else:
                (fromhp,tohp) = info[2].split('->')
                fromport=int(fromhp.split(':')[1])
                if fromport == port:
                    return info[1]
        return -2

    def getPortInfo(self,port):
        cmd=['lsof','-i','TCP:' + str(port), '-P']
        output = self.getCmdOutput(cmd)
        if len(output) == 0:
            return -1
        del output[0]
        #print output
        pidinfo= [(l[0],l[1],l[8]) for l in   [ line.split() for line in output ]]

        for info in pidinfo:
            #print info
            if info[2].find('->') == -1 :
                print info[0],info[1], 'listening on ',port
            else:
                (fromhp,tohp) = info[2].split('->')
                fromport=fromhp.split(':')[1]
                toport=tohp.split(':')[1]
                if int(toport) == port :
                    print port , 'has a connection from',fromport
                
    def getAsList(self,data):
        if type(data)==types.ListType:
            return data
        elif type(data)==types.StringType:
            return [data]
        return []

    def getCmdOutput(self,cmd):
        p1=subprocess.Popen(cmd,stdout=subprocess.PIPE)
        return [line.strip() for line in p1.stdout]

    def getDisplayName(self,port):
        port=int(port)
        if port not in self.portMap:
            if port in self.ports and not self.ports[port].isdigit():
                name = self.ports[port]
            elif port in self.knownPorts:
                name = self.knownPorts[port]
            else:
                name = self.getProcess(self.getPortOwner(port))
            #print name,port
            self.portMap[port] = name

        #print port ,"=" , self.portMap[port]
        return self.portMap[port]

    def test(self):
        ompid = f.getPid('om')
        print 'pid of om ',ompid
        omport = 8904
        f.getPortInfo(omport)
        omport = 50139
        print f.getPortOwner(omport)
        print 'port',omport,'is owned by',f.getProcess(f.getPortOwner(omport))

    def runNgrep(self, match='', invert=False):
        
        if os.geteuid() != 0 :
            print "error : you need root privileges - mebbe try with sudo !!"
            return

        portstr=""
        
        for port in self.ports.keys():
            if len(portstr)>0:
                portstr += " or "
            portstr += "port " + str(port)

        if len(portstr) == 0:
            print 'error: no ports to listen on !!!'
            return

        cmd = ['ngrep','-l','-q']
        cmd += ['-d','any']
        if invert:
            cmd += ['-v']
        cmd += [match,portstr]
        #print cmd
        
        try :
            proc=subprocess.Popen(cmd,stdout=subprocess.PIPE)
            processLine = None
            while True:
                line=proc.stdout.readline().strip()
                if self.infoLine.match(line):
                    pieces=line.split(' ')
                    (fromhost,fromport) = pieces[1].split(':')
                    (tohost,toport) = pieces[3].split(':')
                    fromproc = self.getDisplayName(fromport)
                    toproc = self.getDisplayName(toport)
                    if fromproc == '' :
                        fromproc = fromhost
                    if toproc == '' :
                        toproc = tohost

                    if fromproc == 'om.config.api' and toproc == 'om':
                        toproc = 'om-java'
                    elif toproc == 'om.config.api' and fromproc == 'om':
                        fromproc = 'om-java'
                    
                    print "[%s:%s -> %s:%s] : [%s]" % (fromproc,fromport,toproc,toport,time.asctime())
                else:
                    if len(line)>2:
                        print(re.sub(r'\.{7}\.*','....',line)),
                    else:
                        print "\n"
                        


                #print proc.stdout.closed
        except KeyboardInterrupt :
            #print "hi"
            pass
        except:
            traceback.print_exc();
            #pass;
        
        sys.stdout.flush()
        sys.stderr.flush()
        
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Trace fds network calls. Just do "sudo ./fdstrace"',formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--test',dest='test',action='store_true',default=False ,help="run test fn")
    parser.add_argument('-m', '--match', dest='match',default='' ,help="Matching regex", type=str)
    parser.add_argument('-v', '--invert', dest='invert',action='store_true',default=False,help='invert match')

    for proc in ['om', 'sm', 'am', 'pm', 'dm', 'xdi', 'ssl']:
        parser.add_argument('--'+proc, dest=proc, action='store_true'   ,help='enable %s tracing' % (proc) )
        parser.add_argument('--no'+proc, dest=proc, action='store_false',help='disable %s tracing' % (proc) )
        eval('parser.set_defaults(' + proc + '=None)')

    parser.set_defaults(ssl=False)
    parser.add_argument('--none',dest='none',action='store_true',help='disable default ports')
    parser.set_defaults(none=False)

    parser.add_argument('ports', nargs=argparse.REMAINDER ,type=int ,help="other ports to be monitored")
    args = parser.parse_args()
    #print args
    for proc in ['om', 'sm', 'am', 'pm', 'dm', 'xdi']:
        if getattr(args, proc) == None:
            setattr(args, proc, not args.none)
                
    #print args
    #sys.exit(0)
    f = FDSTrace()

    if args.om:
        f.addPort("om")
        f.addPort("om.config.api")
        f.addPort("om.cfg.path")
        f.addPort("om.ctrl.path")
        f.addPort("om.ui")
        if args.ssl:
            f.addPort("om.ui.ssl")
    if args.dm:
        f.addPort("dm")
    if args.sm:
        f.addPort("sm")
    if args.pm:
        f.addPort("pm")
    if args.am:
        f.addPort("am")
        f.addPort("am.sync")
        f.addPort("am.async")
        f.addPort("am.nbd")
    if args.xdi:
        f.addPort("xdi")
        f.addPort("xdi.stats")
        f.addPort("xdi.swift")
        f.addPort("xdi.async")
        if args.ssl:
            f.addPort("xdi.ssl")

    count = 1
    for port in args.ports:
        f.addPort(str(count), port)
        count += 1

    if args.test:
        f.test()
    else:
        f.runNgrep(args.match, args.invert)

