#!/usr/bin/env python
import argparse
import subprocess
import types
import traceback
import re
import sys
import os
'''
Helper module around ngrep
'''
class FDSTrace:
    def __init__(self):
        self.apps={}
        self.apps["om"]="orchMgr"
        self.apps["am"]="AMAgent"
        self.apps["sm"]="StorMgr"
        self.apps["dm"]="DataMgr"
        #T 127.0.0.1:49917 -> 127.0.0.1:8904 [AP]
        self.infoLine = re.compile("T [0-9\.:]+:\d+ -> [0-9\.:]+:\d+ \[\w+\]")
        self.ports={}
        self.portMap={}

    def addPort(self,name,port):
        self.ports[name]=port

    def getName(self,name):
        if name in self.apps:
            return name

        for (k,v) in self.apps.iteritems():
            if v == name:
                return k

        return name

    def getPid(self,name):
        cmd= ['pgrep']
        if name in self.apps:
            name=self.apps[name]
        cmd.extend(self.getAsList(name))
        pid=self.getCmdOutput(cmd)
        if len(pid)>0:
            return int(pid[0])
        else:
            return -1

    def getProcess(self,pid):
        if int(pid) <=0 :
            return ''

        cmd=['ps','-p',pid]
        ps=self.getCmdOutput(cmd)
        del ps[0]
        if len(ps) == 0:
            return ''
        return self.getName(ps[0].split()[3])

    def getPortOwner(self,port):
        cmd=['lsof','-i','TCP:' + str(port)]
        output = self.getCmdOutput(cmd)
        #print output
        if len(output) == 0:
            return -1
        del output[0]
        #print output
        pidinfo= [(l[0],l[1],l[8]) for l in   [ line.split() for line in output ]]

        for info in pidinfo:
            #print info
            if info[2].find('->') == -1 :
                return info[1];
            else:
                (fromhp,tohp) = info[2].split('->')
                fromport=int(fromhp.split(':')[1])
                if fromport == port:
                    return info[1]
        return -2

    def getPortInfo(self,port):
        cmd=['lsof','-i','TCP:' + str(port)]
        output = self.getCmdOutput(cmd)
        if len(output) == 0:
            return -1
        del output[0]
        #print output
        pidinfo= [(l[0],l[1],l[8]) for l in   [ line.split() for line in output ]]

        for info in pidinfo:
            #print info
            if info[2].find('->') == -1 :
                print info[0],info[1], 'listening on ',port
            else:
                (fromhp,tohp) = info[2].split('->')
                fromport=fromhp.split(':')[1]
                toport=tohp.split(':')[1]
                if int(toport) == port :
                    print port , 'has a connection from',fromport
                
    def getAsList(self,data):
        if type(data)==types.ListType:
            return data
        elif type(data)==types.StringType:
            return [data]
        return []

    def getCmdOutput(self,cmd):
        p1=subprocess.Popen(cmd,stdout=subprocess.PIPE)
        return [line.strip() for line in p1.stdout]

    def getDisplayName(self,port):
        port=int(port)
        if port not in self.portMap:
            name = self.getProcess(self.getPortOwner(port))
            # check if it is a std ctrl port .
            ctrlname= name + 'ctrlport'
            #print name,port,ctrlname
            if ctrlname in self.ports and self.ports[ctrlname] == port:
                name= name + '-ctrl'
                
            #print name,port
            self.portMap[port] = name

        #print port ,"=" , self.portMap[port]
        return self.portMap[port]

    def test(self):
        ompid = f.getPid('om')
        print 'pid of om ',ompid
        omport = 8904
        f.getPortInfo(omport)
        omport = 50139
        print f.getPortOwner(omport)
        print 'port',omport,'is owned by',f.getProcess(f.getPortOwner(omport))

    def runNgrep(self):
        
        if os.geteuid() != 0 :
            print "error : you need root privileges - mebbe try with sudo !!"
            return

        portstr=""
        
        for port in self.ports.values():
            if len(portstr)>0:
                portstr += " or "
            portstr += "port " + str(port)

        cmd = ['ngrep','-l','-q','-d','any','',portstr]
        #print cmd
        
        try :
            proc=subprocess.Popen(cmd,stdout=subprocess.PIPE)
            while True:
                line=proc.stdout.readline()
                if self.infoLine.match(line.strip()):
                    pieces=line.split(' ')
                    (fromhost,fromport) = pieces[1].split(':')
                    (tohost,toport) = pieces[3].split(':')
                    fromproc = self.getDisplayName(fromport)
                    toproc = self.getDisplayName(toport)
                    if fromproc == '' :
                        fromproc = fromhost
                    if toproc == '' :
                        toproc = tohost
                    
                    print "[%s:%s ---> %s:%s]" % (fromproc,fromport,toproc,toport)
                else:
                    print(line.strip())
                #print proc.stdout.closed
        except KeyboardInterrupt :
            #print "hi"
            pass
        except:
            traceback.print_exc();
            #pass;
        
        sys.stdout.flush()
        sys.stderr.flush()
        
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Trace fds network calls ')
    parser.add_argument('omport',default=8904 ,help='om port' , type=int, nargs='?')
    parser.add_argument('omctrlport',default=8903 ,help='om ctrl port' , type=int, nargs='?')
    parser.add_argument('amport',default=8000 ,help='am port' , type=int, nargs='?')
    parser.add_argument('dmport',default=6902 ,help='dm port' , type=int, nargs='?')
    parser.add_argument('dmctrlport',default=7902 ,help='dm ctrl port' , type=int, nargs='?')
    parser.add_argument('smport',default=6901 ,help='sm port' , type=int, nargs='?')
    parser.add_argument('smctrlport',default=7901 ,help='sm ctrl port' , type=int, nargs='?')

    parser.add_argument('--test',dest='test',action='store_true',default=False ,help="run test fn")

    parser.add_argument('--om',dest='om',action='store_true'   ,help='enable OM tracing')
    parser.add_argument('--noom',dest='om',action='store_false',help='diable OM tracing')
    parser.set_defaults(om=True)

    parser.add_argument('--am',dest='am',action='store_true'   ,help='enable AM tracing')
    parser.add_argument('--noam',dest='am',action='store_false',help='enable AM tracing')
    parser.set_defaults(am=True)

    parser.add_argument('--dm',dest='dm',action='store_true'   ,help='enable DM tracing')
    parser.add_argument('--nodm',dest='dm',action='store_false',help='enable DM tracing')
    parser.set_defaults(dm=True)

    parser.add_argument('--sm',dest='sm',action='store_true'   ,help='enable SM tracing')
    parser.add_argument('--nosm',dest='sm',action='store_false',help='enable SM tracing')
    parser.set_defaults(sm=True)
    
    args = parser.parse_args()

    f = FDSTrace()

    if args.om:
        f.addPort("omport", args.omport)
        f.addPort("omctrlport" , args.omctrlport)
    if args.dm:
        f.addPort("dmport", args.dmport)
        f.addPort("dmctrlport" , args.dmctrlport)
    if args.sm:
        f.addPort("smport", args.smport)
        f.addPort("smctrlport" , args.smctrlport)
    if args.am:
        f.addPort("amport", args.amport)
    
    #print f.ports
        
    if args.test:
        f.test()
    else:
        f.runNgrep()

