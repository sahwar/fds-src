# Hello emacs, this is a -*-Makefile-*-
#
# Makefile.rule
# -------------
#

# Final compilation flags.
#
local_cc_flags  := $(osdep_cc_flags) $(main_cc_flags)
local_cc_flags  += $(comm_cc_flags) $(user_cc_flags)

local_cpp_flags := $(osdep_cpp_flags) $(main_cpp_flags)
local_cpp_flags += $(comm_cpp_flags) $(user_cpp_flags)

local_chk_cc    :=
local_chk_cpp   := \
    --filter=-whitespace/braces,-readability/streams,-build/include_order,-build/include_new_style,-runtime/references
local_chk_cpp   += --root=$(topdir)

rule_ar_flags   := $(osdep_ar_flags) $(user_ar_flags)
rule_ar_flags   += $(main_ar_flags) $(comm_ar_flags)

rule_so_flags   := $(osdep_so_flags) $(user_so_flags)
rule_so_flags   += $(main_so_flags) $(comm_so_flags)

rule_ld_flags   := $(comm_ld_flags) $(osdep_ld_flags)
rule_ld_flags   += -Wl,--start-group $(main_ld_flags) -Wl,--end-group
rule_ld_flags   += $(user_ld_flags)

rule_exe_flags  := $(rule_ld_flags)
rule_mod_flags  := $(osdep_ld_flags) $(osdep_mod_flags)
rule_mod_flags  += $(main_ld_flags) $(comm_mod_flags) $(user_ld_flags)

# Final list of files to be compiled.
#
local_c_files       := $(user_cc)
local_c_dep_files   := $(patsubst %.c,%,$(local_c_files))

local_cpp_files     := $(user_cpp)
local_cpp_dep_files := $(patsubst %.cpp,%,$(local_cpp_files))
local_cpp_dep_files += $(patsubst %.cc,%,$(local_cpp_files))

local_mk_files      := $(wildcard Makefile*)
local_src_files     := $(local_c_files) $(local_cpp_files)
local_obj_files     := $(comm_cc_objs) $(comm_cpp_objs)
local_chk_files     := \
    $(comm_cc_chks) $(comm_cpp_chks) \
    $(comm_hh_chks) $(comm_hpp_chks)

# Dependency file
#
ifdef comm_dir_objs
	local_dep_files := $(comm_dir_objs)/$(*F)
endif

# Common scripts for rules.
#
include $(incl_scripts)/Makefile.scpt

# -----------------------------------------------------------------------------
# Main make rule.
#
.PHONY: all
all: devsetup $(user_predep) devenv base_predepend $(user_postdep) \
     $(user_predepend) $(user_postdepend)                           \
	 $(user_preall) base_dirs base_style base_objs base_all $(user_postall)     \
	 $(user_tool) $(user_scripts) base_postmake                                 \
     $(user_preinstall) base_install $(user_postinstall)

# -----------------------------------------------------------------------------
# Tasks to do before the depend rule.
#
.PHONY: base_predepend
base_predepend: base_rpc base_ragel base_thrift base_json
	@$(scpt_setup_build_dir)

.PHONY: devenv
devenv:
	@echo $(local_cpp_flags) > ycm.flags

.PHONY: check-optimizations
check-optimizations:
	$(cpp) $(local_cpp_flags) -Q --help=optimizers

# -----------------------------------------------------------------------------
# The main rule to compile rpcgen/ragel/thrift/json.
#
.PHONY: base_rpc base_ragel base_thrift base_json
base_rpc: $(comm_rpc_files)

base_ragel: $(comm_rl_files)

base_thrift: $(comm_thrf_files)

base_json: $(comm_json_files)

ifdef user_rpc
$(foreach hdr,$(user_rpc),$(eval $(call scpt_mk_rpc_hdr,$(hdr))))
$(foreach clnt,$(user_rpc),$(eval $(call scpt_mk_rpc_clnt,$(clnt))))
$(foreach clnt,$(user_rpc),$(eval $(call scpt_mk_rpc_xdr,$(clnt))))
$(foreach serv,$(user_rpc),$(eval $(call scpt_mk_rpc_serv,$(serv))))
endif

ifdef user_ragel
$(foreach rl,$(user_ragel),$(eval $(call scpt_mk_ragel,$(rl))))
endif

ifdef user_thrift
$(foreach thft,$(user_thrift),$(eval $(call scpt_mk_thrift,$(thft))))

ifdef user_thrift_py_flag
$(foreach thft,$(user_thrift),$(eval $(call \
			scpt_mk_gen_thrift,$(thft),$(user_thrift_py_loc),$(user_thrift_py_flag))))
endif
endif

ifdef user_json
$(foreach js,$(user_json),$(eval $(call scpt_mk_json,$(js))))
endif

# -----------------------------------------------------------------------------
# The main rule to style check source files.
#
.PHONY: base_style
base_style: $(local_chk_files)

# -----------------------------------------------------------------------------
# The main rule to compile and link other targets.
#
.PHONY: base_objs
base_objs: $(local_obj_files)

.PHONY: base_dirs
base_dirs:
ifdef user_build_dir
	@for f in $(user_build_dir); do                                                   \
		echo Making $(MAKECMDGOALS) in `pwd`/$$f;                                     \
		makearg="--no-print-directory";                                               \
		if [ -e $$f/Makefile.fds ]; then                                              \
                   if [ x"${fastb}" = x ]; then \
			($(MAKE) -C $$f -f Makefile.fds $(MAKECMDGOALS) $$makearg) || exit 1;     \
                   else \
			($(MAKE) -C $$f $(speedup) -f Makefile.fds $(MAKECMDGOALS) $$makearg) || exit 1;     \
                   fi \
		else                                                                          \
                   if [ x"${fastb}" = x ]; then \
			($(MAKE) -C $$f $(MAKECMDGOALS) $$makearg) || exit 1;                     \
                   else \
			($(MAKE) $(speedup) -C $$f $(MAKECMDGOALS) $$makearg) || exit 1;                     \
                   fi \
		fi                                                                            \
	done
endif

.PHONY: base_all
base_all: $(comm_libs) $(comm_libsos) $(comm_exes) $(comm_mods) $(comm_imgs)

ifdef comm_lib_list
$(foreach lib,$(comm_lib_list),$(eval $(call scpt_mk_static_lib,$(lib))))
endif

ifdef comm_so_list
$(foreach lib,$(comm_so_list),$(eval $(call scpt_mk_dynamic_lib,$(lib))))
endif

ifdef comm_exe_list
$(foreach exe,$(comm_exe_list),$(eval $(call scrpt_mk_exe,$(exe))))
endif

ifdef comm_mod_list
$(foreach mod,$(comm_mod_list),$(eval $(call scpt_mk_kmod,$(mod))))
endif

ifdef comm_img_list
$(foreach img,$(comm_img_list),$(eval $(call scpt_mk_fwimg,$(img))))
endif

# -----------------------------------------------------------------------------
# What to do after making all targets.
#
.PHONY: base_postmake
base_postmake:

# -----------------------------------------------------------------------------
# Install all targets to the final Build directory.
#
.PHONY: base_install
ifdef user_install
local_install_files := $(patsubst %,$(comm_install_dir)/%,$(user_install))
$(foreach inst,$(user_install),$(eval $(call scpt_install,$(inst))))

base_install: $(local_install_files)
else
base_install:
endif

# -----------------------------------------------------------------------------
# Clean target
#
local_targets := $(comm_libs) $(comm_libsos) $(comm_exes) $(comm_mods) $(comm_imgs)
.PHONY: clean
clean:
	@$(scpt_make_clean)
ifdef local_targets
	@rm -f $(local_targets)
endif
ifdef user_clean
	@for f in $(user_clean); do                                               \
        [ -f $$f ] && rm $$f;                                                 \
        if [ -d $$f ]; then                                                   \
            if [ -e $$f/Makefile ]; then                                      \
                (cd $$f; make clean);                                         \
            else                                                              \
                rm -rf $$f;                                                   \
            fi                                                                \
        fi                                                                    \
    done; exit 0
endif
ifdef user_build_dir
	@for f in $(user_build_dir); do                                           \
		echo Cleaning `pwd`/$$f;                                              \
		makearg="--no-print-directory";                                       \
		if [ -e $$f/Makefile.fds ]; then                                      \
			(cd $$f && $(MAKE) -f Makefile.fds clean $$makearg);              \
		else                                                                  \
			(cd $$f && $(MAKE) clean $$makearg);                              \
		fi                                                                    \
	done
endif
ifdef CCACHE
	@ccache -C
endif
ifdef COVERAGE
ifdef VERBOSE
	find "$(topdir)" -name '*.gcno' -or -name '*.gcda' -exec rm "{}" \;
else
	@find "$(topdir)" -name '*.gcno' -or -name '*.gcda' -exec rm "{}" \;
endif  # VERBOSE
endif  # COVERAGE

.PHONY: clobber
clobber: clean $(user_clobber)
ifdef comm_clobber
	@rm $(comm_clobber)
endif

# -----------------------------------------------------------------------------
# Rule to do style check for .c/.h file.
#
$(comm_dir_objs)/%.c-chk : %.c
ifdef VERBOSE
	$(call scpt_check_style,$(cc_style),$(local_chk_cc),$(user_no_style),$<,$@)
else
	@echo -n "    [CC STYLE]    $<"
	@mkdir -p $(comm_dir_objs)
	@$(call scpt_check_style,$(cc_style),$(local_chk_cc),$(user_no_style),$<,$@)
endif

$(comm_dir_objs)/%.h-chk : %.h
ifdef VERBOSE
	$(call scpt_check_style, \
        $(cpp_style),$(local_chk_cpp),$(user_no_style),$<,$@)
else
	@echo -n "    [H STYLE]   $<"
	@mkdir -p $(comm_dir_objs)
	@$(call scpt_check_style, \
        $(cpp_style),$(local_chk_cpp),$(user_no_style),$<,$@)
endif

# -----------------------------------------------------------------------------
# Rule to do style check for .cpp/.hpp file.
#
$(comm_dir_objs)/%.cpp-chk : %.cpp
ifdef VERBOSE
	$(call scpt_check_style, \
        $(cpp_style),$(local_chk_cpp),$(user_no_style),$<,$@)
else
	@echo -n "    [CPP STYLE]   $<"
	@mkdir -p $(comm_dir_objs)
	@$(call scpt_check_style, \
        $(cpp_style),$(local_chk_cpp),$(user_no_style),$<,$@)
endif

$(comm_dir_objs)/%.hpp-chk : %.hpp
ifdef VERBOSE
	$(call scpt_check_style, \
        $(cpp_style),$(local_chk_cpp),$(user_no_style),$<,$@)
else
	@echo -n "    [H STYLE]   $<"
	@mkdir -p $(comm_dir_objs)
	@$(call scpt_check_style, \
        $(cpp_style),$(local_chk_cpp),$(user_no_style),$<,$@)
endif

# -----------------------------------------------------------------------------
# Rule to compile .c file.
#
$(comm_dir_objs)/%.o : %.c
ifdef VERBOSE
	$(cc) -MMD -MP $(local_cc_flags) -c $< -o $@
else
	@echo "    [CC]          $<"
	@mkdir -p $(comm_dir_objs)
	@$(cc) -MMD -MP $(local_cc_flags) -c $< -o $@
endif
	@mv $(local_dep_files)$*.d $(local_dep_files)$*.P

# -----------------------------------------------------------------------------
# Rule to compile .cpp file.
#
$(comm_dir_objs)/%.o : %.cpp
ifdef VERBOSE
	$(cpp) -MMD -MP $(local_cpp_flags) -c $< -o $@
else
	@echo "    [CPP]         $<"
	@mkdir -p $(comm_dir_objs)
	@$(cpp) -MMD -MP $(local_cpp_flags) -c $< -o $@
endif
	@mv $(local_dep_files)$*.d $(local_dep_files)$*.P

$(comm_dir_objs)/%.o : %.cc
ifdef VERBOSE
	$(cpp) -MMD -MP $(local_cpp_flags) -c $< -o $@
else
	@echo "    [CPP]         $<"
	@mkdir -p $(comm_dir_objs)
	@$(cpp) -MMD -MP $(local_cpp_flags) -c $< -o $@
endif
	@mv $(local_dep_files)$*.d $(local_dep_files)$*.P

# -----------------------------------------------------------------------------
# Include the Dependencies file if it has been generated.
#
-include $(wildcard $(comm_dir_objs)/*.P)

# -----------------------------------------------------------------------------
# Make all runtime targets
#
.PHONY: rule_all_os
rule_all_os:
	@$(scpt_make_all_oses)

# -----------------------------------------------------------------------------
# Make cscope database
#
.PHONY: cscope
cscope:
	@$(scpt_make_cscope)

# -----------------------------------------------------------------------------
# Update ctags database
#
.PHONY: ctags
ctags:
	@$(scpt_make_ctags)

# -----------------------------------------------------------------------------
# Precheckin rule
#
.PHONY: precheckin
precheckin:
	@echo Run precheckin....
	@echo Running Unit tests
	(cd $(topdir) && ../jenkins_scripts/run-unit-tests.py)
	@echo Running Smoke test
	(cd $(topdir) && python test/fds-primitive-smoke.py)

# -----------------------------------------------------------------------------
# Debug target to dump out Makefile variables
#
.PHONY: mk_debug
mk_debug:
	@echo user_rtime = $(user_rtime_env), user_target = $(user_target)
	@echo osdep_target = $(osdep_target) flags = $(local_cc_flags)
	@echo ld = $(rule_ld_flags)
	@echo comm_dir_objs = $(comm_dir_objs)
	@echo user_predep= $(user_predep)
	@echo comm_cc_chks= $(comm_cc_chks)
	@echo user_hh= $(user_hh)

# -----------------------------------------------------------------------------
# Setup FDS Repository
# -----------------------------------------------------------------------------
fdsrepofile:=/etc/apt/sources.list.d/fds.list
reposetupscript:=$(incl_scripts)/../../tools/setupfdsrepo.sh

.IGNORE: $(fdsrepofile)
$(fdsrepofile) : $(reposetupscript)
	@sudo $(reposetupscript)

.IGNORE: fdsrepo
.PHONY: fdsrepo fdspkgs
fdsrepo :  $(fdsrepofile)

# -----------------------------------------------------------------------------
# Keep track of where all relevant ansible files live
# -----------------------------------------------------------------------------
ansible_dir := $(incl_scripts)/../../../ansible
run_ansible_playbook_local := ansible-playbook -i $(ansible_dir)/inventory/localhost -c local $(ansible_dir)/playbooks

# -----------------------------------------------------------------------------
# Setup and run ansible for devsetup dependency install / config
# -----------------------------------------------------------------------------
devsetup_playbook := $(ansible_dir)/playbooks/devsetup.yml
devsetup_is_up_to_date := $(ansible_dir)/.devsetup-is-up-to-date
devsetup_is_running := $(ansible_dir)/.devsetup-is-running

$(devsetup_is_up_to_date): $(devsetup_playbook) $(ansible_dir)/devsetup_ansible.sh
	@if [ ! "x${skip-devsetup}" = "xtrue" ]; then \
		$(ansible_dir)/devsetup_ansible.sh ; \
	fi

.PHONY: devsetup
devsetup: $(devsetup_is_up_to_date)

# -----------------------------------------------------------------------------
# Run ansible to generate packageable config files
# -----------------------------------------------------------------------------
generate-config-files: $(devsetup_is_up_to_date)
	@rm -f $(ansible_dir)/../source/config/etc/*.conf $(ansible_dir)/../source/test/formation.conf
ifdef VERBOSE
	$(run_ansible_playbook_local)/generate_config_files.yml
else
	@$(run_ansible_playbook_local)/generate_config_files.yml
endif

# -----------------------------------------------------------------------------
# Run omnibus to build fds-deps package
# -----------------------------------------------------------------------------
omnibus_dir := $(incl_scripts)/../../../omnibus

ifeq (package,$(firstword $(MAKECMDGOALS)))
  project := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  $(eval $(project):;@:)
endif

ifneq "$(project)" ""
pkg: $(omnibus_dir)
	[ -e /usr/local/bin/bundle ] && echo "Bundler installed, continuing" || sudo gem install bundler
	[ -d $(omnibus_dir)/omnibus-$(project) ] || (echo "No such project '$(project)'" && exit 1)
	cd $(omnibus_dir)/omnibus-$(project) && rm -f pkg/*
	cd $(omnibus_dir)/omnibus-$(project) && bundle install --without development --binstubs
	cd $(omnibus_dir)/omnibus-$(project) && FDS_SRC_DIR=$(shell cd $(incl_scripts)/../../.. && pwd -P) bundle exec bin/omnibus build $(project)
	
else
pkg:
	@echo "You must pass an argument to the 'package' target (ex: make package fds-platform)"
endif

.PHONY: package
package : pkg


# -----------------------------------------------------------------------------
# List Targets
# http://stackoverflow.com/a/9524878
# -----------------------------------------------------------------------------
.PHONY: list
list:
	@$(MAKE) -qp | awk -F':' '/^[a-zA-Z0-9][^$$#\/\t=]*:([^=]|$$)/ {split($$1,A,/ /);for(i in A)print A[i]}' | sort
