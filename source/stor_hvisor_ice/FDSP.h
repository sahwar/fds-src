// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `FDSP.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __FDSP_h__
#define __FDSP_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace FDS_ProtocolInterface
{

class FDSP_PutObjType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_PutObjType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FDS_ProtocolInterface::FDSP_PutObjType*);

class FDSP_GetObjType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_GetObjType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FDS_ProtocolInterface::FDSP_GetObjType*);

class FDSP_OffsetWriteObjType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType*);

class FDSP_RedirReadObjType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType*);

class FDSP_VerifyObjType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType*);

class FDSP_UpdateCatalogType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType*);

class FDSP_MsgHdrType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType*);

class FDSP_DataPathReq;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq*);

class FDSP_DataPathRespCback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_DataPathRespCback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FDS_ProtocolInterface::FDSP_DataPathRespCback*);

}

}

namespace FDS_ProtocolInterface
{

class FDSP_PutObjType;
bool operator==(const FDSP_PutObjType&, const FDSP_PutObjType&);
bool operator<(const FDSP_PutObjType&, const FDSP_PutObjType&);
::Ice::Object* upCast(::FDS_ProtocolInterface::FDSP_PutObjType*);
typedef ::IceInternal::Handle< ::FDS_ProtocolInterface::FDSP_PutObjType> FDSP_PutObjTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_PutObjType> FDSP_PutObjTypePrx;
void __patch(FDSP_PutObjTypePtr&, const ::Ice::ObjectPtr&);

class FDSP_GetObjType;
bool operator==(const FDSP_GetObjType&, const FDSP_GetObjType&);
bool operator<(const FDSP_GetObjType&, const FDSP_GetObjType&);
::Ice::Object* upCast(::FDS_ProtocolInterface::FDSP_GetObjType*);
typedef ::IceInternal::Handle< ::FDS_ProtocolInterface::FDSP_GetObjType> FDSP_GetObjTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_GetObjType> FDSP_GetObjTypePrx;
void __patch(FDSP_GetObjTypePtr&, const ::Ice::ObjectPtr&);

class FDSP_OffsetWriteObjType;
bool operator==(const FDSP_OffsetWriteObjType&, const FDSP_OffsetWriteObjType&);
bool operator<(const FDSP_OffsetWriteObjType&, const FDSP_OffsetWriteObjType&);
::Ice::Object* upCast(::FDS_ProtocolInterface::FDSP_OffsetWriteObjType*);
typedef ::IceInternal::Handle< ::FDS_ProtocolInterface::FDSP_OffsetWriteObjType> FDSP_OffsetWriteObjTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType> FDSP_OffsetWriteObjTypePrx;
void __patch(FDSP_OffsetWriteObjTypePtr&, const ::Ice::ObjectPtr&);

class FDSP_RedirReadObjType;
bool operator==(const FDSP_RedirReadObjType&, const FDSP_RedirReadObjType&);
bool operator<(const FDSP_RedirReadObjType&, const FDSP_RedirReadObjType&);
::Ice::Object* upCast(::FDS_ProtocolInterface::FDSP_RedirReadObjType*);
typedef ::IceInternal::Handle< ::FDS_ProtocolInterface::FDSP_RedirReadObjType> FDSP_RedirReadObjTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType> FDSP_RedirReadObjTypePrx;
void __patch(FDSP_RedirReadObjTypePtr&, const ::Ice::ObjectPtr&);

class FDSP_VerifyObjType;
bool operator==(const FDSP_VerifyObjType&, const FDSP_VerifyObjType&);
bool operator<(const FDSP_VerifyObjType&, const FDSP_VerifyObjType&);
::Ice::Object* upCast(::FDS_ProtocolInterface::FDSP_VerifyObjType*);
typedef ::IceInternal::Handle< ::FDS_ProtocolInterface::FDSP_VerifyObjType> FDSP_VerifyObjTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType> FDSP_VerifyObjTypePrx;
void __patch(FDSP_VerifyObjTypePtr&, const ::Ice::ObjectPtr&);

class FDSP_UpdateCatalogType;
bool operator==(const FDSP_UpdateCatalogType&, const FDSP_UpdateCatalogType&);
bool operator<(const FDSP_UpdateCatalogType&, const FDSP_UpdateCatalogType&);
::Ice::Object* upCast(::FDS_ProtocolInterface::FDSP_UpdateCatalogType*);
typedef ::IceInternal::Handle< ::FDS_ProtocolInterface::FDSP_UpdateCatalogType> FDSP_UpdateCatalogTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType> FDSP_UpdateCatalogTypePrx;
void __patch(FDSP_UpdateCatalogTypePtr&, const ::Ice::ObjectPtr&);

class FDSP_MsgHdrType;
bool operator==(const FDSP_MsgHdrType&, const FDSP_MsgHdrType&);
bool operator<(const FDSP_MsgHdrType&, const FDSP_MsgHdrType&);
::Ice::Object* upCast(::FDS_ProtocolInterface::FDSP_MsgHdrType*);
typedef ::IceInternal::Handle< ::FDS_ProtocolInterface::FDSP_MsgHdrType> FDSP_MsgHdrTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType> FDSP_MsgHdrTypePrx;
void __patch(FDSP_MsgHdrTypePtr&, const ::Ice::ObjectPtr&);

class FDSP_DataPathReq;
bool operator==(const FDSP_DataPathReq&, const FDSP_DataPathReq&);
bool operator<(const FDSP_DataPathReq&, const FDSP_DataPathReq&);
::Ice::Object* upCast(::FDS_ProtocolInterface::FDSP_DataPathReq*);
typedef ::IceInternal::Handle< ::FDS_ProtocolInterface::FDSP_DataPathReq> FDSP_DataPathReqPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq> FDSP_DataPathReqPrx;
void __patch(FDSP_DataPathReqPtr&, const ::Ice::ObjectPtr&);

class FDSP_DataPathRespCback;
bool operator==(const FDSP_DataPathRespCback&, const FDSP_DataPathRespCback&);
bool operator<(const FDSP_DataPathRespCback&, const FDSP_DataPathRespCback&);
::Ice::Object* upCast(::FDS_ProtocolInterface::FDSP_DataPathRespCback*);
typedef ::IceInternal::Handle< ::FDS_ProtocolInterface::FDSP_DataPathRespCback> FDSP_DataPathRespCbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_DataPathRespCback> FDSP_DataPathRespCbackPrx;
void __patch(FDSP_DataPathRespCbackPtr&, const ::Ice::ObjectPtr&);

}

namespace FDS_ProtocolInterface
{

struct FDS_ObjectIdType
{
    ::Ice::Long hash_high;
    ::Ice::Long hash_low;
    ::Ice::Byte conflict_id;

    bool operator==(const FDS_ObjectIdType& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(hash_high != __rhs.hash_high)
        {
            return false;
        }
        if(hash_low != __rhs.hash_low)
        {
            return false;
        }
        if(conflict_id != __rhs.conflict_id)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FDS_ObjectIdType& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(hash_high < __rhs.hash_high)
        {
            return true;
        }
        else if(__rhs.hash_high < hash_high)
        {
            return false;
        }
        if(hash_low < __rhs.hash_low)
        {
            return true;
        }
        else if(__rhs.hash_low < hash_low)
        {
            return false;
        }
        if(conflict_id < __rhs.conflict_id)
        {
            return true;
        }
        else if(__rhs.conflict_id < conflict_id)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FDS_ObjectIdType& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FDS_ObjectIdType& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FDS_ObjectIdType& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FDS_ObjectIdType& __rhs) const
    {
        return !operator<(__rhs);
    }
};

enum fds_dmgr_txn_state
{
    FDS_DMGR_TXN_STATUS_INVALID,
    FDS_DMGR_TXN_STATUS_OPEN,
    FDS_DMGR_TXN_STATUS_COMMITED,
    FDS_DMGR_TXN_STATUS_CANCELED
};

enum FDSP_MsgCodeType
{
    FDSP_MSG_PUT_OBJ_REQ,
    FDSP_MSG_GET_OBJ_REQ,
    FDSP_MSG_VERIFY_OBJ_REQ,
    FDSP_MSG_UPDATE_CAT_OBJ_REQ,
    FDSP_MSG_OFFSET_WRITE_OBJ_REQ,
    FDSP_MSG_REDIR_READ_OBJ_REQ,
    FDSP_MSG_PUT_OBJ_RSP,
    FDSP_MSG_GET_OBJ_RSP,
    FDSP_MSG_VERIFY_OBJ_RSP,
    FDSP_MSG_UPDATE_CAT_OBJ_RSP,
    FDSP_MSG_OFFSET_WRITE_OBJ_RSP,
    FDSP_MSG_REDIR_READ_OBJ_RSP
};

enum FDSP_MgrIdType
{
    FDSP_STOR_MGR,
    FDSP_DATA_MGR,
    FDSP_STOR_HVISOR,
    FDSP_ORCH_MGR
};

enum FDSP_ResultType
{
    FDSP_ERR_OK,
    FDSP_ERR_FAILED
};

enum FDSP_ErrType
{
    FDSP_ERR_SM_NO_SPACE
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::FDS_ProtocolInterface::FDS_ObjectIdType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::FDS_ProtocolInterface::FDS_ObjectIdType, S>
{
    static void write(S* __os, const ::FDS_ProtocolInterface::FDS_ObjectIdType& v)
    {
        __os->write(v.hash_high);
        __os->write(v.hash_low);
        __os->write(v.conflict_id);
    }
};

template<class S>
struct StreamReader< ::FDS_ProtocolInterface::FDS_ObjectIdType, S>
{
    static void read(S* __is, ::FDS_ProtocolInterface::FDS_ObjectIdType& v)
    {
        __is->read(v.hash_high);
        __is->read(v.hash_low);
        __is->read(v.conflict_id);
    }
};

template<>
struct StreamableTraits< ::FDS_ProtocolInterface::fds_dmgr_txn_state>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FDS_ProtocolInterface::FDSP_MsgCodeType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 11;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FDS_ProtocolInterface::FDSP_MgrIdType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FDS_ProtocolInterface::FDSP_ResultType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FDS_ProtocolInterface::FDSP_ErrType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace FDS_ProtocolInterface
{

class Callback_FDSP_DataPathReq_GetObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathReq_GetObject_Base> Callback_FDSP_DataPathReq_GetObjectPtr;

class Callback_FDSP_DataPathReq_PutObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathReq_PutObject_Base> Callback_FDSP_DataPathReq_PutObjectPtr;

class Callback_FDSP_DataPathReq_UpdateCatalogObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathReq_UpdateCatalogObject_Base> Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr;

class Callback_FDSP_DataPathReq_OffsetWriteObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathReq_OffsetWriteObject_Base> Callback_FDSP_DataPathReq_OffsetWriteObjectPtr;

class Callback_FDSP_DataPathReq_RedirReadObject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathReq_RedirReadObject_Base> Callback_FDSP_DataPathReq_RedirReadObjectPtr;

class Callback_FDSP_DataPathRespCback_GetObjectResp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathRespCback_GetObjectResp_Base> Callback_FDSP_DataPathRespCback_GetObjectRespPtr;

class Callback_FDSP_DataPathRespCback_PutObjectResp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathRespCback_PutObjectResp_Base> Callback_FDSP_DataPathRespCback_PutObjectRespPtr;

class Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp_Base> Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr;

class Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp_Base> Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr;

class Callback_FDSP_DataPathRespCback_RedirReadObjectResp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FDSP_DataPathRespCback_RedirReadObjectResp_Base> Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr;

}

namespace IceProxy
{

namespace FDS_ProtocolInterface
{

class FDSP_PutObjType : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_secure(bool __secure) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_twoway() const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_oneway() const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_batchOneway() const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_datagram() const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_batchDatagram() const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_compress(bool __compress) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_PutObjType> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FDSP_PutObjType*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FDSP_GetObjType : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_secure(bool __secure) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_twoway() const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_oneway() const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_batchOneway() const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_datagram() const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_batchDatagram() const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_compress(bool __compress) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_GetObjType> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FDSP_GetObjType*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FDSP_OffsetWriteObjType : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_secure(bool __secure) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_twoway() const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_oneway() const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_batchOneway() const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_datagram() const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_batchDatagram() const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_compress(bool __compress) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_OffsetWriteObjType> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FDSP_OffsetWriteObjType*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FDSP_RedirReadObjType : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_secure(bool __secure) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_twoway() const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_oneway() const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_batchOneway() const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_datagram() const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_batchDatagram() const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_compress(bool __compress) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_RedirReadObjType> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FDSP_RedirReadObjType*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FDSP_VerifyObjType : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_secure(bool __secure) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_twoway() const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_oneway() const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_batchOneway() const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_datagram() const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_batchDatagram() const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_compress(bool __compress) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_VerifyObjType> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FDSP_VerifyObjType*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FDSP_UpdateCatalogType : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_secure(bool __secure) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_twoway() const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_oneway() const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_batchOneway() const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_datagram() const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_batchDatagram() const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_compress(bool __compress) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_UpdateCatalogType> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FDSP_UpdateCatalogType*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FDSP_MsgHdrType : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_secure(bool __secure) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_twoway() const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_oneway() const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_batchOneway() const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_datagram() const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_batchDatagram() const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_compress(bool __compress) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_MsgHdrType> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FDSP_MsgHdrType*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FDSP_DataPathReq : virtual public ::IceProxy::Ice::Object
{
public:

    void GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req)
    {
        GetObject(fdsp_msg, get_obj_req, 0);
    }
    void GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context& __ctx)
    {
        GetObject(fdsp_msg, get_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_GetObject(fdsp_msg, get_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObject(fdsp_msg, get_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_GetObject(fdsp_msg, get_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObject(fdsp_msg, get_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req)
    {
        return begin_GetObject(fdsp_msg, get_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_GetObject(fdsp_msg, get_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObject(fdsp_msg, get_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObject(fdsp_msg, get_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_GetObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObject(fdsp_msg, get_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_GetObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObject(fdsp_msg, get_obj_req, &__ctx, __del, __cookie);
    }

    void end_GetObject(const ::Ice::AsyncResultPtr&);
    
private:

    void GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req)
    {
        PutObject(fdsp_msg, put_obj_req, 0);
    }
    void PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context& __ctx)
    {
        PutObject(fdsp_msg, put_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_PutObject(fdsp_msg, put_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PutObject(fdsp_msg, put_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_PutObject(fdsp_msg, put_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PutObject(fdsp_msg, put_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req)
    {
        return begin_PutObject(fdsp_msg, put_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_PutObject(fdsp_msg, put_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PutObject(fdsp_msg, put_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PutObject(fdsp_msg, put_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_PutObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PutObject(fdsp_msg, put_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_PutObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PutObject(fdsp_msg, put_obj_req, &__ctx, __del, __cookie);
    }

    void end_PutObject(const ::Ice::AsyncResultPtr&);
    
private:

    void PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req)
    {
        UpdateCatalogObject(fdsp_msg, cat_obj_req, 0);
    }
    void UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& __ctx)
    {
        UpdateCatalogObject(fdsp_msg, cat_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req)
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCatalogObject(fdsp_msg, cat_obj_req, &__ctx, __del, __cookie);
    }

    void end_UpdateCatalogObject(const ::Ice::AsyncResultPtr&);
    
private:

    void UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req)
    {
        OffsetWriteObject(fdsp_msg, offset_write_obj_req, 0);
    }
    void OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& __ctx)
    {
        OffsetWriteObject(fdsp_msg, offset_write_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req)
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_OffsetWriteObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_OffsetWriteObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_OffsetWriteObject(fdsp_msg, offset_write_obj_req, &__ctx, __del, __cookie);
    }

    void end_OffsetWriteObject(const ::Ice::AsyncResultPtr&);
    
private:

    void OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req)
    {
        RedirReadObject(fdsp_msg, redir_write_obj_req, 0);
    }
    void RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& __ctx)
    {
        RedirReadObject(fdsp_msg, redir_write_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req)
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_RedirReadObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathReq_RedirReadObjectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedirReadObject(fdsp_msg, redir_write_obj_req, &__ctx, __del, __cookie);
    }

    void end_RedirReadObject(const ::Ice::AsyncResultPtr&);
    
private:

    void RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_secure(bool __secure) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_twoway() const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_oneway() const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_batchOneway() const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_datagram() const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_batchDatagram() const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_compress(bool __compress) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathReq> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FDSP_DataPathReq*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FDSP_DataPathRespCback : virtual public ::IceProxy::Ice::Object
{
public:

    void GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req)
    {
        GetObjectResp(fdsp_msg, get_obj_req, 0);
    }
    void GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::Ice::Context& __ctx)
    {
        GetObjectResp(fdsp_msg, get_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req)
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_GetObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx& get_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_GetObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObjectResp(fdsp_msg, get_obj_req, &__ctx, __del, __cookie);
    }

    void end_GetObjectResp(const ::Ice::AsyncResultPtr&);
    
private:

    void GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req)
    {
        PutObjectResp(fdsp_msg, put_obj_req, 0);
    }
    void PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::Ice::Context& __ctx)
    {
        PutObjectResp(fdsp_msg, put_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req)
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_PutObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx& put_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_PutObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PutObjectResp(fdsp_msg, put_obj_req, &__ctx, __del, __cookie);
    }

    void end_PutObjectResp(const ::Ice::AsyncResultPtr&);
    
private:

    void PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req)
    {
        UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, 0);
    }
    void UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& __ctx)
    {
        UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req)
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCatalogObjectResp(fdsp_msg, cat_obj_req, &__ctx, __del, __cookie);
    }

    void end_UpdateCatalogObjectResp(const ::Ice::AsyncResultPtr&);
    
private:

    void UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req)
    {
        OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, 0);
    }
    void OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& __ctx)
    {
        OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req)
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_OffsetWriteObjectResp(fdsp_msg, offset_write_obj_req, &__ctx, __del, __cookie);
    }

    void end_OffsetWriteObjectResp(const ::Ice::AsyncResultPtr&);
    
private:

    void OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req)
    {
        RedirReadObjectResp(fdsp_msg, redir_write_obj_req, 0);
    }
    void RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& __ctx)
    {
        RedirReadObjectResp(fdsp_msg, redir_write_obj_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req)
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& __ctx)
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context& __ctx, const ::FDS_ProtocolInterface::Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RedirReadObjectResp(fdsp_msg, redir_write_obj_req, &__ctx, __del, __cookie);
    }

    void end_RedirReadObjectResp(const ::Ice::AsyncResultPtr&);
    
private:

    void RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_secure(bool __secure) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_twoway() const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_oneway() const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_batchOneway() const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_datagram() const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_batchDatagram() const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_compress(bool __compress) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FDSP_DataPathRespCback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FDSP_DataPathRespCback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace FDS_ProtocolInterface
{

class FDSP_PutObjType : virtual public ::IceDelegate::Ice::Object
{
public:
};

class FDSP_GetObjType : virtual public ::IceDelegate::Ice::Object
{
public:
};

class FDSP_OffsetWriteObjType : virtual public ::IceDelegate::Ice::Object
{
public:
};

class FDSP_RedirReadObjType : virtual public ::IceDelegate::Ice::Object
{
public:
};

class FDSP_VerifyObjType : virtual public ::IceDelegate::Ice::Object
{
public:
};

class FDSP_UpdateCatalogType : virtual public ::IceDelegate::Ice::Object
{
public:
};

class FDSP_MsgHdrType : virtual public ::IceDelegate::Ice::Object
{
public:
};

class FDSP_DataPathReq : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class FDSP_DataPathRespCback : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace FDS_ProtocolInterface
{

class FDSP_PutObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_PutObjType,
                        virtual public ::IceDelegateM::Ice::Object
{
public:
};

class FDSP_GetObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_GetObjType,
                        virtual public ::IceDelegateM::Ice::Object
{
public:
};

class FDSP_OffsetWriteObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_OffsetWriteObjType,
                                virtual public ::IceDelegateM::Ice::Object
{
public:
};

class FDSP_RedirReadObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_RedirReadObjType,
                              virtual public ::IceDelegateM::Ice::Object
{
public:
};

class FDSP_VerifyObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_VerifyObjType,
                           virtual public ::IceDelegateM::Ice::Object
{
public:
};

class FDSP_UpdateCatalogType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_UpdateCatalogType,
                               virtual public ::IceDelegateM::Ice::Object
{
public:
};

class FDSP_MsgHdrType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_MsgHdrType,
                        virtual public ::IceDelegateM::Ice::Object
{
public:
};

class FDSP_DataPathReq : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq,
                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FDSP_DataPathRespCback : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathRespCback,
                               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace FDS_ProtocolInterface
{

class FDSP_PutObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_PutObjType,
                        virtual public ::IceDelegateD::Ice::Object
{
public:
};

class FDSP_GetObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_GetObjType,
                        virtual public ::IceDelegateD::Ice::Object
{
public:
};

class FDSP_OffsetWriteObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_OffsetWriteObjType,
                                virtual public ::IceDelegateD::Ice::Object
{
public:
};

class FDSP_RedirReadObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_RedirReadObjType,
                              virtual public ::IceDelegateD::Ice::Object
{
public:
};

class FDSP_VerifyObjType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_VerifyObjType,
                           virtual public ::IceDelegateD::Ice::Object
{
public:
};

class FDSP_UpdateCatalogType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_UpdateCatalogType,
                               virtual public ::IceDelegateD::Ice::Object
{
public:
};

class FDSP_MsgHdrType : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_MsgHdrType,
                        virtual public ::IceDelegateD::Ice::Object
{
public:
};

class FDSP_DataPathReq : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq,
                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FDSP_DataPathRespCback : virtual public ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathRespCback,
                               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace FDS_ProtocolInterface
{

class FDSP_PutObjType : virtual public ::Ice::Object
{
public:

    typedef FDSP_PutObjTypePrx ProxyType;
    typedef FDSP_PutObjTypePtr PointerType;

    FDSP_PutObjType()
    {
    }

    FDSP_PutObjType(const ::FDS_ProtocolInterface::FDS_ObjectIdType& __ice_data_obj_id, ::Ice::Int __ice_data_obj_len, ::Ice::Int __ice_volume_offset, const ::std::string& __ice_data_obj) :
        data_obj_id(__ice_data_obj_id),
        data_obj_len(__ice_data_obj_len),
        volume_offset(__ice_volume_offset),
        data_obj(__ice_data_obj)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::FDS_ProtocolInterface::FDS_ObjectIdType data_obj_id;

    ::Ice::Int data_obj_len;

    ::Ice::Int volume_offset;

    ::std::string data_obj;

protected:

    virtual ~FDSP_PutObjType() {}

    friend class FDSP_PutObjType__staticInit;
};

class FDSP_PutObjType__staticInit
{
public:

    ::FDS_ProtocolInterface::FDSP_PutObjType _init;
};

static FDSP_PutObjType__staticInit _FDSP_PutObjType_init;

inline bool operator==(const FDSP_PutObjType& l, const FDSP_PutObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FDSP_PutObjType& l, const FDSP_PutObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FDSP_GetObjType : virtual public ::Ice::Object
{
public:

    typedef FDSP_GetObjTypePrx ProxyType;
    typedef FDSP_GetObjTypePtr PointerType;

    FDSP_GetObjType()
    {
    }

    FDSP_GetObjType(const ::FDS_ProtocolInterface::FDS_ObjectIdType& __ice_data_obj_id, ::Ice::Int __ice_data_obj_len, const ::std::string& __ice_data_obj) :
        data_obj_id(__ice_data_obj_id),
        data_obj_len(__ice_data_obj_len),
        data_obj(__ice_data_obj)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::FDS_ProtocolInterface::FDS_ObjectIdType data_obj_id;

    ::Ice::Int data_obj_len;

    ::std::string data_obj;

protected:

    virtual ~FDSP_GetObjType() {}
};

inline bool operator==(const FDSP_GetObjType& l, const FDSP_GetObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FDSP_GetObjType& l, const FDSP_GetObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FDSP_OffsetWriteObjType : virtual public ::Ice::Object
{
public:

    typedef FDSP_OffsetWriteObjTypePrx ProxyType;
    typedef FDSP_OffsetWriteObjTypePtr PointerType;

    FDSP_OffsetWriteObjType()
    {
    }

    FDSP_OffsetWriteObjType(const ::FDS_ProtocolInterface::FDS_ObjectIdType& __ice_data_obj_id_old, ::Ice::Int __ice_data_obj_len, const ::FDS_ProtocolInterface::FDS_ObjectIdType& __ice_data_obj_id_new, const ::std::string& __ice_data_obj) :
        data_obj_id_old(__ice_data_obj_id_old),
        data_obj_len(__ice_data_obj_len),
        data_obj_id_new(__ice_data_obj_id_new),
        data_obj(__ice_data_obj)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::FDS_ProtocolInterface::FDS_ObjectIdType data_obj_id_old;

    ::Ice::Int data_obj_len;

    ::FDS_ProtocolInterface::FDS_ObjectIdType data_obj_id_new;

    ::std::string data_obj;

protected:

    virtual ~FDSP_OffsetWriteObjType() {}
};

inline bool operator==(const FDSP_OffsetWriteObjType& l, const FDSP_OffsetWriteObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FDSP_OffsetWriteObjType& l, const FDSP_OffsetWriteObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FDSP_RedirReadObjType : virtual public ::Ice::Object
{
public:

    typedef FDSP_RedirReadObjTypePrx ProxyType;
    typedef FDSP_RedirReadObjTypePtr PointerType;

    FDSP_RedirReadObjType()
    {
    }

    FDSP_RedirReadObjType(const ::FDS_ProtocolInterface::FDS_ObjectIdType& __ice_data_obj_id_old, ::Ice::Int __ice_data_obj_len, ::Ice::Int __ice_data_obj_suboffset, ::Ice::Int __ice_data_obj_sublen, const ::FDS_ProtocolInterface::FDS_ObjectIdType& __ice_data_obj_id_new, const ::std::string& __ice_data_obj) :
        data_obj_id_old(__ice_data_obj_id_old),
        data_obj_len(__ice_data_obj_len),
        data_obj_suboffset(__ice_data_obj_suboffset),
        data_obj_sublen(__ice_data_obj_sublen),
        data_obj_id_new(__ice_data_obj_id_new),
        data_obj(__ice_data_obj)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::FDS_ProtocolInterface::FDS_ObjectIdType data_obj_id_old;

    ::Ice::Int data_obj_len;

    ::Ice::Int data_obj_suboffset;

    ::Ice::Int data_obj_sublen;

    ::FDS_ProtocolInterface::FDS_ObjectIdType data_obj_id_new;

    ::std::string data_obj;

protected:

    virtual ~FDSP_RedirReadObjType() {}
};

inline bool operator==(const FDSP_RedirReadObjType& l, const FDSP_RedirReadObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FDSP_RedirReadObjType& l, const FDSP_RedirReadObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FDSP_VerifyObjType : virtual public ::Ice::Object
{
public:

    typedef FDSP_VerifyObjTypePrx ProxyType;
    typedef FDSP_VerifyObjTypePtr PointerType;

    FDSP_VerifyObjType()
    {
    }

    FDSP_VerifyObjType(const ::FDS_ProtocolInterface::FDS_ObjectIdType& __ice_data_obj_id, ::Ice::Int __ice_data_obj_len, const ::std::string& __ice_data_obj) :
        data_obj_id(__ice_data_obj_id),
        data_obj_len(__ice_data_obj_len),
        data_obj(__ice_data_obj)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::FDS_ProtocolInterface::FDS_ObjectIdType data_obj_id;

    ::Ice::Int data_obj_len;

    ::std::string data_obj;

protected:

    virtual ~FDSP_VerifyObjType() {}
};

inline bool operator==(const FDSP_VerifyObjType& l, const FDSP_VerifyObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FDSP_VerifyObjType& l, const FDSP_VerifyObjType& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FDSP_UpdateCatalogType : virtual public ::Ice::Object
{
public:

    typedef FDSP_UpdateCatalogTypePrx ProxyType;
    typedef FDSP_UpdateCatalogTypePtr PointerType;

    FDSP_UpdateCatalogType()
    {
    }

    FDSP_UpdateCatalogType(::Ice::Int __ice_volume_offset, const ::FDS_ProtocolInterface::FDS_ObjectIdType& __ice_data_obj_id, ::Ice::Int __ice_dm_transaction_id, ::Ice::Int __ice_dm_operation) :
        volume_offset(__ice_volume_offset),
        data_obj_id(__ice_data_obj_id),
        dm_transaction_id(__ice_dm_transaction_id),
        dm_operation(__ice_dm_operation)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Int volume_offset;

    ::FDS_ProtocolInterface::FDS_ObjectIdType data_obj_id;

    ::Ice::Int dm_transaction_id;

    ::Ice::Int dm_operation;

protected:

    virtual ~FDSP_UpdateCatalogType() {}
};

inline bool operator==(const FDSP_UpdateCatalogType& l, const FDSP_UpdateCatalogType& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FDSP_UpdateCatalogType& l, const FDSP_UpdateCatalogType& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FDSP_MsgHdrType : virtual public ::Ice::Object
{
public:

    typedef FDSP_MsgHdrTypePrx ProxyType;
    typedef FDSP_MsgHdrTypePtr PointerType;

    FDSP_MsgHdrType()
    {
    }

    FDSP_MsgHdrType(::FDS_ProtocolInterface::FDSP_MsgCodeType __ice_msg_code, ::Ice::Int __ice_major_ver, ::Ice::Int __ice_minor_ver, ::Ice::Int __ice_msg_id, ::Ice::Int __ice_payload_len, ::Ice::Int __ice_num_objects, ::Ice::Int __ice_frag_len, ::Ice::Int __ice_frag_num, ::Ice::Int __ice_tennant_id, ::Ice::Int __ice_local_domain_id, ::Ice::Int __ice_glob_volume_id, ::FDS_ProtocolInterface::FDSP_MgrIdType __ice_src_id, ::FDS_ProtocolInterface::FDSP_MgrIdType __ice_dst_id, ::Ice::Long __ice_src_ip_hi_addr, ::Ice::Long __ice_src_ip_lo_addr, ::Ice::Long __ice_dst_ip_hi_addr, ::Ice::Long __ice_dst_ip_lo_addr, ::FDS_ProtocolInterface::FDSP_ResultType __ice_result, const ::std::string& __ice_err_msg, ::FDS_ProtocolInterface::FDSP_ErrType __ice_err_code, ::Ice::Int __ice_req_cookie, ::Ice::Int __ice_msg_chksum) :
        msg_code(__ice_msg_code),
        major_ver(__ice_major_ver),
        minor_ver(__ice_minor_ver),
        msg_id(__ice_msg_id),
        payload_len(__ice_payload_len),
        num_objects(__ice_num_objects),
        frag_len(__ice_frag_len),
        frag_num(__ice_frag_num),
        tennant_id(__ice_tennant_id),
        local_domain_id(__ice_local_domain_id),
        glob_volume_id(__ice_glob_volume_id),
        src_id(__ice_src_id),
        dst_id(__ice_dst_id),
        src_ip_hi_addr(__ice_src_ip_hi_addr),
        src_ip_lo_addr(__ice_src_ip_lo_addr),
        dst_ip_hi_addr(__ice_dst_ip_hi_addr),
        dst_ip_lo_addr(__ice_dst_ip_lo_addr),
        result(__ice_result),
        err_msg(__ice_err_msg),
        err_code(__ice_err_code),
        req_cookie(__ice_req_cookie),
        msg_chksum(__ice_msg_chksum)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::FDS_ProtocolInterface::FDSP_MsgCodeType msg_code;

    ::Ice::Int major_ver;

    ::Ice::Int minor_ver;

    ::Ice::Int msg_id;

    ::Ice::Int payload_len;

    ::Ice::Int num_objects;

    ::Ice::Int frag_len;

    ::Ice::Int frag_num;

    ::Ice::Int tennant_id;

    ::Ice::Int local_domain_id;

    ::Ice::Int glob_volume_id;

    ::FDS_ProtocolInterface::FDSP_MgrIdType src_id;

    ::FDS_ProtocolInterface::FDSP_MgrIdType dst_id;

    ::Ice::Long src_ip_hi_addr;

    ::Ice::Long src_ip_lo_addr;

    ::Ice::Long dst_ip_hi_addr;

    ::Ice::Long dst_ip_lo_addr;

    ::FDS_ProtocolInterface::FDSP_ResultType result;

    ::std::string err_msg;

    ::FDS_ProtocolInterface::FDSP_ErrType err_code;

    ::Ice::Int req_cookie;

    ::Ice::Int msg_chksum;

protected:

    virtual ~FDSP_MsgHdrType() {}
};

inline bool operator==(const FDSP_MsgHdrType& l, const FDSP_MsgHdrType& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FDSP_MsgHdrType& l, const FDSP_MsgHdrType& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FDSP_DataPathReq : virtual public ::Ice::Object
{
public:

    typedef FDSP_DataPathReqPrx ProxyType;
    typedef FDSP_DataPathReqPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PutObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UpdateCatalogObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___OffsetWriteObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RedirReadObject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FDSP_DataPathReq& l, const FDSP_DataPathReq& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FDSP_DataPathReq& l, const FDSP_DataPathReq& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FDSP_DataPathRespCback : virtual public ::Ice::Object
{
public:

    typedef FDSP_DataPathRespCbackPrx ProxyType;
    typedef FDSP_DataPathRespCbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void GetObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_GetObjTypePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetObjectResp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void PutObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_PutObjTypePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PutObjectResp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UpdateCatalogObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UpdateCatalogObjectResp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void OffsetWriteObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___OffsetWriteObjectResp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RedirReadObjectResp(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx&, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RedirReadObjectResp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FDSP_DataPathRespCback& l, const FDSP_DataPathRespCback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FDSP_DataPathRespCback& l, const FDSP_DataPathRespCback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace FDS_ProtocolInterface
{

template<class T>
class CallbackNC_FDSP_DataPathReq_GetObject : public Callback_FDSP_DataPathReq_GetObject_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathReq_GetObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathReq_GetObjectPtr
newCallback_FDSP_DataPathReq_GetObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_GetObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_GetObjectPtr
newCallback_FDSP_DataPathReq_GetObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_GetObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_GetObjectPtr
newCallback_FDSP_DataPathReq_GetObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_GetObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_GetObjectPtr
newCallback_FDSP_DataPathReq_GetObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_GetObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathReq_GetObject : public Callback_FDSP_DataPathReq_GetObject_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathReq_GetObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathReq_GetObjectPtr
newCallback_FDSP_DataPathReq_GetObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_GetObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_GetObjectPtr
newCallback_FDSP_DataPathReq_GetObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_GetObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_GetObjectPtr
newCallback_FDSP_DataPathReq_GetObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_GetObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_GetObjectPtr
newCallback_FDSP_DataPathReq_GetObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_GetObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FDSP_DataPathReq_PutObject : public Callback_FDSP_DataPathReq_PutObject_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathReq_PutObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathReq_PutObjectPtr
newCallback_FDSP_DataPathReq_PutObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_PutObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_PutObjectPtr
newCallback_FDSP_DataPathReq_PutObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_PutObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_PutObjectPtr
newCallback_FDSP_DataPathReq_PutObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_PutObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_PutObjectPtr
newCallback_FDSP_DataPathReq_PutObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_PutObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathReq_PutObject : public Callback_FDSP_DataPathReq_PutObject_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathReq_PutObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathReq_PutObjectPtr
newCallback_FDSP_DataPathReq_PutObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_PutObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_PutObjectPtr
newCallback_FDSP_DataPathReq_PutObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_PutObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_PutObjectPtr
newCallback_FDSP_DataPathReq_PutObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_PutObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_PutObjectPtr
newCallback_FDSP_DataPathReq_PutObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_PutObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FDSP_DataPathReq_UpdateCatalogObject : public Callback_FDSP_DataPathReq_UpdateCatalogObject_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathReq_UpdateCatalogObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr
newCallback_FDSP_DataPathReq_UpdateCatalogObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_UpdateCatalogObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr
newCallback_FDSP_DataPathReq_UpdateCatalogObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_UpdateCatalogObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr
newCallback_FDSP_DataPathReq_UpdateCatalogObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_UpdateCatalogObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr
newCallback_FDSP_DataPathReq_UpdateCatalogObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_UpdateCatalogObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathReq_UpdateCatalogObject : public Callback_FDSP_DataPathReq_UpdateCatalogObject_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathReq_UpdateCatalogObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr
newCallback_FDSP_DataPathReq_UpdateCatalogObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_UpdateCatalogObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr
newCallback_FDSP_DataPathReq_UpdateCatalogObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_UpdateCatalogObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr
newCallback_FDSP_DataPathReq_UpdateCatalogObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_UpdateCatalogObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_UpdateCatalogObjectPtr
newCallback_FDSP_DataPathReq_UpdateCatalogObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_UpdateCatalogObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FDSP_DataPathReq_OffsetWriteObject : public Callback_FDSP_DataPathReq_OffsetWriteObject_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathReq_OffsetWriteObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathReq_OffsetWriteObjectPtr
newCallback_FDSP_DataPathReq_OffsetWriteObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_OffsetWriteObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_OffsetWriteObjectPtr
newCallback_FDSP_DataPathReq_OffsetWriteObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_OffsetWriteObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_OffsetWriteObjectPtr
newCallback_FDSP_DataPathReq_OffsetWriteObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_OffsetWriteObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_OffsetWriteObjectPtr
newCallback_FDSP_DataPathReq_OffsetWriteObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_OffsetWriteObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathReq_OffsetWriteObject : public Callback_FDSP_DataPathReq_OffsetWriteObject_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathReq_OffsetWriteObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathReq_OffsetWriteObjectPtr
newCallback_FDSP_DataPathReq_OffsetWriteObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_OffsetWriteObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_OffsetWriteObjectPtr
newCallback_FDSP_DataPathReq_OffsetWriteObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_OffsetWriteObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_OffsetWriteObjectPtr
newCallback_FDSP_DataPathReq_OffsetWriteObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_OffsetWriteObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_OffsetWriteObjectPtr
newCallback_FDSP_DataPathReq_OffsetWriteObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_OffsetWriteObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FDSP_DataPathReq_RedirReadObject : public Callback_FDSP_DataPathReq_RedirReadObject_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathReq_RedirReadObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathReq_RedirReadObjectPtr
newCallback_FDSP_DataPathReq_RedirReadObject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_RedirReadObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_RedirReadObjectPtr
newCallback_FDSP_DataPathReq_RedirReadObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_RedirReadObject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_RedirReadObjectPtr
newCallback_FDSP_DataPathReq_RedirReadObject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_RedirReadObject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathReq_RedirReadObjectPtr
newCallback_FDSP_DataPathReq_RedirReadObject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathReq_RedirReadObject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathReq_RedirReadObject : public Callback_FDSP_DataPathReq_RedirReadObject_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathReq_RedirReadObject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathReq_RedirReadObjectPtr
newCallback_FDSP_DataPathReq_RedirReadObject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_RedirReadObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_RedirReadObjectPtr
newCallback_FDSP_DataPathReq_RedirReadObject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_RedirReadObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_RedirReadObjectPtr
newCallback_FDSP_DataPathReq_RedirReadObject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_RedirReadObject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathReq_RedirReadObjectPtr
newCallback_FDSP_DataPathReq_RedirReadObject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathReq_RedirReadObject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FDSP_DataPathRespCback_GetObjectResp : public Callback_FDSP_DataPathRespCback_GetObjectResp_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathRespCback_GetObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathRespCback_GetObjectRespPtr
newCallback_FDSP_DataPathRespCback_GetObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_GetObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_GetObjectRespPtr
newCallback_FDSP_DataPathRespCback_GetObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_GetObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_GetObjectRespPtr
newCallback_FDSP_DataPathRespCback_GetObjectResp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_GetObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_GetObjectRespPtr
newCallback_FDSP_DataPathRespCback_GetObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_GetObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathRespCback_GetObjectResp : public Callback_FDSP_DataPathRespCback_GetObjectResp_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathRespCback_GetObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathRespCback_GetObjectRespPtr
newCallback_FDSP_DataPathRespCback_GetObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_GetObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_GetObjectRespPtr
newCallback_FDSP_DataPathRespCback_GetObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_GetObjectResp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_GetObjectRespPtr
newCallback_FDSP_DataPathRespCback_GetObjectResp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_GetObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_GetObjectRespPtr
newCallback_FDSP_DataPathRespCback_GetObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_GetObjectResp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FDSP_DataPathRespCback_PutObjectResp : public Callback_FDSP_DataPathRespCback_PutObjectResp_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathRespCback_PutObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathRespCback_PutObjectRespPtr
newCallback_FDSP_DataPathRespCback_PutObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_PutObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_PutObjectRespPtr
newCallback_FDSP_DataPathRespCback_PutObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_PutObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_PutObjectRespPtr
newCallback_FDSP_DataPathRespCback_PutObjectResp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_PutObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_PutObjectRespPtr
newCallback_FDSP_DataPathRespCback_PutObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_PutObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathRespCback_PutObjectResp : public Callback_FDSP_DataPathRespCback_PutObjectResp_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathRespCback_PutObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathRespCback_PutObjectRespPtr
newCallback_FDSP_DataPathRespCback_PutObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_PutObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_PutObjectRespPtr
newCallback_FDSP_DataPathRespCback_PutObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_PutObjectResp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_PutObjectRespPtr
newCallback_FDSP_DataPathRespCback_PutObjectResp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_PutObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_PutObjectRespPtr
newCallback_FDSP_DataPathRespCback_PutObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_PutObjectResp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FDSP_DataPathRespCback_UpdateCatalogObjectResp : public Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathRespCback_UpdateCatalogObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr
newCallback_FDSP_DataPathRespCback_UpdateCatalogObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_UpdateCatalogObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr
newCallback_FDSP_DataPathRespCback_UpdateCatalogObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_UpdateCatalogObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr
newCallback_FDSP_DataPathRespCback_UpdateCatalogObjectResp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_UpdateCatalogObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr
newCallback_FDSP_DataPathRespCback_UpdateCatalogObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_UpdateCatalogObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp : public Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr
newCallback_FDSP_DataPathRespCback_UpdateCatalogObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr
newCallback_FDSP_DataPathRespCback_UpdateCatalogObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr
newCallback_FDSP_DataPathRespCback_UpdateCatalogObjectResp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_UpdateCatalogObjectRespPtr
newCallback_FDSP_DataPathRespCback_UpdateCatalogObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_UpdateCatalogObjectResp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FDSP_DataPathRespCback_OffsetWriteObjectResp : public Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathRespCback_OffsetWriteObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr
newCallback_FDSP_DataPathRespCback_OffsetWriteObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_OffsetWriteObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr
newCallback_FDSP_DataPathRespCback_OffsetWriteObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_OffsetWriteObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr
newCallback_FDSP_DataPathRespCback_OffsetWriteObjectResp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_OffsetWriteObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr
newCallback_FDSP_DataPathRespCback_OffsetWriteObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_OffsetWriteObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp : public Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr
newCallback_FDSP_DataPathRespCback_OffsetWriteObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr
newCallback_FDSP_DataPathRespCback_OffsetWriteObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr
newCallback_FDSP_DataPathRespCback_OffsetWriteObjectResp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_OffsetWriteObjectRespPtr
newCallback_FDSP_DataPathRespCback_OffsetWriteObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_OffsetWriteObjectResp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FDSP_DataPathRespCback_RedirReadObjectResp : public Callback_FDSP_DataPathRespCback_RedirReadObjectResp_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FDSP_DataPathRespCback_RedirReadObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr
newCallback_FDSP_DataPathRespCback_RedirReadObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_RedirReadObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr
newCallback_FDSP_DataPathRespCback_RedirReadObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_RedirReadObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr
newCallback_FDSP_DataPathRespCback_RedirReadObjectResp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_RedirReadObjectResp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr
newCallback_FDSP_DataPathRespCback_RedirReadObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FDSP_DataPathRespCback_RedirReadObjectResp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FDSP_DataPathRespCback_RedirReadObjectResp : public Callback_FDSP_DataPathRespCback_RedirReadObjectResp_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FDSP_DataPathRespCback_RedirReadObjectResp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr
newCallback_FDSP_DataPathRespCback_RedirReadObjectResp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_RedirReadObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr
newCallback_FDSP_DataPathRespCback_RedirReadObjectResp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_RedirReadObjectResp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr
newCallback_FDSP_DataPathRespCback_RedirReadObjectResp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_RedirReadObjectResp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FDSP_DataPathRespCback_RedirReadObjectRespPtr
newCallback_FDSP_DataPathRespCback_RedirReadObjectResp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FDSP_DataPathRespCback_RedirReadObjectResp<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
