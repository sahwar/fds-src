{% extends 'fds_config_defaults.j2' %}
{% block content %}
fds: {
    /* Network interface that all fds nodes should have */
    nic_if="{{ default_nic }}"

    /* Use genkey to generate a new one */
    aes_key="005ecbcf2a3ddf8fc634a43b8adb44cc"

    authentication={{ authentication }}

    ssl: {
        /* path relative to fds_root */
        keystore_path="etc/ssl/dev/keystore"
        keystore_password="exotic sparrow"
        keymanager_password="exotic sparrow"
    }

    disable_qos = false

    /* Feature toggles, use "common:" for features that propogate across components */
    feature_toggle: {
        common: {

            enable_multi_om_support = {{ ft_common_enable_multi_om_support }}
        }
        plat: {

            use_disk_hints = {{ ft_platform_use_disk_hints }}
            control_disk_simulation_mode = {{ ft_platform_control_disk_simulation_mode }}
        }
        dm: {

        }
        sm: {

        }
        am: {

        }
        om: {

        }
    }

    /* Use this section for settings that are shared (or needed) by most or all processes */
    common: {

{% if om_ip_count != empty_om_list %}
{% set hosts = groups[group_names[0]] %}
{% for i in range(om_ip_count|int) %}
{% if loop.first %}        om_ip_list = "{% endif %}{{ hosts[i] }}{% if not loop.last %}:{% endif %}
{% endfor %}"
{% else %}
         om_ip_list = "{{ empty_om_list }}"
{% endif %}
	om_port = 7004
	om_uuid = 1028
    }

    pm: {
        /* process id */
        id = "pm"

        /* Log file */
        logfile = "pm"

        /* Log severity */
        log_severity = "{{ pm_log_severity }}"

        /* Platform uuid.  From this base uuid other service runnig on this node detrive their uuids */
	platform_uuid = 1024
        /* Platform port.  This is the node base port.  All services running on this node derive */
	/* their port based on this port */
        platform_port = 7000

        /* Orchestration manager info */
	/* TODO(Rao): Deprecate om_ip, om_port, om_platform_port.  We don't need them anymore */
        om_ip            = "{{ om_ip }}"
        om_port          = 8904
        om_platform_port = 7000

        /* Don't spawn any service daemon */
        auto_start_services = true

        /* Disk types, hints file.  Relative to fds-root */
        disk_hints_path_file = "dev/disk-hints.conf"

        /* Force disk simulation_mode (enable Feature Toggle first) */
        /* true=simuation mode, false=auto detection */
        force_disk_simulation = {{ force_disk_simulation }}

        /* Graphite is enabled or not */
        enable_graphite = {{ metrics_enabled }}
        graphite: {
            /* Graphite server ip */
            ip = "{{ metricsdb_ip }}"
            /* Graphite server port */
            port = 2003
            period = 5
        }
        threadpool: {
            num_threads = 10

            /* Use lock free threadpool  */
            use_lftp = true
        }
        /* Internal testing related info */
        testing: {
	    standalone = false
            /* overwrite node capabilities from this config */
            manual_nodecap = true
            disk_iops_max  = 100000
            disk_iops_min  = 60000
        }
        /* Service layer stanza */
        svc: {
            lftp: {
                /* Enable lockfree threadpool optimizations or not */
                enable = {{ svc_plat_lftp_enable }}
                io_thread_cnt = 2
                worker_thread_cnt = 2
            }

            timeout: {
                thrift_message = {{ svc_plat_thrift_message_timeout }}
            }
        }
    }

    dm: {
        svc: {
            lftp: {
                /* Enable lockfree threadpool optimizations or not */
                enable = {{ svc_plat_lftp_enable }}
                io_thread_cnt = 2
                worker_thread_cnt = 2
            }
            timeout: {
                thrift_message = {{ svc_plat_thrift_message_timeout }}
            }
        }
        perf: { enable = {{ perf_tracing }} }

        qos: {
            /* Default qos threads */
            default_qos_threads = 10
            /* default max number of outstanding IO below qos control */
            default_outstanding_io = 20
        }

        catalog_write_buffer_size = {{ dm_catalog_write_buffer_size }}
        catalog_cache_size =  {{ dm_catalog_cache_size  }}
        catalog_log_max_files = 5

        /* process id */
        id      = "dm"
        no_om   = false;
	/* TODO(Rao): Deprecate om_ip, om_port here.  Not needed anymore */
        om_ip   = "{{ om_ip }}"
        om_port = 8904

        /* Log file */
        logfile = "dm"

        /* Log severity */
        log_severity = "{{ dm_log_severity }}"

        cache: {
           /* Default max entries in a volume's DM catalog cache */
           default_max_entries = 200
        }

        migration: {
            /* Rsync username to use during migration */
            rsync_username = "root"
            /* Rsync password to use during migration */
	    rsync_password = "passwd"
        }

        /* Graphite is enabled or not */
        enable_graphite = {{ metrics_enabled }}
        graphite: {
            /* Graphite server ip */
            ip = "{{ metricsdb_ip }}"

            /* Graphite server port */
            port = 2003
            period = 5
        }

        threadpool: {
            num_threads = 10

            /* Use lock free threadpool  */
            use_lftp = true
        }

        /* Timeline feature toggle */
        enable_timeline = true

        /* Internal testing related info */
        testing: {
            standalone = false

            /* Forces all DM APIs to immediately return success */
            uturn_all = false

            /* Forces catalog update calls to immediately return success */
            uturn_updatecat = false

            /* Forces start tx calls to immediately return success */
            uturn_starttx = false

            /* Forces set metadata calls to immediately return success */
            uturn_setmeta = false

            /* For testing firebreak on shorter timescale */
            test_firebreak = false
            coarseslot_sec = 300
            coarse_slots = 6
            longslot_sec = 900
            long_slots = 6
        }
    }

    sm: {
        svc: {
            lftp: {
                /* Enable lockfree threadpool optimizations or not */
                enable = {{ svc_plat_lftp_enable }}
                io_thread_cnt = 2
                worker_thread_cnt = 2
            }
            timeout: {
                thrift_message = {{ svc_plat_thrift_message_timeout }}
            }
        }
        perf: { enable = {{ perf_tracing }} }

        /* process id */
        id      = "sm"
        prefix  = ""
	/* TODO(Rao): Deprecate om_ip, om_port here.  Not needed anymore */
        om_ip   = "{{ om_ip }}"
        om_port = 8904

        /* Log file */
        logfile="sm"

        /* Log severity */
        log_severity = "{{ sm_log_severity }}"

        /* verify data on datapath */
        data_verify = {{ sm_data_verify }}
        /* verify data in background */
        data_verify_background = {{ sm_data_verify_background }}

        /* daemonize or not */
        daemonize=true

        objectstore: {
            /* Size of the hashed task synchronizer */
            synchronizer_size = 100
            faults: {
                fail_writes = 0.0
            }
        }
        cache: {
            /* Default max number of data cache entries */
            default_data_entries = {{ sm_cache_default_data_entries }}
            /* Default max number of metadata entries */
            default_meta_entries = 0;
        }

        qos: {
            /* Default qos threads */
            default_qos_threads = 10
            /* default max number of outstanding IO below qos control */
            default_outstanding_io = 20
        }

        /* Running in test mode */
        test_mode=false
        /* Internal testing related info */
        testing: {

            /* enable simulated latency with its timueout value */
            enable_mocking = false
            mocktimeout = 500
            /* enable if testing SM standalone, no dependency on platform and OM */
            standalone = false

            /* this is temporary until we fix platform, we don't want simulated SSDs */
            useSsdForMeta = false

           /* Use sync metadata write if true */
            syncMetaWrite = {{ sm_sync_meta_write }}

            /* General testing mode...should depricate */
            test_mode = false

            /* Number of volumes to create in test mode.  Valid when test_mode is true */
            test_volume_cnt=10

            /* Forces all SM APIs to immediately return success */
            uturn_all = false

            /* Forces put object calls to immediately return success */
            uturn_putobj = false

            /* if test_tier is enable, rank engine will be configured from the config below */
            test_tier = false
            /* number of objects in rank table (~ssd size) */
            rank_tbl_size = 1000
            /* how often re-ranking is done */
            rank_freq_sec = 300
            /* approx number of times an obj has to be accessed to become hot */
            hot_threshold = 3
            /* approx number of times an obj has to be accessed to become cold */
            cold_threshold = 0
        }
        threadpool: {
            num_threads = 10

            /* Use lock free threadpool  */
            use_lftp = true
        }
        /* Migration related info */
        migration: {
            /* IP of the migration server */
	    /* TODO(Rao): Deprecate om_ip, om_port here.  Not needed anymore */
            ip = "{{ om_ip }}"

            /* Number of threads for doing migration work */
            /* DEPRECATED */
            thread_cnt=5

            /* size of the delta set from source SM to destination SM */
            max_delta_set_size=16

            /* verify the integrity of the metadata and data  on destination SM */
            verify_migration_data=false

            /* boolean to enable/disable SM token migration feature */
            enable_feature = true
        }
	tiering: {
	    hybrid: {
	        enable 		= false
		/* Number of objects to move at a time */
		batchSz 	= 1024
		/* In seconds to make testing easier (default 172800s = 2days) */
		frequency 	= 172800
	    }
	}
        /* Graphite is enabled or not */
        enable_graphite = {{ metrics_enabled }}
        graphite: {
            /* Graphite server ip */
            ip = "{{ metricsdb_ip }}"

            /* Graphite server port */
            port=2003
            period = 5
        }
    }

    am: {
        svc: {
            lftp: {
                /* Enable lockfree threadpool optimizations or not */
                enable = {{ svc_plat_lftp_enable }}
                io_thread_cnt = 2
                worker_thread_cnt = 2
            }
            timeout: {
                thrift_message = {{ svc_plat_thrift_message_timeout }}
            }
        }
        perf: { enable = {{ perf_tracing }} }

        /* process id */
	id = "am"

        log_severity = "{{ am_log_severity }}"
        logfile      = "am"
	/* TODO(Rao): Deprecate om_ip, om_port.  Not needed any more */
        om_ip        = "{{ om_ip }}"
        om_port      = 8904

        /* TODO(Rao): Get this from platform */
        om_config_port = 8903
        enable_graphite = {{ metrics_enabled }}

        s3_http_port_offset=1000
        s3_https_port_offset=1443
        swift_port_offset=2999
        am_base_response_port_offset=53
        am_service_port_offset=24
        xdi_service_port_offset=25
        streaming_port_offset=28
        memory_backend=false
        fdsn_server_threads=30
        qos_threads=4

        connector: {
            nbd: {
                server_port_offset=3809
                non_block_io=true
            }
        }

        threadpool: {
            num_threads = 10

            /* Use lock free threadpool  */
            use_lftp = true
        }
        cache: {
            /* Default max data entries in a volume's AM cache */
            max_data_entries =  {{ am_cache_max_data_entries }}
            /* Default max entries in a volume's AM cache */
            max_metadata_entries =  {{ am_cache_max_metadata_entries }}
            /* Default max staged entries in a volume's tx descriptor */
            tx_max_staged_entries = 10
        }

        /* Internal testing related info */
        testing: {
            /* Toggle stand alone mode */
            standalone = false

            /* Toggle to disable stats collection for metadata streaming */
            toggleDisableStreamingStats = {{ am_testing_toggleDisableStreamingStats }}

            /* NBD module driver */
            nbd_vol_module = "sm"

            /* Forces all AM processor APIs to immediately return success */
            uturn_processor_all = false
            /* Forces all AM dispatcher APIs to immediately return success */
            uturn_dispatcher_all = false
            /* dipatchers timeout in us */
            uturn_dispatcher_timeout = 200
            /* Test mode to bypass local catalog cache */
            disable_vcc = true
            /* Forces all AM service APIs to immediately return success */
            uturn_amserv_all = false
            /* Forces AM service start transaction to immediately return success */
            uturn_amserv_starttx = false
            /* Forces AM service update blob to immediately return success */
            uturn_amserv_updateblob = false
            /* Forces AM service update metadata to immediately return success */
            uturn_amserv_updatemeta = false
            /* Forces AM service commit transaction to immediately return success */
            uturn_amserv_committx = false
            /* Forces AM service abort transaction to immediately return success */
            uturn_amserv_aborttx = false
            /* Forces AM service stat blob to immediately return success */
            uturn_amserv_statblob = false
            /* Forces AM service get blob to immediately return success */
            uturn_amserv_getblob = false
            /* Enables probe testing server */
            enable_probe = false
            /* Enable qos testing with probe, will use probe_outstanding_reqs per volume */
            probe_test_qos = false
            /* Number of threads for probe test */
            probe_num_threads = 10
            /* Number of max outanding requests */
            probe_outstanding_reqs = 500
            /* How long to sleep before checking the outstanding requests (periodically)*/
            probe_sleep_period = 500
            /* Enable printing of fine-grained QoS stats to var/stats/stats-data dir */
            print_qos_stats = false
        }
    }

    om:
    {
        /* Service layer stanza */
        svc: {
            lftp: {
                /* Enable lockfree threadpool optimizations or not */
                enable = {{ svc_plat_lftp_enable }}
                io_thread_cnt = 2
                worker_thread_cnt = 2
            }
            timeout: {
                thrift_message = {{ svc_plat_thrift_message_timeout }}
            }
        }
	/* Testing stanza */
	testing: {
            /* Toggle stand alone mode */
            standalone = false
	}
        id="om"
        prefix=""
        log_severity = "{{ om_log_severity }}"
        logfile="om"
        config_port=8903
	/* TODO(Rao): Deprecate control_port and ip_address.  Not needed */
        control_port=8904
        ip_address = "{{ om_ip }}"
        enable_graphite = {{ metrics_enabled }}
        token_factor=8
        replica_factor=4
        placement_algo="ConsistHash"
        default_iops_min=0
        default_iops_max=0

        web_dir="../lib/admin-webapp/"
        http_port=7777
        https_port=7443
        configdb : {
            port=6379
        }
        test_mode=false
        threadpool: {
            num_threads = 10

            /* Use lock free threadpool  */
            use_lftp = true
        }

        enable_snapshot_schedule = true

        snmp: {
            targetip = "{{ snmp_targetip }}"
            community = "{{ snmp_community }}"
        }
    }

    checker: {
        id = "checker"
        path = "/home/bao_pham/temp/skinet2"
        logfile = "checker"
        log_severity = "{{ checker_log_severity }}"

        /* Control path port */
        control_port = 6991

        /* Orchestration manager ip */
	/* TODO(Rao): Deprecate om_ip, om_port.  Not needed any more */
        om_ip = "{{ om_ip }}"

        /* Orchestration manager port */
        om_port = 8904

        enable_graphite = {{ metrics_enabled }}

        threadpool: {
            num_threads = 10
        }
    }

    xdi: {
        am_host = "{{ am_host }}"
    }
}
{% endblock %}
