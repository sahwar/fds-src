app=angular.module("formation",["ui.router","main","volumes","system","inbox","status","activity-management","user-page","admin-settings","tenant"]),app.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/home"),$stateProvider.state("homepage",{url:"/home",templateUrl:"scripts/main/main.html"}).state("homepage.volumes",{url:"/volumes",templateUrl:"scripts/volumes/volumes.html"}).state("homepage.system",{url:"/system",templateUrl:"scripts/system/system.html"}).state("homepage.status",{url:"/status",templateUrl:"scripts/status/status.html"}).state("homepage.users",{url:"/users",templateUrl:"scripts/users/users.html"}).state("homepage.tenants",{url:"/tenants",templateUrl:"scripts/tenants/tenants.html"}).state("homepage.inbox",{url:"/inbox",templateUrl:"scripts/inbox/inbox.html"}).state("homepage.activity",{url:"/activity",templateUrl:"scripts/activity/activity.html"}).state("homepage.admin",{url:"/admin",templateUrl:"scripts/admin/admin.html"}).state("homepage.account",{url:"/accountdetails",templateUrl:"scripts/account/account.html"})}),app.config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(function(){return{request:function(config){return config},response:function(config){return config},responseError:function(config){return console.log("response error happened!"),config}}})}]),angular.module("base",[]),angular.module("user-management",["base"]),angular.module("tenant-management",["base"]),angular.module("volume-management",["base"]),angular.module("node-management",["base"]),angular.module("activity-management",["base"]),angular.module("qos",["base"]),angular.module("statistics",["base"]),angular.module("modal-utils",[]),angular.module("utility-directives",[]),angular.module("display-widgets",[]),angular.module("angular-fui",[]),angular.module("form-directives",["utility-directives","angular-fui"]),angular.module("charts",["utility-directives"]),angular.module("main",["user-management","templates-main"]),angular.module("volumes",["volume-management","form-directives","modal-utils","qos"]),angular.module("system",["node-management","user-management"]),angular.module("tenant",["tenant-management","user-management","utility-directives","form-directives"]),angular.module("admin-settings",["user-management"]),angular.module("status",["activity-management","statistics","display-widgets","charts"]),angular.module("inbox",[]),angular.module("user-page",[]),angular.module("main").controller("accountController",["$scope","$authentication","$authorization","$user_service",function($scope,$authentication,$authorization,$user_service){$scope.emailAddress="admin@example.com",$scope.tempEmailAddress=$scope.emailAddress,$scope.changePasswordError=!1,$scope.changePassword=function(){return $scope.changePasswordError=!1,$scope.newPassword!==$scope.confirmPassword?void($scope.changePasswordError="Passwords do not match."):void $user_service.changePassword($authorization.user.userId,$scope.newPassword,function(){$scope.newPassword="",$scope.confirmPassword="",$scope.password_changing=!1},function(error,code){$scope.changePasswordError=code+" - "+error.message})}}]),angular.module("activity-management").controller("activityController",["$scope","$activity_service","$authorization",function($scope,$activity_service,$authorization){$scope.activities=[],$scope.activityCallback=function(response){$scope.activities=eval(response)},$scope.isAllowed=function(permission){return $authorization.isAllowed(permission)},$activity_service.getActivities("","",1e3,$scope.activityCallback)}]),angular.module("admin-settings").controller("adminController",["$scope","$authentication","$authorization","$data_connector_api",function($scope,$authentication,$authorization,$data_connector_api){$scope.sizes=[{name:"GB"},{name:"TB"},{name:"PB"}],$scope.levels=[{name:"Debug"},{name:"Info"},{name:"Warning"},{name:"Error"},{name:"Critical"}],$scope.connectors=$data_connector_api.connectors,$scope.alertLevel=$scope.levels[3],$scope._selectedSize=10,$scope._selectedUnit=$scope.sizes[0].name;var findUnit=function(str){for(var i=0;i<$scope.sizes.length;i++)if($scope.sizes[i].name==str)return $scope.sizes[i]};$scope.editConnector=function(connector){$scope._selectedUnit=findUnit(connector.attributes.unit),$scope._selectedSize=parseInt(connector.attributes.size),$scope.editingConnector=connector},$scope.stopEditing=function(){$scope.editingConnector={}},$scope.saveConnectorChanges=function(connector){connector.attributes.size=$scope._selectedSize,connector.attributes.unit=$scope._selectedUnit.name,$data_connector_api.editConnector(connector),$scope.stopEditing(),$scope.connectors=$data_connector_api.connectors},$scope.isAllowed=$authorization.isAllowed}]),angular.module("admin-settings").controller("firebreakController",["$scope",function($scope){$scope.policies=[]}]),angular.module("admin-settings").controller("profileController",["$scope","$authentication",function($scope,$authentication){$scope.editing=!1,$scope.user=$authentication.getUserInfo(),$scope.changePassword=function(){$scope.changepassword=!1},$scope.edit=function(){$scope.editing=!0,$scope._username=$scope.user.name,$scope._email=$scope.user.email},$scope.cancel=function(){$scope.editing=!1},$scope.save=function(){$scope.user.name=$scope._username,$scope.user.email=$scope._email,$scope.cancel()}}]),angular.module("inbox").controller("inboxController",["$scope","$inbox_service","$authorization",function($scope,$inbox_service,$authorization){$scope.items=[{label:"All",notifications:0,selected:!0},{label:"Warnings",notifications:0},{label:"Alerts",notifications:1},{label:"Actions",notifications:1},{label:"FYI",notifications:0},{label:"Recommendations",notifications:3}],$scope.messages=[],$scope.messagesReceived=function(response){$scope.messages=eval(response)},$scope.isAllowed=function(permission){return $authorization.isAllowed(permission)},$inbox_service.getMessages($scope.messagesReceived)}]),angular.module("main").controller("mainController",["$scope","$authentication","$authorization","$state","$domain_service",function($scope,$authentication,$authorization,$state,$domain_service){$scope.priority=10,$scope.rememberChecked=!1,$scope.selected={},$scope.domains=$domain_service.getDomains(),$scope.menuItems=[{name:"Account Details"},{name:"Change Password"},{name:"-"},{name:"Logout"}],$scope.views=[{id:"status",link:"homepage.status",text:"Status",iconClass:"icon-system",selected:!1},{id:"inbox",link:"homepage.inbox",text:"Inbox",iconClass:"icon-inbox",selected:!1},{id:"activity",link:"homepage.activity",text:"Activity",iconClass:"icon-activity_pulse",selected:!1},{id:"system",link:"homepage.system",text:"System",iconClass:"icon-nodes",selected:!1,permission:"System Management"},{id:"volumes",link:"homepage.volumes",text:"Volumes",iconClass:"icon-volumes",selected:!1},{id:"users",link:"homepage.users",text:"Users",iconClass:"icon-users",selected:!1},{id:"tenants",link:"homepage.tenants",text:"Tenants",iconClass:"icon-tenants",selected:!1,permission:"System Management"},{id:"admin",link:"homepage.admin",text:"Admin",iconClass:"icon-admin",selected:!1}],$scope.navigate=function(item){$scope.views.forEach(function(view){view.selected=!1}),item.selected=!0,$state.transitionTo(item.link)},$scope.login=function(){$authentication.login($scope.username,$scope.password)},$scope.logout=$authentication.logout,$scope.isAllowed=function(permission){return angular.isDefined(permission)?$authorization.isAllowed(permission):!0},$scope.keyEntered=function($event){13==$event.keyCode&&$scope.login()},$scope.itemSelected=function(item){if(item===$scope.menuItems[3])$scope.logout();else if(item===$scope.menuItems[0]||item===$scope.menuItems[1]){var o={link:"homepage.account"};$scope.navigate(o)}},$scope.$watch("loggedInUser",function(newValue){$scope.itemSelected(newValue)}),$scope.$on("fds::authentication_logout",function(){$state.transitionTo("homepage")}),$scope.$on("fds::authentication_success",function(){$scope.navigate($scope.views[0])}),$scope.$watch(function(){return $authentication.isAuthenticated},function(val){$scope.loggedInUser=$authorization.getUsername(),$scope.validAuth=val,$scope.username="",$scope.password=""}),$scope.$watch(function(){return $authentication.error},function(val){$scope.error=val});var noState=!0;$scope.views.forEach(function(view){$state.current.name===view.link&&(view.selected=!0,noState=!1)}),noState&&$scope.navigate($scope.views[0])}]),angular.module("user-management").factory("$authentication",["$http","$document","$rootScope","$authorization",function($http,$document,$rootScope,$authorization){var service={};service.isAuthenticated=""!==$document[0].cookie,service.error=void 0;var clearCookie=function(){$document[0].cookie="token=; expires=Thu, 01-Jan-70 00:00:01 GMT;",$document[0].cookie="user=; expires=Thu, 01-Jan-70 00:00:01 GMT;"};return service.login=function(username,password){$http.post("/api/auth/token?login="+username+"&password="+password,{}).success(function(response){service.error="",$document[0].cookie="token="+response.token,$document[0].cookie="user="+JSON.stringify(response),service.isAuthenticated=!0,$rootScope.$broadcast("fds::authentication_success"),$authorization.setUser(response)}).error(function(response,code){service.error=code+":"+response.message+" - Please try again",clearCookie(),$rootScope.$broadcast("fds::authentication_failure")})},service.logout=function(){clearCookie(),service.error=void 0,service.isAuthenticated=!1,$rootScope.$broadcast("fds::authentication_logout")},service.hasError=function(){return angular.isDefined(service.error)&&""!==service.error?!0:!1},service}]),angular.module("user-management").factory("$authorization",["$rootScope","$document",function($rootScope,$document){var service={};service.user={};var resetUserFromCookie=function(){for(var cookies=$document[0].cookie.split(";"),i=0;i<cookies.length;i++){var key=cookies[i].slice(0,cookies[i].indexOf("=")).trim(),value=cookies[i].slice(cookies[i].indexOf("=")+1).trim();if(key&&"user"===key)return void(service.user=JSON.parse(value))}};return service.setUser=function(user){service.user=user},service.getUsername=function(){return angular.isDefined(service.user)||resetUserFromCookie(),angular.isDefined(service.user)?service.user.username:void 0},service.isAllowed=function(feature){if(angular.isDefined(service.user)||resetUserFromCookie(),!angular.isDefined(service.user)||!angular.isDefined(service.user.features))return!1;for(var i=0;i<service.user.features.length;i++)if(service.user.features[i]===feature)return!0;return!1},$rootScope.$on("fds::authentication_logout",function(){service.user={}}),service}]),angular.module("activity-management").factory("$activity_service",["$http",function($http){var service={};return service.getActivities=function(start,end,max,callback){return $http.get("/scripts/services/data/fakelogs.js").success(function(response){callback(response)})},service}]),angular.module("activity-management").factory("$inbox_service",["$http",function($http){var service={};return service.getMessages=function(callback){return $http.get("/scripts/services/data/fakemessages.js").success(function(response){callback(response)})},service}]),angular.module("tenant-management").factory("$tenant_api",["$http",function($http){var service={};return service.getTenants=function(callback,failure){return $http.get("/api/system/tenants").success(callback).error(failure)},service.createTenant=function(tenant,callback,failure){return $http.post("/api/system/tenants/"+tenant.name).success(callback).error(failure)},service}]),angular.module("user-management").factory("$user_service",["$http",function($http){var service={};return service.getUsers=function(callback){return $http.get("/scripts/services/data/fakeusers.js").success(function(response){callback(response)})},service.changePassword=function(userId,newPassword,success,failure){return $http.put("/api/system/users/"+userId+"/"+newPassword).success(success).error(failure)},service}]),angular.module("volume-management").factory("$data_connector_api",["$http",function(){var api={};api.connectors=[];!function(){api.connectors=[{type:"Block",api:"Basic, Cinder",options:{max_size:"100",unit:["GB","TB","PB"]},attributes:{size:"10",unit:"GB"}},{type:"Object",api:"S3, Swift"}]}();return api.editConnector=function(connector){api.connectors.forEach(function(realConnector){connector.type===realConnector.type&&(realConnector=connector)})},api}]),angular.module("user-management").factory("$domain_service",["$http",function(){var service={};return service.getDomains=function(){return angular.isDefined(service.domains)||(service.domains=[{fqdn:"com.goldman",name:"FDS Global"}]),service.domains},service}]),angular.module("modal-utils").factory("$modal_data_service",function(){var service={},data={};return service.start=function(){data={}},service.update=function(obj){data=$.extend({},data,obj)},service.getData=function(){return data},service}),angular.module("node-management").factory("$node_service",["$http","$interval","$rootScope",function($http,$interval,$rootScope){var pollerId,service={};service.nodes=[],service.detachedNodes=[],service.FDS_NODE_UP="FDS_Node_Up",service.FDS_NODE_DOWN="FDS_Node_Down",service.FDS_START_MIGRATION="FDS_Start_Migration",service.FDS_NODE_INACTIVE="FDS_Node_Inactive",service.FDS_NODE_ATTENTION="FDS_Node_Attention",service.FDS_NODE_DISCOVERED="FDS_Node_Discovered",service.getOverallStatus=function(node){return node.am===service.FDS_NODE_DOWN||node.om===service.FDS_NODE_DOWN||node.sm===service.FDS_NODE_DOWN||node.hw===service.FDS_NODE_DOWN||node.dm===service.FDS_NODE_DOWN?service.FDS_NODE_DOWN:node.am===service.FDS_NODE_ATTENTION||node.om===service.FDS_NODE_ATTENTION||node.sm===service.FDS_NODE_ATTENTION||node.hw===service.FDS_NODE_ATTENTION||node.dm===service.FDS_NODE_ATTENTION?service.FDS_NODE_ATTENTION:service.FDS_NODE_UP},service.classForState=function(state){switch(state){case service.FDS_NODE_DOWN:return"fui-cross";case service.FDS_NODE_UP:return"fui-check-inverted-2";case service.FDS_START_MIGRATION:return"fui-radio-unchecked";case service.FDS_NODE_ATTENTION:return"fui-chat";case service.FDS_NODE_INACTIVE:return"fui-radio-unchecked";default:return"fui-radio-unchecked"}},service.addNodes=function(nodes){nodes.forEach(function(node){$http.post("/api/config/services/"+node.node_uuid,{am:node.am,sm:node.sm,dm:node.dm}).then(getNodes)})};var parseData=function(raw){var temp=[],tempDetached=[];service.detachedNodes=[],raw.forEach(function(nodeService){if("FDSP_PLATFORM"==nodeService.node_type&&nodeService.node_state==service.FDS_NODE_DISCOVERED)return void tempDetached.push(nodeService);var ref=temp[nodeService.node_uuid];switch(angular.isDefined(ref)||(ref=nodeService),nodeService.node_type){case"FDSP_STOR_MGR":ref.sm=nodeService.node_state;break;case"FDSP_DATA_MGR":ref.dm=nodeService.node_state;break;case"FDSP_STOR_HVISOR":ref.am=nodeService.node_state;break;case"FDSP_PLATFORM":ref.hw=nodeService.node_state;break;case"FDSP_ORCH_MGR":ref.om=nodeService.node_state}temp[ref.node_uuid]=ref}),service.detachedNodes=tempDetached;var serializedBucket=[];for(var prop in temp)serializedBucket.push(temp[prop]);service.nodes=serializedBucket},getNodes=function(){return $http.get("/api/config/services").success(function(data){parseData(data),$interval.cancel(pollerId)}).error(function(){})},poll=function(){getNodes().then(function(){pollerId=$interval(getNodes,1e4)})}();return $rootScope.$on("fds::authentication_logout",function(){$interval.cancel(pollerId)}),$rootScope.$on("fds::authentication_success",poll),service}]),angular.module("utility-directives").factory("$resize_service",["$window","$rootScope",function($window,$rootScope){var service={};return service.listeners=[],service.register=function(id,callback){service.listeners[id]=callback},service.unregister=function(id){delete service.listeners[id]},notify=function(){for(var key in service.listeners){var callback=service.listeners[key];callback($window.width,$window.height)}},$rootScope.$on("$destroy",function(){for(var key in service.listeners)service.unregister(key);$window.removeEventListener("resize",notify)}),init=function(){$window.addEventListener("resize",notify)}(),service}]),angular.module("qos").factory("$snapshot_api",["$http",function($http){var service={};return service.createSnapshotPolicy=function(policy,callback,failure){return $http.post("/api/config/snapshots/policies",policy).success(callback).error(failure)},service.deleteSnapshotPolicy=function(policy,callback,failure){return $http.delete("/api/config/snapshot/policies/"+policy.id).success(callback).error(failure)},service.attachPolicyToVolue=function(policy,volumeId,callback,failure){return $http.post("/api/config/snapshots/policies/"+policy.id+"/attach",volumeId).success(callback).error(failure)},service.detachPolicy=function(policy,volumeId,callback,failure){return $http.put("/api/config/snapshots/policies/"+policy.id+"/detach",{volumeId:volumeId}).success(callback).error(failure)},service.cloneSnapshotToNewVolume=function(snapshot,volumeName,callback,failure){return $http.post("/api/snapshot/clone/"+snapshot.id+"/"+escape(volumeName)).success(callback).error(failure)},service}]),angular.module("statistics").factory("$stats_service",["$http",function(){var service={};return service.getFirebreakSummary=function(){return{vals:[{volume:"Vol 1",size:100,minSinceLastFirebreak:1440},{volume:"Vol 2",size:45,minSinceLastFirebreak:10},{volume:"Vol 3",size:8,minSinceLastFirebreak:3456},{volume:"Vol 4",size:85,minSinceLastFirebreak:4400},{volume:"Vol 5",size:16,minSinceLastFirebreak:1e3},{volume:"Vol 6",size:20,minSinceLastFirebreak:1266},{volume:"Vol 7",size:37,minSinceLastFirebreak:2},{volume:"Vol 8",size:21,minSinceLastFirebreak:1700},{volume:"Vol 9",size:94,minSinceLastFirebreak:912},{volume:"Vol 10",size:11,minSinceLastFirebreak:1300},{volume:"Vol 11",size:61,minSinceLastFirebreak:1200}]}},service}]),angular.module("volume-management").factory("$volume_api",["$http","$rootScope","$interval",function($http,$rootScope,$interval){var pollerId,api={},getVolumes=function(){return $http.get("/api/config/volumes").success(function(data){api.volumes=data}).error(function(){})};return $rootScope.$on("fds::authentication_logout",function(){$interval.cancel(pollerId),api.volume=[]}),$rootScope.$on("fds::authentication_success",function(){getVolumes().then(function(){pollerId=$interval(getVolumes,1e4)})}),api.save=function(volume,callback){return angular.isDefined(volume.id)?$http.put("/api/config/volumes/"+volume.id,volume).success(getVolumes):$http.post("/api/config/volumes",volume).success(function(response){getVolumes(),angular.isDefined(callback)&&callback(response)}).error(function(){alert("Volume creation failed.")})},api.delete=function(volume){return $http.delete("/api/config/volumes/"+volume.id).success(getVolumes).error(function(){alert("Volume deletion failed.")})},api.getSnapshots=function(volumeId,callback,failure){return $http.get("/api/config/volumes/"+volumeId+"/snapshots").success(callback).error(failure)},api.getSnapshotPoliciesForVolume=function(volumeId,callback,failure){return $http.get("/api/config/volumes/"+volumeId+"/snapshot/policies").success(callback).error(failure)},api.refresh=function(){getVolumes()},api.volumes=[],api}]),angular.module("status").controller("statusController",["$scope","$activity_service","$interval","$authorization","$stats_service",function($scope,$activity_service,$interval,$authorization,$stats_service){$scope.activities=[],$scope.firebreakStats=$stats_service.getFirebreakSummary(),$scope.firebreakMax=1440,$scope.activitiesReturned=function(list){$scope.activities=eval(list)},$scope.isAllowed=function(permission){var isit=$authorization.isAllowed(permission);return isit},$activity_service.getActivities("","",30,$scope.activitiesReturned)}]),angular.module("node-management").controller("addNodeController",["$scope","$node_service",function($scope,$node_service){$scope.checkState="partial",$scope.detachedNodes=[],$scope.cancel=function(){$scope.$emit("fds::node_done_adding")},$scope.addNodes=function(){var toAdd=[];$scope.detachedNodes.forEach(function(node){(node.addAll===!0||"partial"===node.addAll)&&toAdd.push(node)}),$node_service.addNodes(toAdd),$scope.cancel()},$scope.parentStateChanged=function(detachedNode){detachedNode.am=detachedNode.addAll,detachedNode.sm=detachedNode.addAll,detachedNode.dm=detachedNode.addAll},$scope.serviceStateChanged=function(detachedNode){detachedNode.addAll=detachedNode.am===!0&&detachedNode.sm===!0&&detachedNode.dm===!0?"checked":detachedNode.am!==!1&&angular.isDefined(detachedNode.am)||detachedNode.dm!==!1&&angular.isDefined(detachedNode.dm)||detachedNode.sm!==!1&&angular.isDefined(detachedNode.sm)?"partial":!1},$scope.$watch(function(){return $node_service.detachedNodes},function(){$scope.editing||($scope.detachedNodes=$node_service.detachedNodes)})}]),angular.module("system").controller("systemController",["$scope","$node_service","$authentication",function($scope,$node_service){$scope.addingnode=!1,$scope.nodes=$node_service.nodes,$scope.getOverallStatus=function(node){return $scope.getStatus($node_service.getOverallStatus(node))},$scope.getStatus=function(state){switch(state){case $node_service.FDS_NODE_UP:return"fui-check-inverted-2";case $node_service.FDS_NODE_DOWN:return"fui-cross error-color";default:return"fui-radio-unchecked"}},$scope.getIcon=function(state){return $node_service.classForState(state)},$scope.$on("fds::node_done_adding",function(){$scope.addingnode=!1}),$scope.$watch(function(){return $node_service.nodes},function(){$scope.addingnode||($scope.nodes=$node_service.nodes)})}]),angular.module("tenant").controller("createTenantController",["$scope","$tenant_api",function($scope,$tenant_api){var done=function(){$scope.$emit("fds::tenant_done_editing")};$scope.cancel=function(){done()},$scope.save=function(){var tenant={name:$scope.name};$tenant_api.createTenant(tenant,done)}}]),angular.module("tenant").controller("tenantController",["$scope","$tenant_api",function($scope,$tenant_api){$scope.creating=!1,$scope.viewing=!1,$scope.checkall=!1,$scope.actions=[{name:"Delete tenants"}],$scope.tenants=[],$scope.actionLabel="Actions",$scope.createNewTenant=function(){$scope.creating=!0},$scope.actionSelected=function(){},$scope.tenantCheckChanged=function(){for(var checked=0,i=0;i<$scope.tenants.length;i++)$scope.tenants[i].checked===!0&&checked++;$scope.checkall=checked===$scope.tenants.length?!0:0===checked?!1:"partial"},$scope.$on("fds::tenant_done_editing",function(){$scope.creating=!1,$scope.refresh()}),$scope.$watch("checkall",function(newVal){if("partial"!==newVal)for(var i=0;i<$scope.tenants.length;i++)$scope.tenants[i].checked=newVal}),$scope.refresh=function(){$tenant_api.getTenants(function(tenants){$scope.tenants=tenants})},$scope.refresh()}]),angular.module("user-page").controller("userController",["$scope","$user_service","$authorization",function($scope,$user_service,$authorization){$scope.actionLabel="Actions",$scope.actionItems=[{name:"Actions"},{name:"Edit User"},{name:"Delete User"},{name:"Disable User"}],$scope.users=[],$scope.actionSelected=function(){},$scope.usersReturned=function(response){$scope.users=eval(response)},$scope.isAllowed=function(permission){return $authorization.isAllowed(permission)},$user_service.getUsers($scope.usersReturned)}]),angular.module("volumes").controller("nameTypeController",["$scope","$data_connector_api","$modal_data_service",function($scope,$data_connector_api,$modal_data_service){$scope.sizes=[{name:"GB"},{name:"TB"},{name:"PB"}],$scope._selectedSize=10,$scope._selectedUnit=$scope.sizes[0].name;var init=function(){$scope.name="",$scope.editing=!1,$scope.connectors=$data_connector_api.connectors,$scope.data_connector=$scope.connectors[1]},findUnit=function(str){for(var i=0;i<$scope.sizes.length;i++)if($scope.sizes[i].name==str)return $scope.sizes[i]};$scope.setSelected=function(connector){$scope.data_connector=connector},$scope.editConnector=function(connector){$scope._selectedUnit=findUnit(connector.attributes.unit),$scope._selectedSize=parseInt(connector.attributes.size),$scope.editingConnector=connector},$scope.stopEditing=function(){$scope.editingConnector={}},$scope.saveConnectorChanges=function(connector){connector.attributes.size=$scope._selectedSize,connector.attributes.unit=$scope._selectedUnit.name,$data_connector_api.editConnector(connector),$scope.stopEditing()},$scope.updateData=function(){$modal_data_service.update({name:$scope.name,data_connector:$scope.data_connector})},$scope.$on("fds::volume_done_editing",init),$scope.$on("fds::create_volume_initialize",function(){$scope.updateData()}),$scope.$watch("name",function(){$scope.updateData()}),$scope.$watch("data_connector",function(){$scope.updateData()}),init()}]),angular.module("volumes").controller("qualityOfServiceController",["$scope","$modal_data_service",function($scope,$modal_data_service){var init=function(){$scope.priority=10,$scope.capacity=0,$scope.iopLimit=300,$scope.editing=!1};$scope.priorityOptions=[10,9,8,7,6,5,4,3,2,1],$scope.updateData=function(){$modal_data_service.update({priority:$scope.priority,sla:$scope.capacity,limit:$scope.iopLimit})},$scope.$on("fds::create_volume_initialize",function(){$scope.updateData()}),$scope.$on("fds::volume_done_editing",init),$scope.$watch("priority",function(){$scope.updateData()}),$scope.$watch("capacity",function(){$scope.updateData()}),$scope.$watch("iopLimit",function(){$scope.updateData()}),$scope.$watch("editing",function(){$scope.$broadcast("fds::fui-slider-refresh")}),init()}]),angular.module("volumes").controller("snapshotPolicyController",["$scope","$modal_data_service",function($scope,$modal_data_service){$scope.summaryText="",$scope.timeChoices=[{name:"Hours"},{name:"Days"},{name:"Weeks"},{name:"Months"},{name:"Years"}],$scope.policies=[{name:"Hourly",units:$scope.timeChoices[1],value:0,use:!1},{name:"Daily",units:$scope.timeChoices[2],value:0,use:!1},{name:"Weekly",units:$scope.timeChoices[3],value:0,use:!1},{name:"Monthly",units:$scope.timeChoices[4],value:0,use:!1},{name:"Yearly",units:$scope.timeChoices[4],value:0,use:!1}],$scope.generateSummaryText=function(){for(var types=[],i=0;i<$scope.policies.length;i++)($scope.policies[i].use===!0||"checked"===$scope.policies[i].use)&&types.push($scope.policies[i]);for(var typeString="",j=0;j<types.length;j++)(types[j].use===!0||"checked"===types[j].use)&&(j+1===types.length&&0!==j&&(typeString+=" and "),typeString+=types[j].name,j+2<types.length&&(typeString+=", "));""===typeString&&(typeString="None"),$scope.summaryText=typeString};var convertToSeconds=function(value,timeUnit){var mult;switch(timeUnit){case"HOURLY":mult=3600;break;case"DAILY":mult=86400;break;case"WEEKLY":mult=604800;break;case"MONTHLY":mult=2678400;break;case"YEARLY":mult=31622400;break;default:mult=3600}return value*mult};$scope.doneEditing=function(){$scope.generateSummaryText();for(var policyList=[],i=0;i<$scope.policies.length;i++)if($scope.policies[i].use===!0){var tempPolicy=$scope.policies[i],policy={name:tempPolicy.name.toUpperCase(),recurrenceRule:{frequency:tempPolicy.name.toUpperCase()},retention:convertToSeconds(tempPolicy.value,tempPolicy.units.name.toUpperCase())};policyList.push(policy)}$modal_data_service.update({snapshotPolicies:policyList}),$scope.editing=!1},$scope.generateSummaryText()}]),angular.module("volumes").controller("volumeCreateController",["$scope","$volume_api","$snapshot_api","$modal_data_service",function($scope,$volume_api,$snapshot_api,$modal_data_service){$scope.save=function(){var volume=$modal_data_service.getData();"None"===volume.sla&&(volume.sla=0),"None"===volume.limit&&(volume.limit=0),$volume_api.save(volume,function(){for(var i=0;angular.isDefined(volume.snapshotPolicies)&&i<volume.snapshotPolicies.length;i++)volume.snapshotPolicies[i].name=volume.name+"_"+volume.snapshotPolicies.name,$snapshot_api.createSnapshotPolicy(volume.snapshotPolicies[i]).then(function(){})}),$scope.cancel()},$scope.cancel=function(){$scope.$emit("fds::volume_done_editing"),$scope.$broadcast("fds::volume_done_editing")},$scope.$watch("$parent.creating",function(){$scope.$parent.creating===!0&&($modal_data_service.start(),$scope.$broadcast("fds::create_volume_initialize"))})}]),angular.module("volumes").controller("viewVolumeController",["$scope","$volume_api","$modal_data_service",function($scope,$volume_api){$scope.snapshots=[],$scope.timeChoices=[{name:"Hours"},{name:"Days"},{name:"Weeks"},{name:"Months"},{name:"Years"}],$scope.policies=[{name:"Hourly",units:$scope.timeChoices[1],value:0,use:!1},{name:"Daily",units:$scope.timeChoices[2],value:0,use:!1},{name:"Weekly",units:$scope.timeChoices[3],value:0,use:!1},{name:"Monthly",units:$scope.timeChoices[4],value:0,use:!1},{name:"Yearly",units:$scope.timeChoices[4],value:0,use:!1}],$scope.generateSummaryText=function(){for(var types=[],i=0;i<$scope.policies.length;i++)($scope.policies[i].use===!0||"checked"===$scope.policies[i].use)&&types.push($scope.policies[i]);for(var typeString="",j=0;j<types.length;j++)(types[j].use===!0||"checked"===types[j].use)&&(j+1===types.length&&0!==j&&(typeString+=" and "),typeString+=types[j].name,j+2<types.length&&(typeString+=", "));""===typeString&&(typeString="None"),$scope.summaryText=typeString},$scope.clone=function(){prompt("Name for new volume:")},$scope.doneEditing=function(){$scope.generateSummaryText(),$scope.editing=!1},$scope.formatDate=function(ms){var d=new Date(parseInt(ms));return d.toString()},$scope.back=function(){$scope.$emit("fds::volume_done_editing"),$scope.$broadcast("fds::volume_done_editing")},$scope.$on("fds::page_shown",function(){$volume_api.getSnapshots($scope.$parent.selectedVolume.id,function(data){$scope.snapshots=data}),$volume_api.getSnapshotPoliciesForVolume($scope.$parent.selectedVolume.id,function(){})}),$scope.$on("fds::page_hidden",function(){}),$scope.generateSummaryText()}]),angular.module("volumes").controller("volumeController",["$scope","$volume_api","$element","$timeout","$compile",function($scope,$volume_api,$element,$timeout,$compile){$scope.volumes=[],$scope.capacity=10,$scope.iopLimit=300,$scope.priority=10,$scope.editing=!1,$scope.creating=!1,$scope.viewing=!1,$scope.editingVolume={},$scope.priorityOptions=[10,9,8,7,6,5,4,3,2,1];var putEditRowAway=function(){$scope.editing=!1;var el=$("#volume-temp-table"),eRow=$("#volume-edit-row").detach();el.append(eRow)};$scope.clicked=function(volume){$scope.selectedVolume=volume,$scope.viewing=!0},$scope.edit=function($event,volume){$event.stopPropagation();var el=$("#volume-edit-row"),compiled=$compile(el);angular.element($event.currentTarget).closest("tr").after(el),$scope.editing=!0,compiled($scope),$scope.editingVolume=volume,$scope.priority=volume.priority,$scope.iopLimit=volume.limit,$scope.capacity=volume.sla,$timeout(function(){$scope.$broadcast("fds::fui-slider-refresh")},50)},$scope.delete=function(volume){var rtn=confirm("Are you sure you want to delete volume: "+volume.name+"?");rtn===!0&&$volume_api.delete(volume)},$scope.createNewVolume=function(){putEditRowAway(),$scope.creating=!0},$scope.save=function(){putEditRowAway();var volume=$scope.editingVolume;volume.priority=$scope.priority,volume.sla=$scope.capacity,volume.limit=$scope.iopLimit,$volume_api.save(volume)},$scope.cancel=function(){putEditRowAway()},$scope.$on("fds::volume_done_editing",function(){$scope.editing=!1,$scope.creating=!1,$scope.viewing=!1}),$scope.$watch(function(){return $volume_api.volumes},function(){$scope.editing||($scope.volumes=$volume_api.volumes)}),$scope.$on("fds::authentication_logout",function(){$scope.volumes=[]}),$volume_api.refresh()}]);