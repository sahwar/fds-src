/*
 * Copyright 2014 by Formation Data Systems, Inc.
 */
#include <endpoint-test.h>

namespace fds {

// RPC Plugin, the base class is generated by Thrift's IDL.
//
class ProbeTestSM_RPC : virtual public fpi::ProbeServiceSMIf
{
  public:
    ProbeTestSM_RPC() {}
    virtual ~ProbeTestSM_RPC() {}

    void msg_async_resp(const fpi::AsyncHdr &org, const fpi::AsyncRspHdr &resp) {}
    void msg_async_resp(boost::shared_ptr<fpi::AsyncHdr>    &org,
                        boost::shared_ptr<fpi::AsyncRspHdr> &resp) {}

    void foo(const fpi::ProbeFoo &f) {}
    void foo(boost::shared_ptr<fpi::ProbeFoo> &f) {}
    void bar(const fpi::ProbeBar &b) {}
    void bar(boost::shared_ptr<fpi::ProbeBar> &b) {}

    void probe_put(const fpi::ProbePutMsg &reqt) {}
    void probe_get(fpi::ProbeGetMsgResp &ret, const fpi::ProbeGetMsgReqt &reqt) {}

    void probe_put(boost::shared_ptr<fpi::ProbePutMsg> &reqt) {}
    void probe_get(fpi::ProbeGetMsgResp &ret,
                   boost::shared_ptr<fpi::ProbeGetMsgReqt> &reqt) {}
};

ProbeEpTestSM                 gl_ProbeTestSM("Probe SM EP");

// mode_init
// ---------
//
int
ProbeEpTestSM::mod_init(SysParams const *const p)
{
    NetMgr *mgr;

    Module::mod_init(p);

    // Allocate the endpoint, bound to a physical port.
    //
    boost::shared_ptr<ProbeTestSM_RPC>hdler(new ProbeTestSM_RPC());
    probe_ep = new EndPoint<fpi::ProbeServiceAMClient, fpi::ProbeServiceSMProcessor>(
            6000,                          /* port number          */
            NodeUuid(0xabcdef),            /* my uuid              */
            NodeUuid(0xfedcba),            /* peer uuid            */
            boost::shared_ptr<fpi::ProbeServiceSMProcessor>(
                new fpi::ProbeServiceSMProcessor(hdler)),
            new ProbeEpPlugin());

    // Allocate service handling objects for message passing.
    // Services are identified by uuid, major version, minor version.
    //
    svc_hello = new ProbeHelloSvc(ResourceUUID(0x1234), 1, 1); /* ver 1.1 */
    svc_bye   = new ProbeByeSvc(ResourceUUID(0xcafe), 3, 4);   /* ver 3.4 */
    svc_poke  = new ProbePokeSvc(ResourceUUID(0xbeef), 5, 1);  /* ver 5.1 */

    // Register the endpoint in the local domain.
    mgr = NetMgr::ep_mgr_singleton();
    mgr->ep_register(probe_ep);

    // Register services to the endpoint.  These uuids are now availble at the
    // local domain.
    //
    probe_ep->ep_bind_service(svc_hello);
    probe_ep->ep_bind_service(svc_bye);
    probe_ep->ep_bind_service(svc_poke);

    return 0;
}

// mod_startup
// -----------
//
void
ProbeEpTestSM::mod_startup()
{
    probe_ep->ep_activate();
}

// mod_shutdown
// ------------
//
void
ProbeEpTestSM::mod_shutdown()
{
    delete svc_hello;
    delete svc_bye;
    delete svc_poke;
    probe_ep = NULL;
}

/*
 * Service handlers.
 */
void
ProbeHelloSvc::svc_receive_msg(const fpi::AsyncHdr &msg)
{
}

void
ProbeByeSvc::svc_receive_msg(const fpi::AsyncHdr &msg)
{
}

void
ProbePokeSvc::svc_receive_msg(const fpi::AsyncHdr &msg)
{
}

}  // namespace fds
