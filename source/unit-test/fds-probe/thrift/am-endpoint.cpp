/*
 * Copyright 2014 by Formation Data Systems, Inc.
 */
#include <endpoint-test.h>

namespace fds {

// RPC Plugin, the base class is generated by Thrift's IDL.
//
class ProbeTestAM_RPC : virtual public fpi::ProbeServiceAMIf
{
  public:
    ProbeTestAM_RPC() {}
    virtual ~ProbeTestAM_RPC() {}

    void msg_async_resp(const fpi::AsyncHdr &org, const fpi::AsyncRspHdr &resp) {}
    void msg_async_resp(boost::shared_ptr<fpi::AsyncHdr>    &org,
                        boost::shared_ptr<fpi::AsyncRspHdr> &resp) {}

    void am_creat_vol(fpi::ProbeAmCreatVolResp &ret,
                      const fpi::ProbeAmCreatVol &cmd) {}
    void am_creat_vol(fpi::ProbeAmCreatVolResp &ret,
                      boost::shared_ptr<fpi::ProbeAmCreatVol> &cmd) {}

    void am_probe_put_resp(const fpi::ProbeGetMsgResp &resp) {}
    void am_probe_put_resp(boost::shared_ptr<fpi::ProbeGetMsgResp> &resp) {}
};

ProbeEpTestAM                 gl_ProbeTestAM("Probe AM EP");
ProbeEpSvcTestAM              gl_ProbeSvcTestAM("Probe Svc AM");

/*
 * -----------------------------------------------------------------------------------
 *  ProbeEpTestAM
 * -----------------------------------------------------------------------------------
 */
int
ProbeEpTestAM::mod_init(SysParams const *const p)
{
    EndPointMgr *mgr;

    Module::mod_init(p);

    // Allocate the endpoint, bound to a physical port.
    //
    boost::shared_ptr<ProbeTestAM_RPC>hdler(new ProbeTestAM_RPC());
    probe_ep = new EndPoint<fpi::ProbeServiceSMClient, fpi::ProbeServiceAMProcessor>(
            7000,                           /* port number         */
            NodeUuid(0xfedcba),             /* my uuid             */
            NodeUuid(0xabcdef),             /* peer uuid           */
            boost::shared_ptr<fpi::ProbeServiceAMProcessor>(
                new fpi::ProbeServiceAMProcessor(hdler)),
            new ProbeEpPlugin());

    // Register the endpoint in the local domain.
    mgr = EndPointMgr::ep_mgr_singleton();
    mgr->ep_register(probe_ep);
    return 0;
}

void
ProbeEpTestAM::mod_startup()
{
    probe_ep->ep_activate();
}

void
ProbeEpTestAM::mod_shutdown()
{
}

/*
 * -----------------------------------------------------------------------------------
 *  ProbeEpSvcTestAM
 * -----------------------------------------------------------------------------------
 */
int
ProbeEpSvcTestAM::mod_init(SysParams const *const p)
{
    EndPointMgr *mgr;

    Module::mod_init(p);

    // Locate service handle based on uuid; don't care where they are located.
    //
    mgr      = EndPointMgr::ep_mgr_singleton();
    am_hello = mgr->svc_lookup(ResourceUUID(0x1234), 1, 1);
    am_bye   = mgr->svc_lookup(ResourceUUID(0xcafe), 3, 4);
    am_poke  = mgr->svc_lookup(ResourceUUID(0xbeef), 5, 1);
    return 0;
}

void
ProbeEpSvcTestAM::mod_startup()
{
}

void
ProbeEpSvcTestAM::mod_shutdown()
{
}

}  // namespace fds
