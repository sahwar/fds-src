package com.formationds.protocol; /**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestAMSvcSync {

  public interface Iface {

    public ByteBuffer getBlob(String domainName, String volumeName, String blobName, int length, int offset) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getBlob(String domainName, String volumeName, String blobName, int length, int offset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBlob_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ByteBuffer getBlob(String domainName, String volumeName, String blobName, int length, int offset) throws org.apache.thrift.TException
    {
      send_getBlob(domainName, volumeName, blobName, length, offset);
      return recv_getBlob();
    }

    public void send_getBlob(String domainName, String volumeName, String blobName, int length, int offset) throws org.apache.thrift.TException
    {
      getBlob_args args = new getBlob_args();
      args.setDomainName(domainName);
      args.setVolumeName(volumeName);
      args.setBlobName(blobName);
      args.setLength(length);
      args.setOffset(offset);
      sendBase("getBlob", args);
    }

    public ByteBuffer recv_getBlob() throws org.apache.thrift.TException
    {
      getBlob_result result = new getBlob_result();
      receiveBase(result, "getBlob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBlob failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getBlob(String domainName, String volumeName, String blobName, int length, int offset, org.apache.thrift.async.AsyncMethodCallback<getBlob_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBlob_call method_call = new getBlob_call(domainName, volumeName, blobName, length, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBlob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      private String volumeName;
      private String blobName;
      private int length;
      private int offset;
      public getBlob_call(String domainName, String volumeName, String blobName, int length, int offset, org.apache.thrift.async.AsyncMethodCallback<getBlob_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
        this.volumeName = volumeName;
        this.blobName = blobName;
        this.length = length;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBlob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBlob_args args = new getBlob_args();
        args.setDomainName(domainName);
        args.setVolumeName(volumeName);
        args.setBlobName(blobName);
        args.setLength(length);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBlob();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getBlob", new getBlob());
      return processMap;
    }

    public static class getBlob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBlob_args> {
      public getBlob() {
        super("getBlob");
      }

      public getBlob_args getEmptyArgsInstance() {
        return new getBlob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBlob_result getResult(I iface, getBlob_args args) throws org.apache.thrift.TException {
        getBlob_result result = new getBlob_result();
        result.success = iface.getBlob(args.domainName, args.volumeName, args.blobName, args.length, args.offset);
        return result;
      }
    }

  }

  public static class getBlob_args implements org.apache.thrift.TBase<getBlob_args, getBlob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlob_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VOLUME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BLOB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("blobName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlob_argsTupleSchemeFactory());
    }

    public String domainName; // required
    public String volumeName; // required
    public String blobName; // required
    public int length; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName"),
      VOLUME_NAME((short)2, "volumeName"),
      BLOB_NAME((short)3, "blobName"),
      LENGTH((short)4, "length"),
      OFFSET((short)5, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          case 2: // VOLUME_NAME
            return VOLUME_NAME;
          case 3: // BLOB_NAME
            return BLOB_NAME;
          case 4: // LENGTH
            return LENGTH;
          case 5: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LENGTH_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VOLUME_NAME, new org.apache.thrift.meta_data.FieldMetaData("volumeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BLOB_NAME, new org.apache.thrift.meta_data.FieldMetaData("blobName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlob_args.class, metaDataMap);
    }

    public getBlob_args() {
    }

    public getBlob_args(
      String domainName,
      String volumeName,
      String blobName,
      int length,
      int offset)
    {
      this();
      this.domainName = domainName;
      this.volumeName = volumeName;
      this.blobName = blobName;
      this.length = length;
      setLengthIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlob_args(getBlob_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
      if (other.isSetVolumeName()) {
        this.volumeName = other.volumeName;
      }
      if (other.isSetBlobName()) {
        this.blobName = other.blobName;
      }
      this.length = other.length;
      this.offset = other.offset;
    }

    public getBlob_args deepCopy() {
      return new getBlob_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
      this.volumeName = null;
      this.blobName = null;
      setLengthIsSet(false);
      this.length = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public getBlob_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public String getVolumeName() {
      return this.volumeName;
    }

    public getBlob_args setVolumeName(String volumeName) {
      this.volumeName = volumeName;
      return this;
    }

    public void unsetVolumeName() {
      this.volumeName = null;
    }

    /** Returns true if field volumeName is set (has been assigned a value) and false otherwise */
    public boolean isSetVolumeName() {
      return this.volumeName != null;
    }

    public void setVolumeNameIsSet(boolean value) {
      if (!value) {
        this.volumeName = null;
      }
    }

    public String getBlobName() {
      return this.blobName;
    }

    public getBlob_args setBlobName(String blobName) {
      this.blobName = blobName;
      return this;
    }

    public void unsetBlobName() {
      this.blobName = null;
    }

    /** Returns true if field blobName is set (has been assigned a value) and false otherwise */
    public boolean isSetBlobName() {
      return this.blobName != null;
    }

    public void setBlobNameIsSet(boolean value) {
      if (!value) {
        this.blobName = null;
      }
    }

    public int getLength() {
      return this.length;
    }

    public getBlob_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getBlob_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      case VOLUME_NAME:
        if (value == null) {
          unsetVolumeName();
        } else {
          setVolumeName((String)value);
        }
        break;

      case BLOB_NAME:
        if (value == null) {
          unsetBlobName();
        } else {
          setBlobName((String)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      case VOLUME_NAME:
        return getVolumeName();

      case BLOB_NAME:
        return getBlobName();

      case LENGTH:
        return Integer.valueOf(getLength());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      case VOLUME_NAME:
        return isSetVolumeName();
      case BLOB_NAME:
        return isSetBlobName();
      case LENGTH:
        return isSetLength();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlob_args)
        return this.equals((getBlob_args)that);
      return false;
    }

    public boolean equals(getBlob_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      boolean this_present_volumeName = true && this.isSetVolumeName();
      boolean that_present_volumeName = true && that.isSetVolumeName();
      if (this_present_volumeName || that_present_volumeName) {
        if (!(this_present_volumeName && that_present_volumeName))
          return false;
        if (!this.volumeName.equals(that.volumeName))
          return false;
      }

      boolean this_present_blobName = true && this.isSetBlobName();
      boolean that_present_blobName = true && that.isSetBlobName();
      if (this_present_blobName || that_present_blobName) {
        if (!(this_present_blobName && that_present_blobName))
          return false;
        if (!this.blobName.equals(that.blobName))
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBlob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBlob_args typedOther = (getBlob_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVolumeName()).compareTo(typedOther.isSetVolumeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVolumeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeName, typedOther.volumeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlobName()).compareTo(typedOther.isSetBlobName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlobName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blobName, typedOther.blobName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, typedOther.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlob_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("volumeName:");
      if (this.volumeName == null) {
        sb.append("null");
      } else {
        sb.append(this.volumeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blobName:");
      if (this.blobName == null) {
        sb.append("null");
      } else {
        sb.append(this.blobName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlob_argsStandardSchemeFactory implements SchemeFactory {
      public getBlob_argsStandardScheme getScheme() {
        return new getBlob_argsStandardScheme();
      }
    }

    private static class getBlob_argsStandardScheme extends StandardScheme<getBlob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VOLUME_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.volumeName = iprot.readString();
                struct.setVolumeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BLOB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blobName = iprot.readString();
                struct.setBlobNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        if (struct.volumeName != null) {
          oprot.writeFieldBegin(VOLUME_NAME_FIELD_DESC);
          oprot.writeString(struct.volumeName);
          oprot.writeFieldEnd();
        }
        if (struct.blobName != null) {
          oprot.writeFieldBegin(BLOB_NAME_FIELD_DESC);
          oprot.writeString(struct.blobName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlob_argsTupleSchemeFactory implements SchemeFactory {
      public getBlob_argsTupleScheme getScheme() {
        return new getBlob_argsTupleScheme();
      }
    }

    private static class getBlob_argsTupleScheme extends TupleScheme<getBlob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        if (struct.isSetVolumeName()) {
          optionals.set(1);
        }
        if (struct.isSetBlobName()) {
          optionals.set(2);
        }
        if (struct.isSetLength()) {
          optionals.set(3);
        }
        if (struct.isSetOffset()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
        if (struct.isSetVolumeName()) {
          oprot.writeString(struct.volumeName);
        }
        if (struct.isSetBlobName()) {
          oprot.writeString(struct.blobName);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.volumeName = iprot.readString();
          struct.setVolumeNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.blobName = iprot.readString();
          struct.setBlobNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
        if (incoming.get(4)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class getBlob_result implements org.apache.thrift.TBase<getBlob_result, getBlob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlob_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlob_result.class, metaDataMap);
    }

    public getBlob_result() {
    }

    public getBlob_result(
      ByteBuffer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlob_result(getBlob_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
;
      }
    }

    public getBlob_result deepCopy() {
      return new getBlob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public getBlob_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public getBlob_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlob_result)
        return this.equals((getBlob_result)that);
      return false;
    }

    public boolean equals(getBlob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBlob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBlob_result typedOther = (getBlob_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlob_resultStandardSchemeFactory implements SchemeFactory {
      public getBlob_resultStandardScheme getScheme() {
        return new getBlob_resultStandardScheme();
      }
    }

    private static class getBlob_resultStandardScheme extends StandardScheme<getBlob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlob_resultTupleSchemeFactory implements SchemeFactory {
      public getBlob_resultTupleScheme getScheme() {
        return new getBlob_resultTupleScheme();
      }
    }

    private static class getBlob_resultTupleScheme extends TupleScheme<getBlob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
