#!/usr/bin/python
import sys
import json
import jsonpickle
import copy
import random

NUMBER_OF_OPS = 3
operation_list=[]

class Processor:
    """ Converts the primitive operations generated by workload generator into sendable messages."""
    def __init__(self, list_):
        self.list_ = list_

    def toJson(self):
        """ Returns a list of messages usable by JSon decoders."""
        for operation in self.list_:
            if operation == 'put':
                pass
            elif operation == 'get':
                pass
            elif operation == 'delete':
                pass

class Runner:
    """ Uses the data generator module to feed the workload to a data pumper."""
    def __init__(self, workload):
        self.workload = workload

class Spec(object):
    """ Encapsulates the order in which operations should occur."""
    put=0
    get=0
    delete=0
    io=0
    rand_seed=0
    order=''

class Workload:
    """ Handles loading and creation of test workloads."""

    def __init__(self, pathToConfig):
        """ Reads in config file and sets Spec variables."""
        try:
            f = open(pathToConfig,'r')
        except EnvironmentError as e:
            print e
        else:
            with f:
                self.spec = Spec()
                j = json.load(f)
                self.spec.put = j['put']
                self.spec.get = j['get']
                self.spec.delete = j['del']
                self.spec.rand_seed = j['rand_seed']
                self.spec.io = j['total_io']
                self.spec.order = j['order']

    def print_spec(self):
        """ Prints test workload spec."""
        print 'Spec for current workload:'
        print 'PUTS:',self.spec.put
        print 'GETS:',self.spec.get
        print 'DELS:',self.spec.delete
        print 'ORDER:',self.spec.order
        print 'TOTAL IO:',self.spec.io
        print 'RAND SEED:',self.spec.rand_seed

    def get_op_from_order(self, y):
        """ Maps order string to operation strings."""
        if y == 'p':
            return 'put'
        elif y == 'g':
            return 'get'
        elif y == 'd':
            return 'delete'

    def generate(self):
        """ Generates list of commands to be executed in order."""
        self.load=[]
        random.seed(self.spec.rand_seed)
        _order=0
        _spec=Spec()
        _spec.__dict__.update(self.spec.__dict__)
        _repeat=False
        _list=list(_spec.order)

        if self.spec.rand_seed != 0:
            random.shuffle(_list)
            _spec.order = ''.join(_list)
        for i in range(self.spec.io):
            # Add a command based on order.  order resets after three ops
            self.load.append(self.get_op_from_order(_spec.order[_order]))
            _spec.__dict__[self.get_op_from_order(_spec.order[_order])] -= 1

            # If there are still ops on current op type repeat this op type
            if _spec.__dict__[self.get_op_from_order(_spec.order[_order])] > 0:
                _repeat = True
            else:
                _repeat = False

            # If there are no ops left proceed to the next op and reset _spec
            if _repeat is False:
                _order = (_order + 1) % NUMBER_OF_OPS
                if _order is NUMBER_OF_OPS-1:
                    _spec.__dict__.update(self.spec.__dict__)
                    random.shuffle(_list)
                    _spec.order = ''.join(_list)


def main():
    """ Runs workload generator with JSon spec as first argument."""
    w = Workload(sys.argv[1])
    w.print_spec()
    w.generate()
    print w.load
    p = Processor(w.load)

main()
