#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# TEST RESOURCES and TOPOLOGY

[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes paramters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm


# The 'policy' section defines a volume policy
#
[policy1]
# The ID of the policy
id    = 1
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 1
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume2]
# Name of the server AM node to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 2
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume3]
# Name of the server AM node to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 3
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 'object' or 'block'
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_0_1]
log_marker      = Bring up node 1
script          = [node1]
action          = install-boot-activate

[scenario_0_4]
# Verify node node1 is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1

[scenario_1]
# Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 10

[scenario_2_1]
# Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_2_2]
# Attach volume volume1
script          = [volume1]
action          = attach

[scenario_2_3]
# Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 10

[scenario_2_4]
# Attach volume volume2
script          = [volume2]
action          = attach

[scenario_2_5]
# Create volume volume3
script          = [volume3]
action          = create
delay_wait      = 10

[scenario_2_6]
# Attach volume volume3
script          = [volume3]
action          = attach

[scenario_3_1]
# Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_3_2]
# Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_3_3]
# Load some data into volume1 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_3_4]
# Load some data into volume2 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume2

# Boot and activate a second node.
[scenario_4_1]
script          = [node2]
action          = install-boot-activate

[scenario_4_3]
# Verify nodes node1 and 2 are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2

[scenario_4_4_start_writes]
# Run some IO while migration should be happening
script          = [fork]
real-script     = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,verify,n_reqs,test_type,username
params          = localhost,true,200,PUT,admin



# Boot and activate a third node.
[scenario_5_1]
script          = [node3]
action          = install-boot-activate

[scenario_5_3]
# Verify nodes node1, 2, and 3 are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3

# Boot and activate a fourth node.
[scenario_6_1]
script          = [node4]
action          = install-boot-activate

[scenario_6_3]
# Verify nodes node1, 2, 3, and 4 are up
script          = [verify]
state           = up
# Comma separated list of nodes. No white space, please.
fds_nodes       = node1,node2,node3,node4

[scenario_6_4]
# wait for active IOs
script          = [join]
join_scenario   = scenario_4_4_start_writes

[scenario_6_5]
# Wait for DLT close
script          = [waitforlog]
fds_node        = node1
service         = om
logentry        = OM deployed DLT with 4 nodes
occurrences     = 1
maxwait         = 180

# Kill nodes so we can get access to the LevelDB files
# to check static migration.
#
[scenario_7_1]
script          = [domain]
action          = kill


# Run the DM and SM Checkers to confirm Static Migration.
[scenario_8_1]
# Check DM Static Migration from node1 to node2 for volume1.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node2,volume1

[scenario_8_2]
# Check DM Static Migration from node1 to node3 for volume1.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node3,volume1

[scenario_8_3]
# Check DM Static Migration from node1 to node4 for volume1.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node4,volume1

[scenario_8_4]
# Check DM Static Migration from node1 to node2 for volume2.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node2,volume2

[scenario_8_5]
# Check DM Static Migration from node1 to node3 for volume2.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node3,volume2

[scenario_8_6]
# Check DM Static Migration from node1 to node4 for volume2.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node4,volume2


[scenario_8_7]
# Check DM Static Migration from node1 to node2 for volume3.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node2,volume3

[scenario_8_8]
# Check DM Static Migration from node1 to node3 for volume3.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node3,volume3

[scenario_8_9]
# Check DM Static Migration from node1 to node4 for volume3.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node4,volume3

[scenario_9_1]
# Check SM Static Migration from node1 to node2.
# Check disk-map files.
script          = [canonmatch]
canon           = StaticMigration/node1.disk-map
filetocheck     = /fds/node1/dev/disk-map

[scenario_9_2]
script          = [canonmatch]
canon           = StaticMigration/node2.disk-map
filetocheck     = /fds/node2/dev/disk-map

[scenario_9_3]
script          = [canonmatch]
canon           = StaticMigration/node3.disk-map
filetocheck     = /fds/node3/dev/disk-map

[scenario_9_4]
script          = [canonmatch]
canon           = StaticMigration/node4.disk-map
filetocheck     = /fds/node4/dev/disk-map

[scenario_a_1]
# Run SM checker and compare results.
# Check SM Static Migration from node1 to node3.
# Try this one even if previous scenarios have failed just to see what happens.
script          = [testcases.TestFDSSysVerify.TestVerifySMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
# We'll go ahead with this one even if previous test cases have failed.
param_names     = node1,node2
params          = node1,node2

[scenario_a_2]
# Check SM Static Migration from node1 to node3.
script          = [testcases.TestFDSSysVerify.TestVerifySMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2
params          = node1,node3

[scenario_a_3]
# Check SM Static Migration from node1 to node4.
script          = [testcases.TestFDSSysVerify.TestVerifySMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2
params          = node1,node4


[scenario_aa_4]
# Check SM Meta Migration from node1 to node2
script          = [testcases.TestFDSSysVerify.TestVerifySMMetaMigration]
# Comma separated list of parameter names and values. No white space, please.
# We'll go ahead with this one even if previous test cases have failed.
param_names     = node1,node2
params          = node1,node2

[scenario_aa_5]
# Check SM Meta Migration from node1 to node3
script          = [testcases.TestFDSSysVerify.TestVerifySMMetaMigration]
# Comma separated list of parameter names and values. No white space, please.
# We'll go ahead with this one even if previous test cases have failed.
param_names     = node1,node2
params          = node1,node3

[scenario_aa_6]
# Check SM Meta Migration from node1 to node4
script          = [testcases.TestFDSSysVerify.TestVerifySMMetaMigration]
# Comma separated list of parameter names and values. No white space, please.
# We'll go ahead with this one even if previous test cases have failed.
param_names     = node1,node2
params          = node1,node4

# Now clean up installation areas.
[scenario_b_1]
script          = [domain]
action          = uninst

