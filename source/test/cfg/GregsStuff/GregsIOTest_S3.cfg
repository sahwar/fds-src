#
# Copyright 2015 Formation Data Systems, Inc.
#

# TEST DESCRIPTION
# This test just runs a lot of IO



# This ID is used as a default for running shell commands.
[user]
# The values given here are actually the defaults.
user_name       = root
password        = passwd
# sudo_password can be overridden on the command
# line with a -d option.
sudo_password   = dummy


# Use this section to support installation from a deployable package.
[install]
# Where's the Ansible deployment script? (Can be a path relative to where the test is started.)
deploy-script-dir = ../../../ansible/scripts
# Which script?
deploy-script   = deploy_fds.sh
# Where's the Ansible inventory template file?
inventory-template = ansible-inventory/generic-lxc-nodes
# Is the deployable package pulled from a dev environment(local) or the nightly build (nightly)?
deb-location    = nightly

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
#ip              = lxc-node-01
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
services        = dm,sm,am

[node2]
enable          = true
ip              = localhost
#ip              = lxc-node-02
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm,am

[node3]
enable          = true
ip              = localhost
#ip              = lxc-node-03
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm

[node4]
enable          = true
ip              = localhost
#ip              = lxc-node-04
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

[volume2]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

[volume3]
# Name of the server AM node to attach to
client = node2
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# TEST STEPS or CASES or SCENARIOS



###################################################################
# Preliminaries.
###################################################################
[scenario_domain_install]
log_marker      = Install the domain
script          = [domain]
action          = install

[scenario_config_adjust_1]
log_marker      = Change platform.conf to allow DM additions after boot up
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = prevent_adding_dm_after_startup.*,prevent_adding_dm_after_startup = false

[scenario_config_adjust_2]
log_marker      = Change platform.conf to allow failed services to be restarted by PM
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = restart_failed_children_process.*,restart_failed_children_processes = true

[scenario_domain_boot]
log_marker      = Boot up the domain
script          = [domain]
action          = boot-activate


[scenario_volume1_create]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_volume1_attach]
log_marker      = Attach volume volume1
script          = [volume1]
action          = attach




###################################################################
# Populate volume volume1 and start a READ client that will persist
# throughout the remainder of the test.
###################################################################
[scenario_create_volume1_content_fork]
log_marker      = Run test cases to create volume1 content.
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/S3/IO_volume1_C.cfg

[scenario_join_create_volume1_content_fork]
log_marker      = Join "create volume1 content" forked test
script          = [join]
join_scenario   = scenario_create_volume1_content_fork

[scenario_read_volume1_client_fork]
log_marker      = Run test cases to load and then continually read volume1.
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/S3/IO_volume1_R.cfg



[scenario_shoot_dm_node1_io_fork]
log_marker      = Run some IO on a separate process for DM kill
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/GregsStuff/IO_volume1_CRD_DontRetry_DontVerifyDelete.cfg


###################################################################
# Create and attach another volume                                #
###################################################################
[scenario_create_vol2]
log_marker      = Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 5

[scenario_attach_vol2]
log_marker      = Attach volume volume2
script          = [volume2]
action          = attach

#[scenario_vol2_io_on_am1_fork]
#log_marker      = Run some IO on a separate process for am1 and vol2
#script          = [fork]
#real-script     = [scenario]
#fds-scenario    = ../cfg/GregsStuff/IO_volume2_CRD_DontRetry_DontVerifyDelete.cfg
#
#[scenario_create_volume2_content_fork]
#log_marker      = Run test cases to create duplicate volume1 on volume 2content.
#script          = [fork]
#real-script     = [scenario]
#fds-scenario    = ../cfg/GregsStuff/IO_volume2_C.cfg



#[scenario_create_vol3]
#log_marker      = Create volume volume3
#script          = [volume3]
#action          = create
#delay_wait      = 5
#
#[scenario_attach_vol3]
#log_marker      = Attach volume volume3
#script          = [volume3]
#action          = attach
#
#[scenario_get_s3_token_trafficgen]
#log_marker      = Get an S3 authorization token
#script          = [testcases.TestOMIntFace.TestGetAuthToken]
#
#[scenario_get_s3_connection_trafficgen]
#log_marker      = Get an S3 connection
#script          = [testcases.TestS3IntFace.TestS3GetConn]
#
#[scenario_reload_obj_vol1]
#log_marker      = Load bucket information so we can verify its contents.
#script          = [testcases.TestS3IntFace.TestS3VerifiableObjectLoop]
#param_names     = bucket,runTime
#params          = volume1,7200

