#
# Copyright 2014 Formation Data Systems, Inc.
#
# FDS Scenario configuration for testing DMT Migration
# in a 2-node domain.

[user]
user_name       = root
password        = passwd

# The 'node' section defines nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
[node1]
# Denotes this node will run an OM
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for this node. Not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.


[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm





# TEST STEPS or CASES or SCENARIOS

# Start and activate an initial 1-node domain. We don't
# use "script=[domain]"/"action=install-boot-activate" since we only
# want a single node domain to start, not the 2-node
# domain that those configurations would give, there being
# 2 nodes defined in the resource part of this FDS Scenario config.
[scenario_install_and_boot_node1]
script          = [node1]
action          = install-boot-activate

[scenario_verify_node1_up]
script          = [verify]
state           = up
# Comma separated list of nodes. No white space.
fds_nodes       = node1



# The next several log checks will verify that DMT
# "migration" has taken place as expected for an
# initial 1-node domain.
[scenario_verify_initial_dmt_migration10]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = OM_PmAgent: will send node activate message to Node-1
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration11]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Sent DMT to 1 DM services successfully
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration12]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Sent DMT to 1 AM services successfully
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration13]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Sent DMT to 1 SM services successfully
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration14]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = OM deployed DMT with 1 DMs
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30



# Now start and add a second node to the domain.
[scenario_install_and_boot_node2]
script          = [node2]
action          = install-boot-activate


[scenario_verify_all_nodes_up]
script          = [verify]
state           = up
# Comma separated list of nodes. No white space.
fds_nodes       = node1,node2



# The next several log checks will verify that DMT
# "migration" has taken place as expected for the
# addition of a second node to an initial 1-node domain.
[scenario_verify_initial_dmt_migration20]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = OM_PmAgent: will send node activate message to Node-1
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration21]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = OM_PmAgent: will send node activate message to Node-2
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration22]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Sent DMT to 2 DM services successfully
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration23]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Sent DMT to 1 AM services successfully
# Exactly the number of occurrences that must be found for success.
occurrences     = 2
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration24]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Sent DMT to 2 SM services successfully
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration25]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = OM deployed DMT with 2 DMs
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30


# Now remove node node2
[scenario_remove_node2_from_domain]
script          = [node2]
action          = remove
# Delay wait after running the script. In seconds.
delay_wait      = 10



# The next several log checks will verify that DMT
# "migration" has taken place as expected for the
# removal of the second node from our domain.
[scenario_verify_initial_dmt_migration30]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Received remove services for nodeNode-2 remove am ? false remove sm ? true remove dm ? true
# Exactly the number of occurrences that must be found for success.
occurrences     = 1
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration31]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Sent DMT to 1 DM services successfully
# Exactly the number of occurrences that must be found for success.
occurrences     = 2
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration32]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Sent DMT to 1 AM services successfully
# Exactly the number of occurrences that must be found for success.
occurrences     = 3
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration33]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = Sent DMT to 1 SM services successfully
# Exactly the number of occurrences that must be found for success.
occurrences     = 2
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30

[scenario_verify_initial_dmt_migration34]
script          = [waitforlog]
# Node containing log to search.
fds_node        = node1
# Service whose log is to be searched.
service         = om
# Log entry to search for.
logentry        = OM deployed DMT with 1 DMs
# Exactly the number of occurrences that must be found for success.
occurrences     = 2
# Maximum time (seconds) to wait for the search to be successful before giving up as failure.
maxwait         = 30


# This will clean up all nodes defined in the resource part
# of this FDS Scenario config file, even the node that we
# have now removed from the domain (but left running).
[scenario_kill_domain_and clean_up]
# Shut down the domain (includes uninstallation and Redis shutdown.)
script          = [domain]
action          = kill-uninst
