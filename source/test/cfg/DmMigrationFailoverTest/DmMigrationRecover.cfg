#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# Static Migration.
#
# Note: Do not embed white space is comma delimited lists - test framework bug.

# TEST RESOURCES and TOPOLOGY

[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume2]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 2
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume3]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 3
# The size of the volume
size   = 10000000
# The volume access type, currently either 'object' or 'block'
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_setup_system1]
log_marker      = Set up system.
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/DmMigrationFailoverTest/DmMigrationSetup.cfg

[scenario_setup_system1_join]
log_marker      = Join setup system 
script          = [join]
join_scenario   = scenario_setup_system1

[scenario_run_dm_abort_migration]
log_marker      = Running abort.dm.migration injection test
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/DmMigrationFailoverTest/DmMigrationAbortDMMigration.cfg

[scenario_join_dm_abort_migration]
log_marker      = Join abort_migration
script          = [join]
join_scenario   = scenario_run_dm_abort_migration

[scenario_reset_dm_static_migration_failure]
log_marker      = Reset DM Static Migration failure
script          = [testcases.TestFDSServiceMgt.TestServiceInjectFault]
# Command separated list of parameter names and values
param_names     = node,faultName,disable
params          = node2,abort.dm.migration,1

# After a node removal, it cannot be readded as of now
[scenario_shutdown_node2_prior_to_readd]
log_marker      = Shutdown node 2
script          = [node2]
action          = remove
delay_wait      = 30

[scenario_5_1]
log_marker      = Boot and activate a third node.
script          = [node3]
action          = install-boot-activate

[scenario_5_2]
log_marker      = Wait for node 3 activation completion
script          = [waitforlog]
fds_node        = node3
service         = sm
logentry        = :NotifyDLTCloseCb
occurrences     = 1
maxwait         = 240

[scenario_4_3]
log_marker      = Verify nodes node1 and 3 are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node3

[scenario_wait_for_migration_msgs_node1]
log_marker      = Wait for migration client messages
script          = [waitforlog]
fds_node        = node1
service         = dm
logentry        = Creating migration client
occurrences     = 4
maxwait         = 120

[scenario_wait_for_migration_msgs_node3]
log_marker      = Wait for migration client messages
script          = [waitforlog]
fds_node        = node3
service         = dm
logentry        = Migration executor received
occurrences     = 4
maxwait         = 120

[scenario_wait_for_processdeltablobs_node3]
log_marker      = Wait for at least one processingdeltablobs msg
script          = [waitforlog]
fds_node        = node3
service         = dm
logentry        = Processing incoming CtrlNotifyDeltaBlobsMsg
occurrences     = 1
atleastone      = 1
maxwait         = 120

[scenario_wait_for_blobs_applied_node3]
log_marker      = Check to see exactly 2 Volumes should have blobs applied
script          = [waitforlog]
fds_node        = node3
service         = dm
logentry        = received non-empty blob message
occurrences     = 2
maxwait         = 120

[scenario_wait_for_IO_resume_node3]
log_marker      = Looking for VV to be unblocked.
script          = [waitforlog]
fds_node        = node3
service         = dm
logentry        = Applying forwards is complete
occurrences     = 4
maxwait         = 120

[scenario_kill_dm_node1]
log_marker      = Shutdown the DMs on node1
script          = [service]
fds_node        = node1
service         = dm
action          = remove-verifydown
delay_wait      = 3

[scenario_kill_dm_node3]
log_marker      = Shutdown the DMs on node3
script          = [service]
fds_node        = node3
service         = dm
action          = remove-verifydown
delay_wait      = 3

[scenario_dmchecker]
log_marker      = run dm checker
script          = [testcases.TestFDSSysVerify.TestDMChecker]

[scenario_shutdown_domain_end]
log_marker      = Now shutdown and cleanup.
script          = [domain]
action          = kill
