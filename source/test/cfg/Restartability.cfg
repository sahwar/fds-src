#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# FDS Dynamic Storage restartability.
#
# Note: Do not embed white space in comma delimited lists - test framework bug.

# TEST RESOURCES and TOPOLOGY

# 'user' section currently ignored by the System Test framework.
[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes paramters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm,am

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm


# The 'policy' section defines a volume policy
#
[policy1]
# The ID of the policy
id    = 1
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the client AM to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 1
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 's3' or 'blk'
access = s3

# The 'volume' section defines a volume
[volume2]
# Name of the client AM to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 2
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 's3' or 'blk'
access = s3

# The 'volume' section defines a volume
[volume3]
# Name of the client AM to attach to
client = node3
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 3
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 's3' or 'blk'
access = blk





# TEST STEPS or CASES or SCENARIOS

[scenario_install_and_boot_cluster]
# Bring up the cluster (includes installation and Redis boot.)
script          = [cluster]
action          = install-boot-activate



[scenario_create_volume_policy_policy1]
script          = [policy1]
action          = create
delay_wait      = 10


[scenario_create_volume_volume1]
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_attach_volume_volume1]
script          = [volume1]
action          = attach

[scenario_create_volume_volume2]
script          = [volume2]
action          = create
delay_wait      = 10

[scenario_attach_volume_volume2]
script          = [volume2]
action          = attach

[scenario_create_volume_volume3]
script          = [volume3]
action          = create
delay_wait      = 10

[scenario_attach_volume_volume3]
script          = [volume3]
action          = attach



[scenario_get_s3_authorization_token]
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_connection]
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_load_s3_bucket_volume1]
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_load_s3_bucket_volume2]
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume2


[scenario_attach_nbd_service_for_volume_volume3]
script          = [testcases.TestBlockIntFace.TestBlockAttachVolume]
# Command separated list of parameter names and values
param_names     = volume
params          = volume3



[scenario_start_nbd_writes_asynchronously]
script          = [fork]
real-script     = [testcases.TestBlockIntFace.TestBlockFioSeqW]

[scenario_let_nbd_writes_run a bit]
script          = [testcases.TestMgt.TestWait]
# Command separated list of parameter names and values
param_names     = delay,reason
params          = 5,to let a few NBD writes complete



[scenario_kill_cluster]
script          = [cluster]
action          = kill

[scenario_boot_cluster]
script          = [cluster]
action           = boot-activate


[scenario_let_tester_check_things]
script          = [testcases.TestMgt.TestWait]
# Command separated list of parameter names and values
param_names     = delay,reason
params          = 120,to let a few things be manually checked




[scenario_shutdown_cluster_and clean_up]
# Shut down the cluster (includes deinstallation and Redis shutdown.)
script          = [cluster]
action          = kill-uninst
