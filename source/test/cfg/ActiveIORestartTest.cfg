#
# Copyright 2015 Formation Data Systems, Inc.
#
# TEST RESOURCES and TOPOLOGY
[user]
user_name       = root
password        = passwd

# TEST DESCRIPTION
# This test is meant to be run on a multi-node system.
# The test will first verify that I/O is working and that a set of data is written
# and verified. It will then go through and kill one service on one node at a time.
# Depending on the current code base, the expectation is different.
# At this time, having a service (AM/SM/DM) restarted will disrupt I/O.
# Eventually, the goal of this test is to experience no downtime when multiple services
# are restarted, so the system is resilient when services/node go down.

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm

# The 'policy' section defines a volume policy
#
[policy1]
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_0_1]
log_marker      = Install the domain
script          = [domain]
action          = install

[scenario_0_1_2]
log_marker      = Change platform.conf
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = prevent_adding_dm_after_startup.*,prevent_adding_dm_after_startup = false

[scenario_0_1_3]
log_marker      = Bring up the domain
script          = [domain]
action          = boot-activate



[scenario_0_2]
log_marker      = Verify nodes node1-4 are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,nod3,node4

[scenario_0_3]
log_marker      = Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 10

[scenario_0_4]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_0_5]
log_marker      = Attach volume volume1
script          = [volume1]
action          = attach

[scenario_0_6]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_0_7]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_0_8]
log_marker      = Load some data into volume1 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_0_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_0_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_1]
log_marker      = Run some IO on a separate process
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,120,PUT,admin

# Fails because of FS-1767
#[scenario_2_0]
#log_marker      = Kill ONLY the AM on Node1
#script          = [service]
#fds_node        = node1
#service         = am
#action          = kill
#delay_wait      = 3

[scenario_2_1]
log_marker      = Verify all "remote" services are still running
script          = [verify]
state           = up
fds_nodes       = node2,node3,node4
delay_wait      = 10

[scenario_2_2]
log_marker      = Verify that local services are still running
script          = [service]
fds_node        = node1
service         = sm
action          = verifyup

[scenario_2_3]
script          = [service]
fds_node        = node1
service         = pm
action          = verifyup

[scenario_2_4]
script          = [service]
fds_node        = node1
service         = dm
action          = verifyup

[scenario_2_5]
script          = [service]
fds_node        = node1
service         = om
action          = verifyup

# Fails because of FS-1767
#[scenario_2_6]
#log_marker      = Verify I/O doesn't work anymore.
#script          = [testcases.TrafficGen.TestTrafficGen]
#param_names     = hostname,exp_fail,runtime,test_type,username
#params          = localhost,true,120,PUT,admin

# Fails because of FS-1767
#[scenario_2_7]
#log_marker      = Restart the AM on Node1 and wait 120 seconds
#script          = [service]
#fds_node        = node1
#service         = am
#action          = activate
#delay_wait      = 120

[scenario_2_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,1,PUT,admin

[scenario_2_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_2_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_15_5]
log_marker      = Cleanup from test.
script          = [domain]
action          = kill-uninst
delay_wait      = 120
