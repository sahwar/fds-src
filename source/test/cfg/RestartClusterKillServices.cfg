#
# Copyright 2015 Formation Data Systems, Inc.
#
# NOTE:This test is being run as volume grouping enabled.
# When VG is enabled by default in master, remove the platform.conf changes.
#
# Defines resource, configuration and steps to test
# Data persistence across restarts. First, we restart after an
# ungraceful "kill" of all domain services, and then we do
# it again after a graceful "shutdown" of services.
#
#
# Note: Do not embed white space in comma delimited lists - test framework bug.

# Test description:
# ------------------
# 1) Start 4-node domain
# 2) Write some data
# 3a) Kill all the processes (kill-noverify) = non-graceful shutdown
# 3b) Kill all the processes via graceful shutdown
# 4) Start 4-node domain
# 4a) Wait for system to stablize before step 5.
# 4b) Do not wait for system to stablize before step 5.
# 5) Kill random services using system teat framework (kill -9).
# 6) Verify all processes still up
# 7) After resync completes, verify can read data
# 8) Write some data to the domain
# 9) Verify no IO error and all (non-killed) services are up

# TEST RESOURCES and TOPOLOGY

[user]
user_name       = root
password        = passwd

# Use this section to support installation from a deployable package.
[install]
# Where's the Ansible deployment script? (Can be a path relative to where the test is started.)
deploy-script-dir = ../../../ansible/scripts
# Which script?
deploy-script   = deploy_fds.sh
# Where's the Ansible inventory template file?
inventory-template = ansible-inventory/generic-lxc-nodes
# Is the deployable package pulled from a dev environment(local) or the nightly build (nightly)?
deb-location    = nightly

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
om              = true
redis           = true
influxdb        = true
ip              = localhost
#ip              = lxc-node-01
fds_root        = /fds/node1
fds_port        = 7000
services        = sm,dm,am

[node2]
enable          = true
ip              = localhost
#ip              = lxc-node-02
fds_root        = /fds/node2
fds_port        = 7100
services        = sm,dm,am

[node3]
enable          = true
ip              = localhost
#ip              = lxc-node-03
fds_root        = /fds/node3
fds_port        = 7200
services        = sm,dm,am

[node4]
enable          = true
ip              = localhost
#ip              = lxc-node-04
fds_root        = /fds/node4
fds_port        = 7300
services        = sm,dm,am

# The 'volume' section defines a volume
[volume1]
# Name of the client AM to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume2]
# Name of the client AM to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 3
# The size of the volume
size   = 10000000
# The volume access type, currently either 'object' or 'block'
access = block

# The 'volume' section defines a volume
[volume3]
# Name of the client AM to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 4
# The size of the volume
size   = 10000000
# The volume access type, currently either 'object' or 'block'
access = object

# TEST STEPS or CASES or SCENARIOS
# Names must be unique otherwise last stanza w/ the same name is used for all
# scenario steps with that name


#
# First, make sure we start cleanly by cleaning up any residual from
# a previous test.
#
[scenario_verify_domain_down]
log_marker      = Make sure no errant Services currently running and clean installation areas.
script          = [domain]
action          = kill_noverify-uninst

#
# Run the restart test "gracefully".
#

[scenario_domain_install_graceful]
log_marker      = Install domain for 'kill' version.
script          = [domain]
action          = install

[scenario_enable_VG]
log_marker      = Enable VG by modifying platform.conf
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = enable_volumegrouping.*,enable_volumegrouping = true

[scenario_fix_up_platform.conf_graceful]
log_marker      = Change platform.conf
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = prevent_adding_dm_after_startup.*,prevent_adding_dm_after_startup = false

[scenario_fix_up_platform.conf_graceful2]
log_marker      = Change platform.conf
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = restart_failed_children_processes.*,restart_failed_children_processes = true

[scenario_fix_up_platform.conf_graceful3]
log_marker      = Change platform.conf to shorten AM token refresh
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = token_renewal_freq.*,token_renewal_freq=5

[scenario_fix_up_platform.conf_graceful4]
log_marker      = Change platform.conf to shorten AM token refresh
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = token_lease_time.*,token_lease_time=10

[scenario_boot_and_activate_graceful]
log_marker	    = Initial domain boot up.
script          = [domain]
action          = boot-activate

[scenario_wait_for_all_sm_graceful]
log_marker      = Wait for completion-DLT deployment
script          = [waitforlog]
fds_node        = node1
service         = om
logentry        = OM deployed DLT with 4 nodes
occurrences     = 1
maxwait         = 240

[scenario_create_volume1_graceful]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_create_volume2_graceful]
log_marker      = Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 5

[scenario_create_volume3_graceful]
log_marker      = Create volume volume3
script          = [volume3]
action          = create
delay_wait      = 5

[scenario_getauthtoken_graceful]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_gets3conn_graceful]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_storeverifiableobject_graceful]
log_marker      = Store an object that we can later verify
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

# [scenario_addData_before_restart_graceful]
# log_marker      = Load some data into volume2 "bucket" using the S3 interface
# script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
# Command separated list of parameter names and values
# param_names     = bucket
# params          = volume2

[scenario_waitforobjectcreation_graceful]
log_marker      = Wait for object to propagate in system
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to let created object become available in system

[scenario_checkverifiableobject_graceful]
log_marker      = Validate object before we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_closes3conn_graceful]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]


[scenario_startio_pregraceful]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,20,PUT,admin,volume3,5000

[scenario_startio_prewait]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 30,to let I/O run for a bit before shutdown

[scenario_domainshutdown_graceful]
log_marker      = Shut down the domain gracefully without cleaning
script          = [domain]
action          = shutdown

[scenario_waitfordomainshutdown_graceful]
log_marker      = Give some time for the domain to shutdown gracefully.
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 20,to allow the domain time to shutdown gracefully.

[scenario_verify_domain_after_kill_graceful]
log_marker      = Verify the domain is down after graceful shutdown.
script          = [verify]
state           = shutdown

[scenario_bringup_domain_after_stop_graceful]
log_marker      = Activate the domain gracefully
script          = [domain]
action          = graceful_restart

[scenario_waitfordomainsettling_graceful]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 60,to let domain settle and populate data

[scenario_gets3conn_after_restart_graceful]
log_marker      = Get an S3 connection after restart
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_checkverifiableobject_graceful_2]
log_marker      = Validate object after we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

# KILL SM SERVICES AFTER THEY RESTARTED
[scenario_startio_graceful]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,60,PUT,admin,volume3,5000

[scenario_startio_wait]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 30,to let I/O run for a bit before killing services.

[scenario_killrndservice_graceful]
log_marker      = Kill RANDOM service on RANDOM node, just not node 1 AM
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node2 node3 node4,sm am,0-5

# Verify non-killed "remote" services are still running
[scenario_verifyservices_graceful]
script          = [verify]
state           = up
fds_nodes       = node1,node2,node3,node4
delay_wait      = 10

[scenario_waitfordomainsettling_graceful2]
log_marker      = Allow some time for the domain to finish trafficgen
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 120,to let domain settle and populate data

[scenario_checkverifiableobject_graceful_3]
log_marker      = Validate object after we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_startio_prewait2]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 30,to let I/O run for a bit

[scenario_gets3conn_after_restart_graceful2]
log_marker      = Get an S3 connection after restart
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_checkverifiableobject_graceful_3]
log_marker      = Validate object after we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

# KILL SM SERVICES AFTER THEY RESTARTED
[scenario_startio_graceful2]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout,exp_fail
params          = localhost,80,PUT,admin,volume3,5000,1

[scenario_startio_wait2]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 30,to let I/O run for a bit before killing services.

[scenario_killrndservice_graceful2]
log_marker      = Kill AM service on node 1
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1,am,0-3

# Verify non-killed "remote" services are still running
[scenario_verifyservices_graceful2]
script          = [verify]
state           = up
fds_nodes       = node1,node2,node3,node4
delay_wait      = 10

[scenario_waitfordomainsettling_graceful3]
log_marker      = Allow some time for the domain to finish trafficgen
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 120,to let domain settle and populate data

[scenario_checkverifiableobject_graceful_4]
log_marker      = Validate object after we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

##[scenario_domainshutdown_smchk]
## Verify that the migration was a success
#log_marker      = Verify that the migration was a success
#script          = [testcases.SmChk.TestVerifyMigrations]

[scenario_shutdown_and_clean_domain_ungraceful]
log_marker      = Shutdown and cleanup.
script          = [domain]
action          = kill-noverify

#[scenario_domainshutdown_graceful2]
#log_marker      = Shut down the domain gracefully without cleaning
#script          = [domain]
#action          = shutdown

#NEW
[scenario2_boot_and_activate_ungraceful]
log_marker	    = Initial domain boot up.
script          = [domain]
action          = boot

[scenario2_wait_for_all_sm_ungraceful]
log_marker      = Wait for completion-DLT deployment
script          = [waitforlog]
fds_node        = node1
service         = om
logentry        = OM deployed DLT with 4 nodes
occurrences     = 2
atleastcount      = 2
maxwait         = 240

[scenario2_getauthtoken_ungraceful]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario2_gets3conn_ungraceful]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario2_storeverifiableobject_ungraceful]
log_marker      = Store an object that we can later verify
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

# [scenario2_addData_before_restart_ungraceful]
# log_marker      = Load some data into volume2 "bucket" using the S3 interface
# script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
# Command separated list of parameter names and values
# param_names     = bucket
# params          = volume2

[scenario2_waitforobjectcreation_ungraceful]
log_marker      = Wait for object to propogate in system
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to let created object become available in system

[scenario2_checkverifiableobject_ungraceful]
log_marker      = Validate object before we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario2_closes3conn_ungraceful]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]


[scenario2_startio_preungraceful]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,20,PUT,admin,volume3,5000

[scenario2_startio_prewait]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 30,to let I/O run for a bit before shutdown

[scenario2_domainshutdown_ungraceful]
log_marker      = Shut down the domain ungracefully without cleaning
script          = [domain]
action          = kill_noverify

[scenario2_waitfordomainshutdown_ungraceful]
log_marker      = Give some time for the domain to shutdown ungracefully.
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 20,to allow the domain time to shutdown ungracefully.

[scenario2_verify_domain_after_kill_ungraceful]
log_marker      = Verify the domain is down after ungraceful shutdown.
script          = [verify]
state           = down

[scenario2_bringup_domain_after_stop_ungraceful]
log_marker      = Activate the domain ungracefully
script          = [domain]
action          = boot

[scenario2_waitfordomainsettling_ungraceful]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 60,to let domain settle and populate data

[scenario2_gets3conn_after_restart_ungraceful]
log_marker      = Get an S3 connection after restart
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario2_checkverifiableobject_ungraceful_2]
log_marker      = Validate object after we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

# KILL SM SERVICES AFTER THEY RESTARTED
[scenario2_startio_ungraceful]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,60,PUT,admin,volume3,30

[scenario2_startio_wait]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 30,to let I/O run for a bit before killing services.

[scenario2_killrndservice_ungraceful]
log_marker      = Kill RANDOM service on RANDOM node
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1 node2 node3 node4,sm am,0-5

# Verify non-killed "remote" services are still running
[scenario2_verifyservices_ungraceful]
script          = [verify]
state           = up
fds_nodes       = node1,node2,node3,node4
delay_wait      = 10

[scenario2_waitfordomainsettling_ungraceful2]
log_marker      = Allow some time for the domain to finish trafficgen
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 120,to let domain settle and populate data

[scenario2_checkverifiableobject_ungraceful_3]
log_marker      = Validate object after we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario2_startio_prewait2]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 30,to let I/O run for a bit

[scenario2_gets3conn_after_restart_ungraceful2]
log_marker      = Get an S3 connection after restart
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario2_checkverifiableobject_ungraceful_3]
log_marker      = Validate object after we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

# KILL SM SERVICES AFTER THEY RESTARTED
[scenario2_startio_ungraceful2]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,60,PUT,admin,volume3,5000

[scenario2_startio_wait2]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 30,to let I/O run for a bit before killing services.

[scenario2_killrndservice_ungraceful2]
log_marker      = Kill AM service on RANDOM node
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1,am sm,0-5

# Verify non-killed "remote" services are still running
[scenario2_verifyservices_ungraceful2]
script          = [verify]
state           = up
fds_nodes       = node1,node2,node3,node4
delay_wait      = 10

[scenario2_waitfordomainsettling_ungraceful3]
log_marker      = Allow some time for the domain to finish trafficgen
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 120,to let domain settle and populate data

[scenario2_checkverifiableobject_ungraceful_4]
log_marker      = Validate object after we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

#[scenario2_domainshutdown_smchk]
## Verify that the migration was a success
#log_marker      = Verify that the migration was a success
#script          = [testcases.SmChk.TestVerifyMigrations]

[scenario_disable_VG]
log_marker      = Disable VG by reverting platform.conf changes
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = enable_volumegrouping.*,enable_volumegrouping = false

[scenario2_shutdown_and_clean_domain_unungraceful]
log_marker      = Shutdown and cleanup.
script          = [domain]
action          = kill-uninst
