#
# Copyright 2015 Formation Data Systems, Inc.
#
# Test volume functions with different media types as storage medium.
# Test garbage collection for different media types.

# Note: Maxwait parameter in reboot scenarios is in MINUTES.Depending on data available on luster `maxwait` might be greater than 20 min also
# TODO:pooja Run block volume3 IO in background means fork and join
# TEST RESOURCES and TOPOLOGY

[user]
user_name       = root
password        = passwd

[node1]
om              = true
redis           = true
influxdb        = true
ip              = localhost
fds_root        = /fds/node1
fds_port        = 7000

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300

[policy1]
id    = 1
iops_min = 100
iops_max = 500
priority = 1

[volume1]
client = node1
id     = 1
size   = 10000
policy = 1
access = object
media = ssd

[volume2]
client = node1
id     = 2
size   = 10000
policy = 1
access = object
media = hdd

[volume3]
client = node1
id     = 3
size   = 10000000
policy = 1
access = block
media = hybrid

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_reboot_verifyUp]
log_marker      = Verify domain is up
script          = [verify]
state           = up

[scenario_createVolume1]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 3

[scenario_createVol2]
log_marker      = Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 3

[scenario_createVol3]
log_marker      = Create volume volume3
script          = [volume3]
action          = create
delay_wait      = 3

[scenario_attachVol3]
log_marker      = Attach volume volume3
script          = [volume3]
action          = attach

[scenario_getAuthToken]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario2_gets3conn]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_vol1_IO]
log_marker      = Store verifiable object in vol-1
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_vol2_IO]
log_marker      = Store verifiable object in vol-2
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume2

[scenario_reboot_verifyUp]
log_marker      = Verify domain is up
script          = [verify]
state           = up

[scenario_reboot_node2]
log_marker      = Reboot node2
script          = [node2]
action          = reboot
service         = sm,om
logentry        = Resync on restart completed,DmtCloseOkEvt Ready for DM Migration
maxwait         = 10

[scenario_reboot_node3]
log_marker      = Reboot node3
script          = [node3]
action          = reboot
service         = sm,om
logentry        = Resync on restart completed,DmtCloseOkEvt Ready for DM Migration
maxwait         = 20

[scenario_reboot_node4]
log_marker      = Reboot node4
script          = [node4]
action          = reboot
service         = sm,om
logentry        = Resync on restart completed,DmtCloseOkEvt Ready for DM Migration
maxwait         = 20

[scenario_reboot_node1]
log_marker      = Reboot OM node node1
script          = [node1]
action          = reboot
service         = sm,om
logentry        = Resync on restart completed,DmtCloseOkEvt Ready for DM Migration
maxwait         = 20

[scenario_verifySSD]
log_marker      = Validate object after node2 reboot
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_verifyHDD]
log_marker      = Validate object before we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume2

[scenario_closes_s3_connection]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]
