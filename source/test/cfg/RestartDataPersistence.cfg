#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# Static Migration.
#
# To enable SM Static Migration, you'll have to set
# fds.sm.migration.enable_feature to "true" in the file
# used as a template to build platform.conf's for the test.
# Namely, .../source/config/etc/platform.conf.
#
# Note: Do not embed white space is comma delimited lists - test framework bug.

# TEST RESOURCES and TOPOLOGY

# 'user' section currently ignored by the System Test framework.
[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes paramters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true

# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true

# IP of the node
ip              = localhost

# Fds root directory to use
fds_root        = /fds/node1

# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000

[node2]
enable          = false
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100

[node3]
enable          = false
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200

[node4]
enable          = false
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300

# The 'sh'/'am' section defines a Access Manager nodes and parameters. The section must be prefixed
# with 'sh' or 'am' but is also used as a unique ID for the AM.
#
[am1]
# Server uses blk services?
blk             = false
# Server node
fds_node        = node1

# The 'policy' section defines a volume policy
#
[policy1]
# The ID of the policy
id    = 1
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the client AM to attach to
client = am1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 1
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 's3' or 'blk'
access = s3

# The 'volume' section defines a volume
[volume2]
# Name of the client AM to attach to
client = am1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 3
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 's3' or 'blk'
access = blk

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_cleanup_shared_memory]
script          = [testcases.TestFDSEnvMgt.TestFDSSharedMemoryClean]

[scenario_cluster_cleanup]
# Bring up node node1
script          = [cluster]
action          = kill-uninst

[scenario_cluster_bringup]
# Bring up node node1
script          = [cluster]
action          = install-boot-activate

[scenario_create_policy1]
# Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 10

[scenario_create_volume1]
# Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_create_volume2]
# Create volume volume1
script          = [volume2]
action          = create
delay_wait      = 10

[scenario_getauthtoken]
# Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_gets3conn]
# Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_storeverifiableobject]
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_waitforobjectcreation]
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to let created object become available in system

[scenario_checkverifiableobject]
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

# Shutdown all nodes
[scenario_clustershutdown]
script          = [cluster]
action          = kill

[scenario_cleanup_shared_memory2]
script          = [testcases.TestFDSEnvMgt.TestFDSSharedMemoryClean]

[scenario_bringup_cluster_after_stop]
# Bring up node node1
script          = [cluster]
action          = boot-activate

[scenario_waitforclustersettling]
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 20,to let cluster settle and populate data

[scenario_checkverifiableobject]
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

# # Shutdown all nodes
[scenario_shutdown_and_clean_cluster]
script          = [cluster]
action          = kill-uninst
