#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# Data persistence across restarts
#
#
# Note: Do not embed white space is comma delimited lists - test framework bug.

# TEST RESOURCES and TOPOLOGY

# 'user' section currently ignored by the System Test framework.
[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes paramters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
om              = true
redis           = true
ip              = localhost
fds_root        = /fds/node1
fds_port        = 7000
services        = sm,dm,am

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = sm,dm,am

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = sm,dm,am

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = sm,dm,am

# The 'policy' section defines a volume policy
#
[policy1]
# The ID of the policy
id    = 1
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the client AM to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 1
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume2]
# Name of the client AM to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 3
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 'object' or 'block'
access = block

# TEST STEPS or CASES or SCENARIOS
# Names must be unique otherwise last stanza w/ the same name is used for all
# scenario steps with that name

[scenario_domain_cleanup]
# Bring up node node1
script          = [domain]
action          = kill-uninst

[scenario_cleanup_shared_memory]
script          = [testcases.TestFDSEnvMgt.TestFDSSharedMemoryClean]

[scenario_domain_bringup]
# Bring up node node1
script          = [domain]
action          = install-boot-activate

[scenario_create_policy1]
# Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 5

[scenario_create_volume1]
# Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_create_volume2]
# Create volume volume1
script          = [volume2]
action          = create
delay_wait      = 5

[scenario_getauthtoken]
# Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_gets3conn]
# Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_storeverifiableobject]
# Store an object that we can later verify
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_waitforobjectcreation]
# Wait for object to propogate in system
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to let created object become available in system

[scenario_checkverifiableobject]
# Validate object before we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_domainshutdown]
# Take domain down without cleaning
script          = [domain]
action          = kill

[scenario_cleanup_shared_memory2]
# Clean shared memory to address service layer bug(s)
script          = [testcases.TestFDSEnvMgt.TestFDSSharedMemoryClean]

[scenario_bringup_domain_after_stop]
# Boot the domain without cleaning
script          = [domain]
action          = boot-activate

[scenario_waitfordomainsettling]
# Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 20,to let domain settle and populate data

[scenario_checkverifiableobject_after_restart]
# Validate object again after restart
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_shutdown_and_clean_domain]
# Cleanup & shutdown
script          = [domain]
action          = kill-uninst
