#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# Static Migration

[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes paramters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true

# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true

# IP of the node
ip              = localhost

# Fds root directory to use
fds_root        = /fds/node1

# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300

# The 'sh' section defines a Access Manager nodes and parameters. The section must be prefixed
# with 'sh' but is also used as a unique ID for the AM.
#
[am1]
# Client uses blk services
blk             = false
fds_node        = node1

# The 'policy' section defines a policy
#
[policy1]
# The ID of the policy
id    = 1
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume_smoke1]
# Name of the client AM to attach to
client = am1
# The ID of the volume
id     = 2
# The size of the volume
size   = 10000
# A policy ID for the volume
policy = 1
# The volume access type, currenty either 's3' or 'blk'
access = s3

[volume_smoke2]
client = am1
id     = 3
size   = 10000
policy = 2

[volume_smoke3]
client = am1
id     = 4
size   = 10000
policy = 2

[volume_smoke4]
client = am1
id     = 5
size   = 10000
policy = 2


[scenario_0]
# Known section. Bring up node node1
script          = [node1]
action          = bootup
# Delay wait after running the script. In seconds.
delay_wait      = 10

[scenario_1]
# Activate the cluster as currently defined.
script          = [activate]
delay_wait      = 10

[scenario_2]
# Bring up AM
script          = [am1]
action          = bootup
delay_wait      = 10

[scenario_3]
# Verify node node1 is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1

[scenario_4]
# Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 10

[scenario_5]
# Create smoke1 volume
script          = [volume_smoke1]
action          = create
delay_wait      = 10

[scenario_6]
# Attach smoke1 volume
script          = [volume_smoke1]
action          = attach

[scenario_6_1]
# Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_6_2]
# Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_6_3]
# Load some data into our volume/bucket using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_smoke1

[scenario_7]
script          = [node2]
action          = bootup
delay_wait      = 10

[scenario_8]
script          = [activate]
delay_wait      = 10

[scenario_8_1]
# Verify nodes node1 and 2 is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2

[scenario_8_2]
# Check Static DMT Migration from node1 to node2.
script          = [testcases.TestFDSSysVerify.TestVerifyStaticDMTMigration]
# Command separated list of parameter names and values
param_names     = node1,node2,volume
params          = node1,node2,volume_smoke1

[scenario_9]
script          = [node3]
action          = bootup
delay_wait      = 10

[scenario_a]
script          = [activate]
delay_wait      = 10

[scenario_a_1]
# Verify nodes node1, 2, and 3 is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3

[scenario_a_2]
# Check Static DMT Migration from node1 to node2.
script          = [testcases.TestFDSSysVerify.TestVerifyStaticDMTMigration]
# Command separated list of parameter names and values
param_names     = node1,node2,volume
params          = node1,node2,volume_smoke1

[scenario_a_3]
# Check Static DMT Migration from node1 to node3.
script          = [testcases.TestFDSSysVerify.TestVerifyStaticDMTMigration]
# Command separated list of parameter names and values
param_names     = node1,node2,volume
params          = node1,node3,volume_smoke1

[scenario_b]
script          = [node4]
action          = bootup
delay_wait      = 10

[scenario_c]
script          = [activate]
delay_wait      = 10

[scenario_c_1]
# Verify nodes node1, 2, 3, and 4 is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

[scenario_c_2]
# Check Static DMT Migration from node1 to node2.
script          = [testcases.TestFDSSysVerify.TestVerifyStaticDMTMigration]
# Command separated list of parameter names and values
param_names     = node1,node2,volume
params          = node1,node2,volume_smoke1

[scenario_c_3]
# Check Static DMT Migration from node1 to node3.
script          = [testcases.TestFDSSysVerify.TestVerifyStaticDMTMigration]
# Command separated list of parameter names and values
param_names     = node1,node2,volume
params          = node1,node3,volume_smoke1

[scenario_c_4]
# Check Static DMT Migration from node1 to node4.
script          = [testcases.TestFDSSysVerify.TestVerifyStaticDMTMigration]
# Command separated list of parameter names and values
param_names     = node1,node2,volume
params          = node1,node4,volume_smoke1



# Other scenario/scripts needing System Test infrustructure support.
#
#[scenario_1]
# Known section. Execute FDS console command. In this
# case, activate the cluster.
#
# Note: There is some infrustructure in place to expect
# there to be multiple OM's to which the console command
# may be directed. For example, we may have set the
# script to [fdscli-node1] to reference the OM on node
# node1. For now (1/18/2015), we'll maintain the assumption
# that there is only one OM and it is selected by default to
# receive these console commands. Allowing multiple OM's
# will require a little more work in instantiating and managing
# FdsCliConfig objects.
#
# Note 2: This script is too generic in terms of test cases.
# We would rather have the "activate cluster" test case specifically
# invoked by the test harness rather than its objective indirectly
# performed by this generic case of "executed these console commands".
# By invoking the test case specifically, we ensure that the same
# command is executed each time to accomplish the task rather than leaving it
# to the construction of this config file, and the test harness has
# an opportunity to know that the "activate cluster" test case specifically
# is being invoked rather than some opaque set of commands.
#script          = [fdscli]
#script_args     = --activate-nodes abc -k 1 -e sm,dm
#wait_completion = true
#delay_wait      = 30
#[scenario_5]
## Call out this external script
#script          = /home/bao_pham/proj/fds-src/source/test/fds-primitive-smoke.py
#script_args     = --up false --down false --smoke_test true --fds_root /fds/node1 --vol_prefix bao --am_ip 10.1.10.115
#wait_completion = false
## Wait 100 seconds before bringing up node 3
#delay_wait      = 100
