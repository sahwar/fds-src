#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# Static Migration.
#
# Note: Do not embed white space is comma delimited lists - test framework bug.

# TEST RESOURCES and TOPOLOGY

[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm


# The 'policy' section defines a volume policy
#
[policy1]
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume2]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 2
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume3]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 3
# The size of the volume
size   = 10000000
# The volume access type, currently either 'object' or 'block'
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_0_1]
log_marker      = Install
script          = [node1]
action          = install

[scenario_0_2]
log_marker      = Change platform.conf tiering settings
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = prevent_adding_dm_after_startup.*,prevent_adding_dm_after_startup = false
node            = node1

[scenario_0_3]
log_marker      = Start a single node domain by bringing up node node1
script          = [node1]
action          = boot-activate

[scenario_0_4]
log_marker      = Verify node node1 is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1

[scenario_1]
log_marker      = Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 10

[scenario_2_1]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_2_2]
log_marker      = Attach volume volume1
script          = [volume1]
action          = attach

[scenario_2_3]
log_marker      = Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 10

[scenario_2_4]
log_marker      = Attach volume volume2
script          = [volume2]
action          = attach

[scenario_2_5]
log_marker      = Create volume volume3
script          = [volume3]
action          = create
delay_wait      = 10

[scenario_2_6]
log_marker      = Attach volume volume3
script          = [volume3]
action          = attach

[scenario_3_1]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_3_2]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_3_3]
log_marker      = Load some data into volume1 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_3_4]
log_marker      = Load some data into volume2 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume2

[scenario_4_1]
log_marker      = Boot and activate a second node in the domain.
script          = [node2]
action          = install-boot-activate

[scenario_4_2]
log_marker      = Wait for node 2 activation completion
script          = [waitforlog]
fds_node        = node2
service         = sm
logentry        = NotifyDLTClose
occurrences     = 1
maxwait         = 240

[scenario_4_3]
log_marker      = Verify nodes node1 and 2 are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2

[scenario_5_1]
log_marker      = Boot and activate a third node in the domain.
script          = [node3]
action          = install-boot-activate

[scenario_5_2]
log_marker      = Wait for node 3 activation completion
script          = [waitforlog]
fds_node        = node3
service         = sm
logentry        = NotifyDLTClose
occurrences     = 1
maxwait         = 240

[scenario_5_3]
log_marker      = Verify nodes node1, 2, and 3 are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3

[scenario_6_1]
log_marker      = Boot and activate a fourth node in the domain.
script          = [node4]
action          = install-boot-activate

[scenario_6_2]
log_marker      = Wait for node 4 activation completion
script          = [waitforlog]
fds_node        = node4
service         = sm
logentry        = NotifyDLTClose
occurrences     = 1
maxwait         = 240

[scenario_6_3]
log_marker      = Verify nodes node1, 2, 3, and 4 are up
script          = [verify]
state           = up
# Comma separated list of nodes. No white space, please.
fds_nodes       = node1,node2,node3,node4

# Not seeing this message. Is there a new one to look for?
#[scenario_7]
#log_marker      = Wait until node node2's log shows SM migration starting
#script          = [waitforlog]
## Node containing log to search.
#fds_node        = node2
## Service whose log is to be searched.
#service         = sm
## Log entry to search for.
#logentry        = Will migrate tokens from source SM
## Exactly the number of occurrences that must be found for success.
#occurrences     = 1
## Maximum time to wait for the search to be successful before giving up as failure.
#maxwait         = 60


[scenario_7_1]
log_marker      = Kill the domain so we can get access to the LevelDB files to check static migration.
script          = [domain]
action          = kill


# Run the DM and SM Checkers to confirm Static Migration.
[scenario_8_1]
log_marker      = Check DM Static Migration from node1 to node2 for volume1.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node2,volume1

[scenario_8_2]
log_marker      = Check DM Static Migration from node1 to node3 for volume1.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node3,volume1

[scenario_8_3]
log_marker      = Check DM Static Migration from node1 to node4 for volume1.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2,volume
params          = node1,node4,volume1

[scenario_8_4]
log_marker      = Check DM Static Migration from node1 to node2 for volume2.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
param_names     = node1,node2,volume
params          = node1,node2,volume2

[scenario_8_5]
log_marker      = Check DM Static Migration from node1 to node3 for volume2.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
param_names     = node1,node2,volume
params          = node1,node3,volume2

[scenario_8_6]
log_marker      = Check DM Static Migration from node1 to node4 for volume2.
script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
param_names     = node1,node2,volume
params          = node1,node4,volume2

#
# Following 3 test cases are commented out, since it's reporting false
# positive test result (i.e. unexpectedly passed test cases).  Since
# static DM migration do not work, we want to mainly protect ourselves
# against regressing SM token migration.  Test result verfication script
# may not handle the false-positive test case gracefully, so for now
# disable these tests.
#
# Once DM static migration is implemented, these tests should be enabled.
#
# [scenario_8_7]
# log_marker      = Check DM Static Migration from node1 to node2 for volume3.
# script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# param_names     = node1,node2,volume
# params          = node1,node2,volume3

# [scenario_8_8]
# log_marker      = Check DM Static Migration from node1 to node3 for volume3.
# script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# param_names     = node1,node2,volume
# params          = node1,node3,volume3

# [scenario_8_9]
# log_marker      = Check DM Static Migration from node1 to node4 for volume3.
# script          = [testcases.TestFDSSysVerify.TestVerifyDMStaticMigration]
# param_names     = node1,node2,volume
# params          = node1,node4,volume3


[scenario_9_1]
log_marker      = Check disk-map file for node 1.
script          = [canonmatch]
canon           = StaticMigration/node1.disk-map
filetocheck     = /fds/node1/dev/disk-map

[scenario_9_2]
log_marker      = Check disk-map file for node 2.
script          = [canonmatch]
canon           = StaticMigration/node2.disk-map
filetocheck     = /fds/node2/dev/disk-map

[scenario_9_3]
log_marker      = Check disk-map file for node 3.
script          = [canonmatch]
canon           = StaticMigration/node3.disk-map
filetocheck     = /fds/node3/dev/disk-map

[scenario_9_4]
log_marker      = Check disk-map file for node 4.
script          = [canonmatch]
canon           = StaticMigration/node4.disk-map
filetocheck     = /fds/node4/dev/disk-map

[scenario_a_1]
# Run SM checker and compare results.
log_marker      = Check SM Static Migration from node1 to node2.
# Try this one even if previous scenarios have failed just to see what happens.
script          = [testcases.TestFDSSysVerify.TestVerifySMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
# We'll go ahead with this one even if previous test cases have failed.
param_names     = node1,node2,skip
params          = node1,node2,False

[scenario_a_2]
log_marker      = Check SM Static Migration from node1 to node3.
script          = [testcases.TestFDSSysVerify.TestVerifySMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2
params          = node1,node3

[scenario_a_3]
log_marker      = Check SM Static Migration from node1 to node4.
script          = [testcases.TestFDSSysVerify.TestVerifySMStaticMigration]
# Comma separated list of parameter names and values. No white space, please.
param_names     = node1,node2
params          = node1,node4

[scenario_b_1]
log_marker      = Now clean up installation areas.
script          = [domain]
action          = uninst




# Other scenario/scripts needing System Test infrustructure support.
#
#[scenario_1]
# Known section. Execute FDS console command. In this
# case, activate the domain.
#
# Note: There is some infrustructure in place to expect
# there to be multiple OM's to which the console command
# may be directed. For example, we may have set the
# script to [fdscli-node1] to reference the OM on node
# node1. For now (1/18/2015), we'll maintain the assumption
# that there is only one OM and it is selected by default to
# receive these console commands. Allowing multiple OM's
# will require a little more work in instantiating and managing
# FdsCliConfig objects.
#
# Note 2: This script is too generic in terms of test cases.
# We would rather have the "activate domain" test case specifically
# invoked by the test harness rather than its objective indirectly
# performed by this generic case of "executed these console commands".
# By invoking the test case specifically, we ensure that the same
# command is executed each time to accomplish the task rather than leaving it
# to the construction of this config file, and the test harness has
# an opportunity to know that the "activate domain" test case specifically
# is being invoked rather than some opaque set of commands.
#script          = [fdscli]
#script_args     = --activate-nodes abc -k 1 -e sm,dm
#wait_completion = true
#delay_wait      = 30
#[scenario_5]
## Call out this external script
#script          = /home/bao_pham/proj/fds-src/source/test/fds-primitive-smoke.py
#script_args     = --up false --down false --smoke_test true --fds_root /fds/node1 --vol_prefix bao --am_ip 10.1.10.115
#wait_completion = false
## Wait 100 seconds before bringing up node 3
#delay_wait      = 100
