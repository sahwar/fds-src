#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# Data persistence across restarts. First, we restart after an
# graceful "kill" of all domain services, and then we do
# it again after a graceful "shutdown" of services.
#
#
# Note: Do not embed white space in comma delimited lists - test framework bug.

# TEST RESOURCES and TOPOLOGY

[user]
user_name       = root
password        = passwd


# Use this section to support installation from a deployable package.
[install]
# Where's the Ansible deployment script? (Can be a path relative to where the test is started.)
deploy-script-dir = ../../../ansible/scripts
# Which script?
deploy-script   = deploy_fds.sh
# Where's the Ansible inventory template file?
inventory-template = ansible-inventory/generic-lxc-nodes
# Is the deployable package pulled from a dev environment(local) or the nightly build (nightly)?
deb-location    = nightly



# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
om              = true
redis           = true
influxdb        = true
ip              = localhost
#ip              = lxc-node-01
fds_root        = /fds/node1
fds_port        = 7000
services        = sm,dm,am

[node2]
enable          = true
ip              = localhost
#ip              = lxc-node-02
fds_root        = /fds/node2
fds_port        = 7100
services        = sm,dm,am

[node3]
enable          = true
ip              = localhost
#ip              = lxc-node-03
fds_root        = /fds/node3
fds_port        = 7200
services        = sm,dm,am

[node4]
enable          = true
ip              = localhost
#ip              = lxc-node-04
fds_root        = /fds/node4
fds_port        = 7300
services        = sm,dm,am

# The 'policy' section defines a volume policy
#
[policy1]
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the client AM to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume2]
# Name of the client AM to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 3
# The size of the volume
size   = 10000000
# The volume access type, currently either 'object' or 'block'
access = block

# TEST STEPS or CASES or SCENARIOS
# Names must be unique otherwise last stanza w/ the same name is used for all
# scenario steps with that name


#
# First, make sure we start cleanly by cleaning up any residual from
# a previous test.
#
[scenario_verify_domain_down]
log_marker      = Make sure no errant Services currently running and clean installation areas.
script          = [domain]
action          = kill_noverify-uninst

#
# Run the restart test "gracefully".
#
[scenario_domain_install_graceful]
log_marker      = Install domain for 'shutdown' version.
script          = [domain]
action          = install

[scenario_fix_up_platform.conf_graceful]
log_marker      = Change platform.conf
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = prevent_adding_dm_after_startup.*,prevent_adding_dm_after_startup = false

[scenario_boot_and_activate_graceful]
log_marker      = Initial domain boot up.
script          = [domain]
action          = boot-activate

[scenario_wait_for_all_sm_graceful]
log_marker      = Wait for completion-DLT deployment
script          = [waitforlog]
fds_node        = node1
service         = om
logentry        = OM deployed DLT with 4 nodes
occurrences     = 1
maxwait         = 240

[scenario_create_policy1_graceful]
log_marker      = Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 5

[scenario_create_volume1_graceful]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_create_volume2_graceful]
log_marker      = Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 5

[scenario_getauthtoken_graceful]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_gets3conn_graceful]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_storeverifiableobject_graceful]
log_marker      = Store an object that we can later verify
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_add_data_large_blob]
log_marker      = Load some data into volume1 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume2

[scenario_addData_before_restart_graceful]
log_marker      = Write 4000 objects
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,n_reqs,test_type,username,volume_name
params          = localhost,4000,PUT,admin,volume1
delay_wait      = 60

[scenario_waitforobjectcreation_graceful]
log_marker      = Wait for object to propogate in system
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to let created object become available in system

[scenario_checkverifiableobject_graceful]
log_marker      = Validate object before we restart the domain
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_closes3conn_graceful]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]

[scenario_domainshutdown_graceful]
log_marker      = Kill the domain gracefully without cleaning
script          = [domain]
action          = shutdown

[scenario_verify_domain_after_kill_graceful]
log_marker      = Verify the domain is down after graceful shutdown.
script          = [verify]
state           = down
# Comma separated list of nodes.
#fds_nodes       = no fds-nodes option means check all nodes in the domain.

[scenario_boot_domain_after_stop_graceful]
log_marker      = Boot the domain without cleaning (no "install" option)
script          = [domain]
action          = boot

[scenario_remove_disk_from_diskMap]
log_marker      = Remove a disk from disk-map
script          = [testcases.TestFDSSysMgt.TestRemoveDisk]
param_names     = diskMapPath,diskType
params          = /fds/node2/dev/disk-map,ssd

[scenario_activate_domain_after_stop_graceful]
log_marker      = Boot the domain without cleaning (no "install" option)
script          = [domain]
action          = activate

[scenario_waitfordomainsettling_graceful]
log_marker      = Allow some time for SMs to come up and domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 150,to let domain settle and populate data

[scenario_gets3conn_after_restart_graceful]
log_marker      = Get an S3 connection after restart
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_checkverifiableobject_after_restart_graceful]
log_marker      = Validate object again after restart
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_closes3conn_2_graceful]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]

[scenario_shutdown_and_clean_domain_graceful]
log_marker      = Shutdown and cleanup.
script          = [domain]
action          = kill-uninst

