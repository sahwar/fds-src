#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# Migration with active IO.
#
# Note: Do not embed white space is comma delimited lists - test framework bug.

# TEST RESOURCES and TOPOLOGY

# 'user' section currently ignored by the System Test framework.
[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

# The 'policy' section defines a volume policy
#
[policy1]
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be the Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_0_1]
# Bring up node node1
script          = [node1]
action          = install-boot-activate

[scenario_0_4]
# Verify node node1 is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1

[scenario_1]
# Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 10

[scenario_2_1]
# Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_2_2]
# Attach volume volume1
script          = [volume1]
action          = attach

[scenario_3_1]
# Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_3_2]
# Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_3_3]
# Create S3 bucket for puts
script          = [testcases.TestS3IntFace.TestS3CrtBucket]

[scenario_3_4]
# Call TrafficGen
script          = [testcases.TrafficGen.TestTrafficGen]
# Comma separated list of parameter names and values
# NOTE: Trafficgen should always be run with some # of reqs
# otherwise it will not output results, and we cannot determine
# whether it was successful or not
param_names     = hostname,verify,n_reqs,test_type,username
params          = localhost,true,10000,PUT,admin

# Shutdown the fourth node.
# Clean up
[scenario_7_1]
script          = [domain]
action          = shutdown-uninst
