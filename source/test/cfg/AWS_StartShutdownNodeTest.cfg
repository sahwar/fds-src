#
# Copyright 2015 Formation Data Systems, Inc.
#
#
#Test shutdown and start node with active IO
#1.  Test shutdown/start one node and run IO
#2.  Test shutdown/start two nodes and run IO
#3.  Test shutdown/start three nodes and run IO


[user]
user_name = root
password = passwd

[node1]
om = true
redis = true
influxdb = true
ip = localhost
fds_root = /fds/node1
fds_port = 7000

[node2]
enable=true
ip = localhost
fds_root = /fds/node2
fds_port = 7000

[node3]
enable=true
ip = localhost
fds_root = /fds/node3
fds_port = 7000

[node4]
enable=true
ip = localhost
fds_root = /fds/node4
fds_port = 7000

[node5]
enable=true
ip = localhost
fds_root = /fds/node5
fds_port = 7000

[node6]
enable=true
ip = localhost
fds_root = /fds/node6
fds_port = 7000

[node7]
enable=true
ip = localhost
fds_root = /fds/node7
fds_port = 7000

[node8]
enable=true
ip = localhost
fds_root = /fds/node8
fds_port = 7000

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume_startshutdown_node_test]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 2
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume3]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 3
# The size of the volume
size   = 10000000
# The volume access type, currently either 'object' or 'block'
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

#These install-boot-activate scenarios are not currently functional for AWS nodes
#Cards are avialable to work on it.
[scenario_boot_activate]
log_marker      = Bring up domain
script          = [domain]
action          = install-boot-activate

[scenario_verify_nodes_up]
log_marker      = Verify domain is up
script          = [verify]
state           = up

[scenario_verify_nodes_up]
log_marker      = Verify node1-4 are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

[scenario_create_volume_startshutdown_node_test]
log_marker      = Create volume volume_startshutdown_node_test
script          = [volume_startshutdown_node_test]
action          = create
delay_wait      = 5

[scenario_attach_volume_startshutdown_node_test]
log_marker      = Attach volume
script          = [volume_startshutdown_node_test]
action          = attach

[scenario_get_s3_autho_token]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_connection]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_put_s3_blob]
# Load some data into volume "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_startshutdown_node_test

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin



#Test node shutdown
[scenario_node_shutdown]
log_marker = Shutdown node2
script     = [node2]
action     = shutdown

[scenario_fork_io_workload2]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin


[scenario_put_s3_blob]
# Load some data into volume "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_startshutdown_node_test

#Test node start 
[scenario_node_start]
log_marker = Start node2
script     = [node2]
action     = start


[scenario_verify_nodes_are_up]
log_marker      = Verify all nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8


#Test node shutdown
[scenario_node_shutdown_2]
log_marker = Shutdown node3
script     = [node3]
action     = shutdown


[scenario_fork_io_workload2]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_put_s3_blob]
# Load some data into volume "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_startshutdown_node_test


#Test node start 
[scenario_node_start_2]
log_marker = Start node.
script     = [node3]
action     = start

[scenario_verify_nodes_are_up]
log_marker      = Verify all nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

#Test node shutdown on two nodes
[scenario_node_shutdown_3]
log_marker = Shutdown node2.
script     = [node2]
action     = shutdown

[scenario_node_shutdown_4]
log_marker = Shutdown node3.
script     = [node3]
action     = shutdown

[scenario_fork_io_workload2]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_put_s3_blob]
# Load some data into volume "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_startshutdown_node_test


#Test node start on two nodes
[scenario_node_start_3]
log_marker = Start node node2.
script     = [node2]
action     = start

[scenario_node_start_4]
log_marker = Start node node3.
script     = [node3]
action     = start

[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

[scenario_put_s3_blob]
# Load some data into volume "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_startshutdown_node_test

[scenario_fork_io_workload4]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

#Test node shutdown on three nodes
[scenario_node_shutdown_5]
log_marker = Shutdown node2.
script     = [node2]
action     = shutdown

[scenario_node_shutdown_6]
log_marker = Shutdown node3.
script     = [node3]
action     = shutdown

[scenario_node_shutdown_7]
log_marker = Shutdown node4.
script     = [node4]
action     = shutdown


[scenario_put_s3_blob]
# Load some data into volume "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_startshutdown_node_test

[scenario_fork_io_workload4]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test node shutdown on three nodes
[scenario_node_start_5]
log_marker = Start node2.
script     = [node2]
action     = start

[scenario_node_start_6]
log_marker = Start node3.
script     = [node3]
action     = start

[scenario_node_start_7]
log_marker = Start node4.
script     = [node4]
action     = start

[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

[scenario_put_s3_blob]
# Load some data into volume "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_startshutdown_node_test

[scenario_fork_io_workload4]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_closes_s3_connection]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]

[scenario_kill_and_clean_up]
log_marker      = Kill and cleanup
script          = [domain]
action          = kill-uninst
