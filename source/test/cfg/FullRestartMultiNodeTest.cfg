#
# Copyright 2015 Formation Data Systems, Inc.
#
# TEST RESOURCES and TOPOLOGY

# TEST DESCRIPTION
# - Multi Node setup
# - Upload an object
# - restart each service on each node ..
# - Verify the object

[user]
user_name       = root
password        = passwd

#========== Setup Nodes ===============
[node1]
om              = true
redis           = true
influxdb        = true
ip              = localhost
fds_root        = /fds/node1
fds_port        = 7000
services        = am,sm,dm

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = am,dm,sm

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = am,dm,sm

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = am,dm,sm

#========== Setup Volume ===============
[policy1]
iops_min = 100
iops_max = 500
priority = 1

[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

#========== Setup Domain and Data ===============
[scenario_0_1]
log_marker      = Install the domain
script          = [domain]
action          = install

[scenario_0_1_2_1]
log_marker      = Allow adding dms
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = prevent_adding_dm_after_startup.*,prevent_adding_dm_after_startup = false

[scenario_0_1_2_2]
log_marker      = Set PM to restart killed processes
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = restart_failed_children_process.*,restart_failed_children_processes = true

[scenario_0_1_2_3]
log_marker      = Allow service re-registration
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = allow_service_reregistration.*,allow_service_reregistration = true

[scenario_0_1_2_4]
log_marker      = Disable AM Caching
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = max_volume_data.*,max_volume_data = 0

[scenario_0_1_2_5]
log_marker      = Disable AM Caching
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = max_metadata_entries.*,max_metadata_entries = 0

[scenario_0_1_3]
log_marker      = Bring up the domain
script          = [domain]
action          = boot-activate

[scenario_0_2]
log_marker      = Verify all nodes are up
script          = [verify]
state           = up
fds_nodes       = node1,node2,node3,node4

[scenario_0_3]
log_marker      = Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 10

[scenario_0_4]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_0_6]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_0_7]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_0_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestPuts]
arg.bucket      = volume1
arg.count       = 20
arg.size        = 8K

[scenario_0_9a]
script          = [testcases.TestMgt.TestWait]
arg.delay       = 5

[scenario_0_10]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart AM - node1 ===============
[scenario_1_1_0]
log_marker      = Kill AM
script          = [service]
fds_node        = node1
service         = am
action          = kill
delay_wait      = 5

[scenario_1_1_1]
log_marker      = Verify AM is up
script          = [service]
fds_node        = node1
service         = am
action          = verifyup
delay_wait      = 5

[scenario_1_1_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart DM - node1 ===============
[scenario_1_2_0]
log_marker      = Kill DM
script          = [service]
fds_node        = node1
service         = dm
action          = kill
delay_wait      = 5

[scenario_1_2_1]
log_marker      = Verify DM is up
script          = [service]
fds_node        = node1
service         = dm
action          = verifyup
delay_wait      = 5

[scenario_1_2_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart SM - node1 ===============
[scenario_1_3_0]
log_marker      = Kill SM
script          = [service]
fds_node        = node1
service         = sm
action          = kill
delay_wait      = 5

[scenario_1_3_1]
log_marker      = Verify SM is up
script          = [service]
fds_node        = node1
service         = sm
action          = verifyup
delay_wait      = 5

[scenario_1_3_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart AM - node2 ===============
[scenario_2_1_0]
log_marker      = Kill AM
script          = [service]
fds_node        = node2
service         = am
action          = kill
delay_wait      = 5

[scenario_2_1_1]
log_marker      = Verify AM is up
script          = [service]
fds_node        = node2
service         = am
action          = verifyup
delay_wait      = 5

[scenario_2_1_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart DM - node2 ===============
[scenario_2_2_0]
log_marker      = Kill DM
script          = [service]
fds_node        = node2
service         = dm
action          = kill
delay_wait      = 5

[scenario_2_2_1]
log_marker      = Verify DM is up
script          = [service]
fds_node        = node2
service         = dm
action          = verifyup
delay_wait      = 5

[scenario_2_2_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart SM - node2 ===============
[scenario_2_3_0]
log_marker      = Kill SM
script          = [service]
fds_node        = node2
service         = sm
action          = kill
delay_wait      = 5

[scenario_2_3_1]
log_marker      = Verify SM is up
script          = [service]
fds_node        = node2
service         = sm
action          = verifyup
delay_wait      = 5

[scenario_2_3_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart AM - node3 ===============
[scenario_3_1_0]
log_marker      = Kill AM
script          = [service]
fds_node        = node3
service         = am
action          = kill
delay_wait      = 5

[scenario_3_1_1]
log_marker      = Verify AM is up
script          = [service]
fds_node        = node3
service         = am
action          = verifyup
delay_wait      = 5

[scenario_3_1_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart DM - node3 ===============
[scenario_3_2_0]
log_marker      = Kill DM
script          = [service]
fds_node        = node3
service         = dm
action          = kill
delay_wait      = 5

[scenario_3_2_1]
log_marker      = Verify DM is up
script          = [service]
fds_node        = node3
service         = dm
action          = verifyup
delay_wait      = 5

[scenario_3_2_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart SM - node3 ===============
[scenario_3_3_0]
log_marker      = Kill SM
script          = [service]
fds_node        = node3
service         = sm
action          = kill
delay_wait      = 5

[scenario_3_3_1]
log_marker      = Verify SM is up
script          = [service]
fds_node        = node3
service         = sm
action          = verifyup
delay_wait      = 5

[scenario_3_3_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart AM - node4 ===============
[scenario_4_1_0]
log_marker      = Kill AM
script          = [service]
fds_node        = node4
service         = am
action          = kill
delay_wait      = 5

[scenario_4_1_1]
log_marker      = Verify AM is up
script          = [service]
fds_node        = node4
service         = am
action          = verifyup
delay_wait      = 5

[scenario_4_1_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart DM - node4 ===============
[scenario_4_2_0]
log_marker      = Kill DM
script          = [service]
fds_node        = node4
service         = dm
action          = kill
delay_wait      = 5

[scenario_4_2_1]
log_marker      = Verify DM is up
script          = [service]
fds_node        = node4
service         = dm
action          = verifyup
delay_wait      = 5

[scenario_4_2_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Restart SM - node4 ===============
[scenario_4_3_0]
log_marker      = Kill SM
script          = [service]
fds_node        = node4
service         = sm
action          = kill
delay_wait      = 5

[scenario_4_3_1]
log_marker      = Verify SM is up
script          = [service]
fds_node        = node4
service         = sm
action          = verifyup
delay_wait      = 5

[scenario_4_3_2]
log_marker      = Verify bucket object
script          = [testcases.TestS3IntFace.TestGets]

#========== Cleanup ===============
[scenario_100]
log_marker      = Cleanup from test.
script          = [domain]
action          = kill-uninst
delay_wait      = 30
