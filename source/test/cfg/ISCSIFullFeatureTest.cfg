#
# Copyright 2016 Formation Data Systems, Inc.
#
# FDS Scenario configuration for running the iSCSI full feature suite.
#
# Use this suite to validate changes on a local build w/ static nodes.
# SCST service can be used with static nodes running on bare metal or
# a virtual machine. SCST service can be used with dynamic EC2 nodes.
# SCST service can not be used with container nodes. Each container
# would need it's own instance of the module, which is not possible with
# a shared kernel.

# Dependencies:
#
# - Python module 'python-scsi' built and installed on client
# - package 'open-iscsi' to be installed on client
# - package 'sg3-utils' installed on client

[user]
user_name       = root
password        = passwd

# Use this section to support installation from a deployable package.
[install]
# Where's the Ansible deployment script? (Can be a path relative to where the test is started.)
deploy-script-dir = ../../../ansible/scripts
# Which script?
deploy-script   = deploy_fds.sh
# Where's the Ansible inventory template file?
inventory-template = ansible-inventory/scst-local-static
# Is the deployable package pulled from a dev environment(local) or the nightly build (nightly)?
deb-location    = local

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM
om              = true
influxdb        = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for this node. Not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

[initiator1]
ip              = localhost

# TEST STEPS or CASES or SCENARIOS
# Names must be unique otherwise last stanza w/ the same name is used for all
# scenario steps with that name

[scenario_install_domain]
log_marker      = Domain install
script          = [domain]
action          = install

[scenario_config_scst]
log_marker      = Modify configs to enable AM scst
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
arg.current1    = scst_connector.*
arg.replace1    = scst_connector = true

[scenario_start_domain]
log_marker      = Bring up the domain
script          = [domain]
action          = boot-activate

#ToDo @pooja re-enable scenario once test runs against 4 nodes
#[scenario_wait_for_xdi]
#log_marker      = Wait for DLT deployment before continuing
#script          = [waitforlog]
#fds_node        = node1
#service         = om
#logentry        = OM deployed DLT with
#occurrences     = 1
#maxwait         = 180

[scenario_verify_node1_is_still_up1]
log_marker      = Verify everyone is still up.
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1

# The volume name 'vol60' was chosen intentionally to include the substring
# 'vol6', used by the iSCSI suite.
[scenario_1_0]
log_marker       = Create iSCSI volume 'vol60'
script           = [testcases.TestISCSIIntFace.TestISCSICrtVolume]
param_names      = name
params           = vol60

[scenario_1_1]
log_marker       = Discover iSCSI volume 'vol60'
script           = [testcases.TestISCSIIntFace.TestISCSIDiscoverVolume]
param_names      = initiator_name,volume_name
params           = initiator1,vol60

[scenario_1_2]
log_marker       = Find volume 'vol60' in volume list
script           = [testcases.TestISCSIIntFace.TestISCSIListVolumes]
param_names      = volume_name
params           = vol60

[scenario_1_3]
log_marker      = Attach iSCSI volume 'vol60'
script          = [testcases.TestISCSIIntFace.TestISCSIAttachVolume]
param_names     = initiator_name,volume_name
params          = initiator1,vol60

[scenario_1_4]
log_marker      = Make partition with filesystem ext4 on 'vol60'
script          = [testcases.TestISCSIIntFace.TestISCSIMakeFilesystem]
param_names     = initiator_name,volume_name
params          = initiator1,vol60

[scenario_2_0]
log_marker       = I/O workload 'vol60' sequential write
script           = [fork]
real-script      = [testcases.TestISCSIIntFace.TestISCSIFioSeqW]
param_names      = initiator_name,volume_name
params           = initiator1,vol60
  
[scenario_iscsi_tests]
log_marker       = Run iSCSI full feature suite.
script           = [testsuite.ISCSIFullFeatureSuite]

[scenario_join_child]
log_marker      = Join
script          = [join]
join_scenario   = scenario_2_0

[scenario_3_0]
log_marker      = Detach volume 'vol60'
script          = [testcases.TestISCSIIntFace.TestISCSIDetachVolume]
param_names     = initiator_name,volume_name
params          = initiator1,vol60

# Delete, Recreate volume
[scenario_3_1]
log_marker      = Delete volume 'vol60'
# Clears test fixture
script          = [testcases.TestISCSIIntFace.TestISCSIVolumeDelete]
param_names     = volume_name
params          = vol60

[scenario_4_0]
log_marker       = Create iSCSI volume 'vol60'
script           = [testcases.TestISCSIIntFace.TestISCSICrtVolume]
param_names      = name
params           = vol60

[scenario_4_1]
log_marker       = Discover iSCSI volume 'vol60'
script           = [testcases.TestISCSIIntFace.TestISCSIDiscoverVolume]
param_names      = initiator_name,volume_name
params           = initiator1,vol60

[scenario_4_2]
log_marker       = Find volume 'vol60' in volume list
script           = [testcases.TestISCSIIntFace.TestISCSIListVolumes]
param_names      = volume_name
params           = vol60

[scenario_4_3]
log_marker      = Attach iSCSI volume 'vol60'
script          = [testcases.TestISCSIIntFace.TestISCSIAttachVolume]
param_names     = initiator_name,volume_name
params          = initiator1,vol60

[scenario_4_4]
log_marker      = Make partition with filesystem ext4 on 'vol60'
script          = [testcases.TestISCSIIntFace.TestISCSIMakeFilesystem]
param_names     = initiator_name,volume_name
params          = initiator1,vol60

[scenario_5_0]
log_marker       = I/O workload 'vol60' sequential write
script           = [testcases.TestISCSIIntFace.TestISCSIFioSeqW]
param_names      = initiator_name,volume_name
params           = initiator1,vol60

[scenario_5_1]
log_marker      = Detach volume 'vol60'
script          = [testcases.TestISCSIIntFace.TestISCSIDetachVolume]
param_names     = initiator_name,volume_name
params          = initiator1,vol60

[scenario_verify_node1_is_still_up2]
log_marker      = Verify everyone is still up.
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1

# Shutdown not working here: fs-1882
[scenario_shutdown_domain_and clean_up]
log_marker      = Shut down the domain (includes uninstallation and Redis shutdown.)
script          = [domain]
action          = kill-uninst
