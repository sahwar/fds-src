#
# Copyright 2015 Formation Data Systems, Inc.
#
# Test volume create_snapshot and volume list_snapshots
#
#NOTE: This system test assumes domain is up and all services are running
#1. Create data load_one.generated and load_two.generated. Each of ~150MB
#2  Load file `load_one.generated` in vol1
#3  Create snapshot of vol1, with name snap1
#4. Put some more data (load_two.generated) into vol1
#5. Create snapshot of vol1 , with name snap2
#6. Create clone of the volume with time_line between snap1 and snap2, with name vol1_clone1
#7. Verify load_one.generated present in snap1
#8. Verify load_one.generated and load_one.generated in sanp2
#9. Verify load_one.generated in vol1_clone1
[user]
user_name = root
password = passwd

[node1]
om = true
redis = true
influxdb = true
ip = localhost
fds_root = /fds/node1
fds_port = 7000

[node2]
enable=true
ip = localhost
fds_root = /fds/node2
fds_port = 7000

[node3]
enable=true
ip = localhost
fds_root = /fds/node3
fds_port = 7000

[node4]
enable=true
ip = localhost
fds_root = /fds/node4
fds_port = 7000


[volume1]
client = node1
id     = 1
size   = 10000
access = object

[volume2]
client = node1
id     = 2
size   = 10000
access = object

[volume3]
client = node1
id     = 3
size   = 10000000
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_volmedia_1]
log_marker      = Bring up domain
script          = [domain]
action          = install-boot-activate

[scenario_verify_nodes_up]
log_marker      = Verify node nodes are up
script          = [verify]
state           = up

[scenario_create_volume1]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_generate_load_one]
log_marker      = Generate a large file to play with
script          = [testcases.TestMgt.TestGenerateFile]
arg.filename    = load_one.generated
# 157.28 MB
arg.size        = 157286400


[scenario_generate_load_two]
log_marker      = Generate a large file to play with
script          = [testcases.TestMgt.TestGenerateFile]
arg.filename    = load_two.generated
# 157.28 MB
arg.size        = 157286400

[scenario_get_s3_auth]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_conn]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]


[scenario_load_large_vol1_multi_part]
log_marker      = Load file falcor_large.generated on volume 1 with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
arg.bucket      = volume1
arg.verify      = true
arg.inputfile   = RESOURCES/load_one.generated
arg.key         = one

[scenario_create_snapshot_1]
log_marker      = Take snapshot1 of volume1
script          = [testcases.TestFDSSnapshotMgt.TestCreateSnapshot]
param_names     = volume_name,snapshot_name,retention
params          = volume1,snap1,3600
delay_wait      = 10

[scenario_io_vol1_load1]
log_marker      = Load file load_two.generated on volume 1 with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
arg.bucket      = volume1
arg.verify      = true
arg.inputfile   = RESOURCES/load_two.generated
arg.key         = two

[scenario_create_snapshot_2]
log_marker      = Take snapshot2 of volume1, name snap2
script          = [testcases.TestFDSSnapshotMgt.TestCreateSnapshot]
param_names     = volume_name,snapshot_name,retention
params          = volume1,snap2,3600

[scenario_volume_clone]
log_marker      = Create volume clone
script          = [testcases.TestFDSSnapshotMgt.TestCreateVolClone]
param_names     = volume_name,clone_name,snapshot_start,snapshot_end
params          = volume1,vol1_clone1,snap1,snap2

[scenario_verifydata_snap1_load1]
log_marker      = Compare file load_one.generated on volume1 with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = snap1
arg.key         = one
arg.comparefile = RESOURCES/load_one.generated

[scenario__verifydata_snap2_load1]
log_marker      = Compare file load_one.generated on volume1 with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = snap2
arg.key         = one
arg.comparefile = RESOURCES/load_one.generated

[scenario__verifydata_snap2_load2]
log_marker      = Compare file load_two.generated on volume1 with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = snap2
arg.key         = two
arg.comparefile = RESOURCES/load_two.generated

[scenario_verifydata_clone1_load1]
log_marker      = Compare file load_two.generated on volume1 with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = vol1_clone1
arg.key         = one
arg.comparefile = RESOURCES/load_one.generated

[scenario_closes_s3_connection]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]

[scenario_kill_and_clean_up]
log_marker      = Kill and cleanup
script          = [domain]
action          = kill-uninst

