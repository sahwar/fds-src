#
# Copyright 2015 Formation Data Systems, Inc.
#
# Test volume create_snapshot and volume list_snapshots
#
#NOTE: This system test assumes domain is up and all services are running
#1. Create volume vol1
#2 Load S3LoadVerifiableObject in vol1
#2. Create snapshot of vol1, with name snap1
#3. Put some more data (TestS3LoadMBLOB) into vol1
#4. Create snapshot of vol1 , with name snap2
#5. Create clone of the volume with timeline between snap1 and snap2, with name vol1_clone
#6. Check verifiable object is present in cloned volume

[user]
user_name = root
password = passwd

[node1]
om = true
redis = true
influxdb = true
ip = localhost
fds_root = /fds/node1
fds_port = 7000

[node2]
enable=true
ip = localhost
fds_root = /fds/node2
fds_port = 7000

[node3]
enable=true
ip = localhost
fds_root = /fds/node3
fds_port = 7000

[node4]
enable=true
ip = localhost
fds_root = /fds/node4
fds_port = 7000


[volume1]
client = node1
id     = 1
size   = 10000
access = object

[volume2]
client = node1
id     = 2
size   = 10000
access = object

[volume3]
client = node1
id     = 3
size   = 10000000
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_volmedia_1]
log_marker      = Bring up domain
script          = [domain]
action          = install-boot-activate

[scenario_verify_nodes_up]
log_marker      = Verify node nodes are up
script          = [verify]
state           = up

[scenario_create_volume1]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_get_s3_auth]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_conn]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_TestS3LoadVerifiableObject]
log_marker      = Load some data so we can verify its contents in clone.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_create_snapshot_1]
log_marker      = Take snapshot1 of volume1
script          = [testcases.TestFDSSnapshotMgt.TestCreateSnapshot]
param_names     = volume_name,snapshot_name,retention
params          = volume1,snap1,3600
delay_wait      = 10

[scenario_Vol1_IO2]
log_marker      = Load some data into volume1 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
param_names     = bucket
params          = volume1

[scenario_create_snapshot_2]
log_marker      = Take snapshot2 of volume1
script          = [testcases.TestFDSSnapshotMgt.TestCreateSnapshot]
param_names     = volume_name,snapshot_name,retention
params          = volume1,snap2,3600

[scenario_create_volume_clone1]
log_marker      = Create volume clone
script          = [testcases.TestFDSSnapshotMgt.TestCreateVolClone]
param_names     = volume_name,clone_name,snapshot_start,snapshot_end
params          = volume1,vol1_clone1,snap1,snap2

[scenario_verify_vol1clone1_data]
log_marker      = Validate object in a cloned volume1
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = vol1_clone1

[scenario_closes_s3_connection]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]

[scenario_kill_and_clean_up]
log_marker      = Kill and cleanup
script          = [domain]
action          = kill-uninst

