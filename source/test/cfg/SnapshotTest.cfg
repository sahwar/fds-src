#
# Copyright 2015 Formation Data Systems, Inc.
#
# Test volume_snapshot / volume_clone and data availability in clones/snapshots
#
#NOTE: This system test assumes domain is up and all services are running
#1. Create data load_one and load_two. Each of ~150MB
#2  Put file `load_one` in vol1
#3  Create snapshot of vol1, with name snap1
#4. Put file load_two into vol1
#5. Create snapshot of vol1 , with name snap2
#4. Put some more data (load_three) into vol1
#5. Create snapshot of vol1 , with name snap3
#7. List all snapshots for volume1

## Volume clone scenarios
#8. Create vol1_clone1 with timestamp such as `snapshot1_creation_time < timestamp <snapshot2_creation_time`.
#9. Create vol1_clone2 with timestamp such as `snapshot2_creation_time < timestamp <snapshot3_creation_time`
#10. Create vol1_clone3 with current timestamp
#11. Verify load_one in vol1_clone1
#12. Verify load_one and load_two are in vol1_clone2
#13. very load one,two,three all are present in vol1_clone3

[user]
user_name = root
password = passwd

[node1]
om = true
redis = true
influxdb = true
ip = localhost
fds_root = /fds/node1
fds_port = 7000

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300


[volume1]
client = node1
id     = 1
size   = 10000
access = object

[volume2]
client = node1
id     = 2
size   = 10000
access = object

[volume3]
client = node1
id     = 3
size   = 10000000
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_pre_install_cleanup]
log_marker      = Kill and cleanup prior to installation
script          = [domain]
action          = kill-uninst

[scenario_install_boot_activate]
log_marker      = Bring up domain
script          = [domain]
action          = install-boot-activate

[scenario_verify_nodes_up]
log_marker      = Verify node nodes are up
script          = [verify]
state           = up

[scenario_create_volume1]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_generate_load_one]
log_marker      = Generate a large file to play with
script          = [testcases.TestMgt.TestGenerateFile]
arg.filename    = load_one.generated
# 157.28 MB
arg.size        = 157286400


[scenario_generate_load_two]
log_marker      = Generate a large file to play with
script          = [testcases.TestMgt.TestGenerateFile]
arg.filename    = load_two.generated
# 157.28 MB
arg.size        = 157286400

[scenario_generate_load_three]
log_marker      = Generate a load three file to play with
script          = [testcases.TestMgt.TestGenerateFile]
arg.filename    = load_three.generated
# 157.28 MB
arg.size        = 157286400

########## Load generated data and take snapshots ##########

[scenario_get_s3_auth_1]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_conn_1]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]


[scenario_load_one_vol1_multi_part]
log_marker      = Load file load_one.generated on volume 1 with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
arg.bucket      = volume1
arg.verify      = true
arg.inputfile   = RESOURCES/load_one.generated
arg.key         = one

[scenario_create_snapshot_1]
log_marker      = Take snapshot1 of volume1
script          = [testcases.TestFDSSnapshotMgt.TestCreateSnapshot]
param_names     = volume_name,snapshot_name,retention
params          = volume1,snap1,3600

[scenario_wait_1]
log_marker      = Wait some time after creating snapshot1
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to have significant time between snapshots

[scenario_load_two_vol1_multi_part]
log_marker      = Load file load_two.generated on volume 1 with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
arg.bucket      = volume1
arg.verify      = true
arg.inputfile   = RESOURCES/load_two.generated
arg.key         = two

[scenario_create_snapshot_2]
log_marker      = Take snapshot2 of volume1, name snap2
script          = [testcases.TestFDSSnapshotMgt.TestCreateSnapshot]
param_names     = volume_name,snapshot_name,retention
params          = volume1,snap2,3600

[scenario_wait_2]
log_marker      = Wait some time after creating snapshot2
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5, to have significant time between snapshots

[scenario_load_three_vol1_multi_part]
log_marker      = Load file load_three.generated on volume 1 with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
arg.bucket      = volume1
arg.verify      = true
arg.inputfile   = RESOURCES/load_three.generated
arg.key         = three

[scenario_create_snapshot_3]
log_marker      = Take snapshot3 of volume1, name snap3
script          = [testcases.TestFDSSnapshotMgt.TestCreateSnapshot]
param_names     = volume_name,snapshot_name,retention
params          = volume1,snap3,3600

[scenario_list_snapshots_of_volume1]
log_marker      = List all snapshots of volume1
script          = [volume1]
action          = list_snapshot

## --------------------------------------------------------------##


########## Create Volume clones with different timelines ##########

#This scenario creates volume clone from timeline with timestamp greater than snap1.creation_time and less than snap2.creationtime
[scenario_vol1_clone1_from_timeline]
log_marker      = Create  vol1_clone1 at time some where between snapshot1 and snapshot2
script          = [testcases.TestFDSSnapshotMgt.TestCreateVolClone]
param_names     = volume_name,clone_name,snapshot_start,snapshot_end
params          = volume1,vol1_clone1,snap1,snap2

[scenario_volume_clone2_from_timeline]
log_marker      = Create vol1_clone2 at timestamp greater than snapshot2 creation time abd less than snap3.creationtime
script          = [testcases.TestFDSSnapshotMgt.TestCreateVolClone]
param_names     = volume_name,clone_name,snapshot_end
params          = volume1,vol1_clone2,snap3

[scenario_volume_clone3_from_timeline]
log_marker      = Create vol1_clone2 at timestamp greater than snapshot2 creation time abd less than snap3.creationtime
script          = [testcases.TestFDSSnapshotMgt.TestCreateVolClone]
# if snapshot_start and stanshot_end are not passed then clone from current time
param_names     = volume_name,clone_name
params          = volume1,vol1_clone3

## --------------------------------------------------------------##


########## Verify data in volume clones ##########

[scenario_get_s3_auth_2]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_conn_2]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_verifydata_clone1_load1]
log_marker      = Compare file load_one.generated in vol1_clone1
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = vol1_clone1
arg.key         = one
arg.comparefile = RESOURCES/load_one.generated

[scenario_verifydata_clone2_load1]
log_marker      = Compare file load_one.generated on vol1_clone2
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = vol1_clone2
arg.key         = one
arg.comparefile = RESOURCES/load_one.generated

[scenario_verifydata_clone2_load2]
log_marker      = Compare file load_two.generated on vol1_clone2
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = vol1_clone2
arg.key         = two
arg.comparefile = RESOURCES/load_two.generated

[scenario_verifydata_clone3_load1]
log_marker      = Compare file load_one.generated on vol1_clone3
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = vol1_clone3
arg.key         = one
arg.comparefile = RESOURCES/load_one.generated

[scenario_verifydata_clone3_load2]
log_marker      = Compare file load_two.generated on vol1_clone3
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = vol1_clone3
arg.key         = two
arg.comparefile = RESOURCES/load_two.generated

[scenario_verifydata_clone3_load3]
log_marker      = Compare file load_three.generated on vol1_clone3
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = vol1_clone3
arg.key         = three
arg.comparefile = RESOURCES/load_three.generated

## --------------------------------------------------------------##

[scenario_closes_s3_connection]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]

[scenario_kill_and_clean_up]
log_marker      = Kill and cleanup
script          = [domain]
action          = kill-uninst
