#
# Copyright 2015 Formation Data Systems, Inc.
#
# Test volume_snapshot / volume_clone and data availability in clones/snapshots
#
#1. Create data.generated file of ~150MB
#2  Put data.generated with key 'one' take snapshot, repeat same with key two and three
#3. List all snapshots for volumeObj

## Volume clone scenarios
#4. Create volumeObj_clone1 with timestamp `snap1.creation_time < timestamp <snap2.creation_time`.
#5. Create volumeObj_clone2 with timestamp such as `snap2 creation_time < timestamp < snap3 creation_time`
#6. Create volumeObj_clone3 with current timestamp
#7. Verify keys in each cloned volume
#8. Test timeline for all volumes with daily, weekly, monthly and yearly snapshots
#9. Delete key from cloned volume,create clone of clone, verify keys in clone_of_clone

[user]
user_name = root
password = passwd

[node1]
om = true
redis = true
influxdb = true
ip = localhost
fds_root = /fds/node1
fds_port = 7000

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300


[volumeObj]
client = node1
id     = 1
size   = 10000
access = object
snapshot_policy = 1

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_kill_and_clean_pre_install]
log_marker      = Kill and cleanup prior to installation
script          = [domain]
action          = kill-uninst

[scenario_install_boot_activate]
log_marker      = Bring up domain
script          = [domain]
action          = install-boot-activate

[scenario_verify_nodes_up]
log_marker      = Verify node nodes are up
script          = [verify]
state           = up

[scenario_create_volumeObj]
log_marker      = Create volume volumeObj
script          = [volumeObj]
action          = create
delay_wait      = 5

[scenario_generate_data]
log_marker      = Generate a large file to play with
script          = [testcases.TestMgt.TestGenerateFile]
arg.filename    = data.generated
# Size is in bytes. This is ~52MB
arg.size        = 52428800

########## Store generated data with different keys and take snapshots ##########

[scenario_get_s3_auth_1]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_conn_1]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]


[scenario_load_one_volumeObj_multi_part]
log_marker      = Load file data.generated on volumeObj with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
arg.bucket      = volumeObj
arg.verify      = true
arg.inputfile   = RESOURCES/data.generated
arg.key         = one

[scenario_create_snapshot_1]
log_marker      = Take snapshot1 of volumeObj
script          = [testcases.TestFDSSnapshotMgt.TestCreateSnapshot]
param_names     = volume_name,snapshot_name,retention
params          = volumeObj,snap1,3600

[scenario_load_two_volumeObj_multi_part]
log_marker      = Load file data.generated on volumeObj with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
arg.bucket      = volumeObj
arg.verify      = true
arg.inputfile   = RESOURCES/data.generated
arg.key         = two

[scenario_create_snapshot_2]
log_marker      = Take snapshot2 of volumeObj, name snap2
script          = [testcases.TestFDSSnapshotMgt.TestCreateSnapshot]
param_names     = volume_name,snapshot_name,retention
params          = volumeObj,snap2,3600

[scenario_load_three_volumeObj_multi_part]
log_marker      = Load file data.generated on volumeObj with S3's multi-part upload
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
arg.bucket      = volumeObj
arg.verify      = true
arg.inputfile   = RESOURCES/data.generated
arg.key         = three

[scenario_list_snapshots_of_volumeObj]
log_marker      = List all snapshots of volumeObj
script          = [volumeObj]
action          = list_snapshot

## --------------------------------------------------------------##

########## Create Volume clones with different timelines ##########

#This scenario creates volume clone from timeline with timestamp greater than snap1.creation_time and less than snap2.creationtime
[scenario_create_volobj_clone1]
log_marker      = Create  volumeObj_clone1 at time some where between snapshot1 and snapshot2
script          = [testcases.TestFDSSnapshotMgt.TestCreateVolClone]
param_names     = volume_name,clone_name,snapshot_start,snapshot_end
params          = volumeObj,volumeObj_clone1,snap1,snap2

[scenario_create_volobj_clone2]
log_marker      = Create volumeObj_clone2 at timestamp greater than snapshot2 creation time
script          = [testcases.TestFDSSnapshotMgt.TestCreateVolClone]
param_names     = volume_name,clone_name,snapshot_end
params          = volumeObj,volumeObj_clone2,snap2

[scenario_create_volobj_clone3]
log_marker      = Create volumeObj_clone3 with timestamp=now
script          = [testcases.TestFDSSnapshotMgt.TestCreateVolClone]
# if snapshot_start and stapshot_end are not passed then clone from current time
param_names     = volume_name,clone_name
params          = volumeObj,volumeObj_clone3

## --------------------------------------------------------------##


########## Verify data in volume clones ##########

[scenario_get_s3_auth_2]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_conn_2]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_verifydata_clone1]
log_marker      = Compare file data.generated in volumeObj_clone1
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = volumeObj_clone1
arg.key         = one
arg.comparefile = RESOURCES/data.generated

[scenario_verifydata_clone2]
log_marker      = Compare file data.generated on volumeObj_clone2
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = volumeObj_clone2
arg.key         = one,two
arg.comparefile = RESOURCES/data.generated

[scenario_verifydata_clone3]
log_marker      = Compare file data.generated on volumeObj_clone3
script          = [testcases.TestS3IntFace.TestS3VerifyFBLOB]
arg.bucket      = volumeObj_clone3
arg.key         = one,two,three
arg.comparefile = RESOURCES/data.generated

## --------------------------------------------------------------##

########## create clone of a cloned volume and very data ##########

[scenario_delete_key_one_volumeObj_clone2]
log_marker      = Delete key "one" from volumeObj_clone2
script          = [testcases.TestS3IntFace.TestS3DelKey]
arg.bucket      = volumeObj_clone2
arg.verify      = true
arg.key         = one

[scenario_key_deleted_from_volumeObj_clone2]
log_marker      = Re-confirmation: key "one" is not present in volumeObj_clone1
script          = [testcases.TestS3IntFace.TestS3verifyKeyPresent]
arg.bucket      = volumeObj_clone2
arg.key         = one
# If expect_failure is not passed default value is false
arg.expect_failure = true

[scenario_clone_cloned_vol_from_timeline]
log_marker      = Create clone_of_clone with current time
script          = [testcases.TestFDSSnapshotMgt.TestCreateVolClone]
param_names     = volume_name,clone_name
params          = volumeObj_clone2,clone_of_clone

[scenario_verify_one_not_present_in_clone_of_clone]
log_marker      = verify key one is NOT present in clone_of_clone
script          = [testcases.TestS3IntFace.TestS3verifyKeyPresent]
arg.bucket      = clone_of_clone
arg.key         = one
# if not expect_failure is not passed default value is false
arg.expect_failure = true

[scenario_verify_two_is_present_in_clone_of_clone]
log_marker      = verify key two is present in clone_of_clone
script          = [testcases.TestS3IntFace.TestS3verifyKeyPresent]
arg.bucket      = clone_of_clone
arg.key         = two

## --------------------------------------------------------------##

[scenario_closes_s3_connection]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]

[scenario_test_timeline]
log_marker      = test timeline feature by changing dates
script          = [testcases.TestFDSSnapshotMgt.TestTimeline]

[scenario_remove_generated_data]
log_marker      = Remove data.generated large file
script          = [testcases.TestMgt.TestRemoveFile]
arg.filename    = data.generated

[scenario_kill_and_clean]
log_marker      = Kill and clean the domain
script          = [domain]
action          = kill-uninst
