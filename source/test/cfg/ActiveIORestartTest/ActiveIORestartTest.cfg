#
# Copyright 2015 Formation Data Systems, Inc.
#

# TEST DESCRIPTION
# This test is meant to be run on a multi-node system.
# The test will first verify that I/O is working and that a set of data is written
# and verified. It will then go through and kill one service on one node at a time.
# Depending on the current code base, the expectation is different.
# At this time, having a service (AM/SM/DM) restarted will disrupt I/O.
# Eventually, the goal of this test is to experience no downtime when multiple services
# are restarted, so the system is resilient when services/node go down.

# This ID is used as a default for running shell commands.
[user]
# The values given here are actually the defaults.
user_name       = root
password        = passwd
# sudo_password can be overridden on the command
# line with a -d option.
sudo_password   = dummy


# Use this section to support installation from a deployable package.
[install]
# Where's the Ansible deployment script? (Can be a path relative to where the test is started.)
deploy-script-dir = ../../../ansible/scripts
# Which script?
deploy-script   = deploy_fds.sh
# Where's the Ansible inventory template file?
inventory-template = ansible-inventory/generic-lxc-nodes
# Is the deployable package pulled from a dev environment(local) or the nightly build (nightly)?
deb-location    = nightly

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
#ip              = lxc-node-01
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

[node2]
enable          = true
ip              = localhost
#ip              = lxc-node-02
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm,am

[node3]
enable          = true
ip              = localhost
#ip              = lxc-node-03
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm

[node4]
enable          = true
ip              = localhost
#ip              = lxc-node-04
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm

# The 'policy' section defines a volume policy
#
[policy1]
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

[volume2]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

[volume3]
# Name of the server AM node to attach to
client = node2
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# TEST STEPS or CASES or SCENARIOS

[scenario_0_1]
log_marker      = Install the domain
script          = [domain]
action          = install

[scenario_0_1_2]
log_marker      = Change platform.conf
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = prevent_adding_dm_after_startup.*,prevent_adding_dm_after_startup = false

[scenario_0_1_2a]
log_marker      = Change platform.conf
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = restart_failed_children_process.*,restart_failed_children_processes = true

[scenario_0_1_3]
log_marker      = Bring up the domain
script          = [domain]
action          = boot-activate

[scenario_0_3]
log_marker      = Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 5

[scenario_0_4]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_0_5]
log_marker      = Attach volume volume1
script          = [volume1]
action          = attach




###################################################################
# Test shooting AM under load.                                    #
###################################################################
[scenario_fork_io_am]
log_marker      = Run some IO on a separate process for AM kill
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/Child_IO_DontVerifyDelete_Vol1.cfg

[scenario_let_io_get_underway_am]
log_marker      = Allow some time for the I/O process to get underway for AM kill
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to let the I/O process to get underway

[scenario_kill_am]
log_marker      = Kill AM service on node node1
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1,am,5-10
delay_wait      = 5

[scenario_wait_for_pm_to_see_bare_am_die]
log_marker      = Wait for PM to see AM die
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = Discovered an exited bare_am process, also bringing down XDI
occurrences     = 1
maxwait         = 60

[scenario_wait_for_pm_to_kill_XDI]
log_marker      = Wait for PM to kill XDI or see it die
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = Preparing to stop com.formationds.am.Main via kill(pid, SIGTERM)
occurrences     = 1
maxwait         = 60

[scenario_wait_for_pm_to_reboot_bare_am]
log_marker      = Wait for PM to reboot bare_am
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = bare_am started by platformd
# We'll already have one for the initial boot.
occurrences     = 2
maxwait         = 60

[scenario_wait_for_pm_to_reboot_xdi]
log_marker      = Wait for PM to reboot XDI
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = com.formationds.am.Main started by platformd
# We'll already have one for the initial boot.
occurrences     = 2
maxwait         = 60

[scenario_join_am]
log_marker      = Join I/O process for AM kill
script          = [join]
join_scenario   = scenario_fork_io_am



###################################################################
# The next sequence of tests may be used to repro FS-2604.        #
###################################################################
###################################################################
# Test shooting AM under load, this time while verifying DELETEs  #
# (which has proved troublesome ... FS-2604).                     #
###################################################################
[scenario_fork_io_am_verify_delete]
log_marker      = Run some IO on a separate process for AM kill
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/Child_IO_VerifyDelete_Vol1.cfg

[scenario_let_io_get_underway_am_verify_delete]
log_marker      = Allow some time for the I/O process to get underway for AM kill
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 10,to let the I/O process to get underway

[scenario_kill_am_verify_delete]
log_marker      = Kill AM service on node node1
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1,am,5-10
delay_wait      = 15

[scenario_wait_for_pm_to_see_bare_am_die_verify_delete]
log_marker      = Wait for PM to see AM die
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = Discovered an exited bare_am process, also bringing down XDI
occurrences     = 2
maxwait         = 60

[scenario_wait_for_pm_to_kill_XDI_verify_delete]
log_marker      = Wait for PM to kill XDI or see it die
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = Preparing to stop com.formationds.am.Main via kill(pid, SIGTERM)
occurrences     = 2
maxwait         = 60

[scenario_wait_for_pm_to_reboot_bare_am_verify_delete]
log_marker      = Wait for PM to reboot bare_am
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = bare_am started by platformd
# We'll already have one for the initial boot.
occurrences     = 3
maxwait         = 60

[scenario_wait_for_pm_to_reboot_xdi_verify_delete]
log_marker      = Wait for PM to reboot XDI
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = com.formationds.am.Main started by platformd
# We'll already have one for the initial boot.
occurrences     = 3
maxwait         = 60

[scenario_join_am_verify_delete]
log_marker      = Join I/O process for AM kill
script          = [join]
join_scenario   = scenario_fork_io_am_verify_delete

[scenario_let_am_get_ready_verify_delete]
log_marker      = Allow some time for AM to recover from reboot.
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 15,to let AM recovery from reboot

[scenario_2_7]
log_marker      = Verify that PM has restarted killed services and everyone else is up.
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4
###################################################################
# End repro of FS-2604.                                           #
###################################################################



###################################################################
# The next sequence of tests may be used to repro FS-2578, FS-2579#
# and FS-2580.                                                    #
###################################################################
###################################################################
# Test shooting DM under load.                                    #
###################################################################
[scenario_fork_io_dm_node2]
log_marker      = Run some IO on a separate process for DM kill
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/Child_IO_DontVerifyDelete_Vol1.cfg

[scenario_let_io_get_underway_dm_node2]
log_marker      = Allow some time for the I/O process to get underway for DM kill
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to let the I/O process to get underway

[scenario_kill_dm_node2]
log_marker      = Kill DM service on node node2
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node2,dm,0-5
delay_wait      = 5

[scenario_wait_for_pm_to_see_dm_die_node2]
log_marker      = Wait for PM to see SM die
script          = [waitforlog]
fds_node        = node2
service         = pm
logentry        = exited unexpectedly
occurrences     = 1
maxwait         = 60

[scenario_wait_for_pm_to_reboot_dm_node2]
log_marker      = Wait for PM to reboot DM
script          = [waitforlog]
fds_node        = node2
service         = pm
logentry        = DataMgr started by platformd
# We'll already have one for the initial boot.
occurrences     = 2
maxwait         = 60

[scenario_join_dm_node2]
log_marker      = Join I/O process for DM kill
script          = [join]
join_scenario   = scenario_fork_io_dm_node2
###################################################################
# End repro of FS-2578, FS-2579 and FS-2580.                      #
###################################################################




###################################################################
# The next sequence of tests may be used to repro FS-2601.        #
###################################################################
###################################################################
# Test shooting another DM under load, mainly in case the one     #
# chosen earlier wasn't a primary DM for our volume.              #
###################################################################
[scenario_fork_io_dm_node1]
log_marker      = Run some IO on a separate process for DM kill
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/Child_IO_DontVerifyDelete_Vol1.cfg

[scenario_let_io_get_underway_dm_node1]
log_marker      = Allow some time for the I/O process to get underway for DM kill
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to let the I/O process to get underway

[scenario_kill_dm_node1]
log_marker      = Kill DM service on node node1
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1,dm,0-5
delay_wait      = 5

[scenario_wait_for_pm_to_reboot_dm_node1]
log_marker      = Wait for PM to reboot DM
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = DataMgr started by platformd
# We'll already have one for the initial boot.
occurrences     = 2
maxwait         = 60

[scenario_join_dm_node1]
log_marker      = Join I/O process for DM kill
script          = [join]
join_scenario   = scenario_fork_io_dm_node1
###################################################################
# End repro of FS-2601.                                           #
###################################################################



###################################################################
# Test shooting SM under load.                                    #
###################################################################
[scenario_fork_io_sm_node3]
log_marker      = Run some IO on a separate process for SM kill
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/Child_IO_DontVerifyDelete_Vol1.cfg

[scenario_let_io_get_underway_sm_node3]
log_marker      = Allow some time for the I/O process to get underway for SM kill
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 10,to let the I/O process to get underway

[scenario_kill_sm_node3]
log_marker      = Kill SM service on node node3
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node3,sm,0-5
delay_wait      = 15

[scenario_wait_for_pm_to_see_sm_die_node3]
log_marker      = Wait for PM to see SM die
script          = [waitforlog]
fds_node        = node3
service         = pm
logentry        = exited unexpectedly
occurrences     = 1
maxwait         = 60

[scenario_wait_for_pm_to_reboot_sm_node3]
log_marker      = Wait for PM to reboot SM
script          = [waitforlog]
fds_node        = node3
service         = pm
logentry        = StorMgr started by platformd
# We'll already have one for the initial boot.
occurrences     = 2
maxwait         = 60

[scenario_join_sm_node3]
log_marker      = Join I/O process for SM kill
script          = [join]
join_scenario   = scenario_fork_io_sm_node3

[scenario_let_sm_get_ready_node3]
log_marker      = Allow some time for SM to recover from reboot.
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 15,to let SM recovery from reboot


###################################################################
# Test shooting another SM under load, mainly in case the one     #
# chosen earlier wasn't a primary SM for our objects.             #
###################################################################
[scenario_fork_io_sm_node1]
log_marker      = Run some IO on a separate process for SM kill
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/Child_IO_DontVerifyDelete_Vol1.cfg

[scenario_let_io_get_underway_sm_node1]
log_marker      = Allow some time for the I/O process to get underway for SM kill
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 10,to let the I/O process to get underway

[scenario_kill_sm_node1]
log_marker      = Kill SM service on node node1
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1,sm,0-5
delay_wait      = 15

[scenario_wait_for_pm_to_reboot_sm_node1]
log_marker      = Wait for PM to reboot SM
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = StorMgr started by platformd
# We'll already have one for the initial boot.
occurrences     = 2
maxwait         = 60

[scenario_join_sm_node1]
log_marker      = Join I/O process for SM kill
script          = [join]
join_scenario   = scenario_fork_io_sm_node1

[scenario_let_sm_get_ready_node1]
log_marker      = Allow some time for SM to recover from reboot.
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 15,to let SM recovery from reboot


###################################################################
# Create and attach another volume                                #
###################################################################
[scenario_create_vol2]
log_marker      = Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 5

[scenario_attach_vol2]
log_marker      = Attach volume volume2
script          = [volume2]
action          = attach

###################################################################
# Volume2 is originally attached to the AM on node 1. We'll start some I/O
# against both volumes, kill the AM, allow it to reboot, but try to attach
# volume2 to the AM on node2 while allowing volume1 to stay with node1.
###################################################################
[scenario_fork_io_vol1_am1&2]
log_marker      = Run some IO on a separate process for vol1
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/Child_IO_DontVerifyDelete_Vol1.cfg

[scenario_fork_io_vol2_am1&2]
log_marker      = Run some IO on a separate process for vol2 kill
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/Child_IO_DontVerifyDelete_Vol2.cfg

[scenario_let_io_get_underway_am1&2]
log_marker      = Allow some time for the I/O process to get underway for AM kill
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 5,to let the I/O process to get underway

[scenario_kill_am1_am1&2]
log_marker      = Kill AM service on node node1
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1,am,5-10
delay_wait      = 5

[scenario_wait_for_pm_to_see_bare_am1_die_am1&2]
log_marker      = Wait for PM to see AM die
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = Discovered an exited bare_am process, also bringing down XDI
occurrences     = 1
maxwait         = 60

[scenario_wait_for_pm_to_kill_XDI1_am1&2]
log_marker      = Wait for PM to kill XDI or see it die
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = Preparing to stop com.formationds.am.Main via kill(pid, SIGTERM)
occurrences     = 1
maxwait         = 60

[scenario_wait_for_pm_to_reboot_bare_am1_am1&2]
log_marker      = Wait for PM to reboot bare_am
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = bare_am started by platformd
# We'll already have one for the initial boot.
occurrences     = 2
maxwait         = 60

[scenario_wait_for_pm_to_reboot_xdi1_am1&2]
log_marker      = Wait for PM to reboot XDI
script          = [waitforlog]
fds_node        = node1
service         = pm
logentry        = com.formationds.am.Main started by platformd
# We'll already have one for the initial boot.
occurrences     = 2
maxwait         = 60

[scenario_join_io_vol1_am1&2]
log_marker      = Join I/O process for AM1
script          = [join]
join_scenario   = scenario_fork_io_vol1_am1&2

[scenario_join_io_vol2_am1&2]
log_marker      = Join I/O process for AM2
script          = [join]
join_scenario   = scenario_fork_io_vol2_am1&2




[scenario_create_vol3]
log_marker      = Create volume volume3
script          = [volume3]
action          = create
delay_wait      = 5

[scenario_attach_vol3]
log_marker      = Attach volume volume3
script          = [volume3]
action          = attach




###################################################################
# From here forward needs some TLC.                               #
###################################################################
[scenario_get_s3_token_trafficgen]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_connection_trafficgen]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_2_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,timeout
params          = localhost,1,PUT,admin,30

[scenario_2_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_3]
log_marker      = Run some IO on a separate process
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,120,PUT,admin

[scenario_3_0]
log_marker      = Kill DM service on RANDOM node
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1 node2 node3 node4,dm,0-5
delay_wait      = 10

[scenario_3_7]
log_marker      = Verify that PM has started DM again, and everyone else is up.
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

[scenario_3_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,timeout
params          = localhost,1,PUT,admin,30
delay_wait      = 5

[scenario_3_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_3_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_4]
log_marker      = Run some IO on a separate process
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,120,PUT,admin

log_marker      = Kill SM or AM service on RANDOM node
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1 node2 node3 node4,sm am,0-5
delay_wait      = 10

# Takes 60 sec for DM to realize service is gone.
[scenario_4a]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 70,to let the service rejoin

[scenario_4_1]
log_marker      = Verify that PM has started service again, and everyone else is up.
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

[scenario_4_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,timeout
params          = localhost,1,PUT,admin,30

[scenario_4_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_4_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_5]
log_marker      = Run some IO on a separate process
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,120,PUT,admin

# FAILS due to FS-2010
#[scenario_5_0]
#log_marker      = Kill ONLY the OM on Node1
#script          = [service]
#fds_node        = node1
#service         = om
#action          = kill
#delay_wait      = 3

[scenario_5_2]
log_marker      = Verify that local services are still running
script          = [service]
fds_node        = node1
service         = am
action          = verifyup

[scenario_5_3]
script          = [service]
fds_node        = node1
service         = pm
action          = verifyup

[scenario_5_4]
script          = [service]
fds_node        = node1
service         = dm
action          = verifyup

[scenario_5_5]
script          = [service]
fds_node        = node1
service         = sm
action          = verifyup

[scenario_5_6]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,timeout
params          = localhost,1,PUT,admin,30

#[scenario_5_7]
#log_marker      = Restart the OM on Node1 and wait 30 seconds
#script          = [service]
#fds_node        = node1
#service         = om
#action          = boot
#delay_wait      = 30

[scenario_5_7b]
log_marker      = Verifies that the OM servies are started
script          = [testcases.TestFDSServiceMgt.TestOMWait]

[scenario_5_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,timeout
params          = localhost,1,PUT,admin,30

[scenario_5_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_5_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_6]
log_marker      = Run some IO on a separate process
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,120,PUT,admin

# Fails due to FS-2009
#[scenario_6_0]
#log_marker      = Kill ONLY the PM on Node1
#script          = [service]
#fds_node        = node1
#service         = pm
#action          = kill
#delay_wait      = 3

[scenario_6_2]
log_marker      = Verify that local services are still running
script          = [service]
fds_node        = node1
service         = am
action          = verifyup

[scenario_6_3]
script          = [service]
fds_node        = node1
service         = om
action          = verifyup

[scenario_6_4]
script          = [service]
fds_node        = node1
service         = dm
action          = verifyup

[scenario_6_5]
script          = [service]
fds_node        = node1
service         = sm
action          = verifyup

[scenario_6_6]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,timeout
params          = localhost,1,PUT,admin,30

#[scenario_6_7]
#log_marker      = Restart the PM on Node1 and wait 30 seconds
#script          = [service]
#fds_node        = node1
#service         = pm
#action          = boot
#delay_wait      = 30



[scenario_6_6]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,timeout
params          = localhost,1,PUT,admin,30

[scenario_6_7b]
log_marker      = Verifies that the PM servies are started
script          = [testcases.TestFDSServiceMgt.TestPMWait]

[scenario_6_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,timeout
params          = localhost,1,PUT,admin,30

[scenario_6_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_6_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_15_5]
log_marker      = Cleanup from test.
script          = [domain]
action          = kill-uninst
delay_wait      = 60
