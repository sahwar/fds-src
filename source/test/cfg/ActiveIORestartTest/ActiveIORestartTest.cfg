#
# Copyright 2015 Formation Data Systems, Inc.
#

# TEST DESCRIPTION
# This test is meant to verify storage platform behavior when experiencing
# service unavailability against the behavior specified in the DM and SM Redundancy Group
# State Consistency and Fault Tolerance for Service Availability specification
# (https://formationds.atlassian.net/wiki/pages/viewpage.action?pageId=28541235).



# This ID is used as a default for running shell commands.
[user]
# The values given here are actually the defaults.
user_name       = root
password        = passwd
# sudo_password can be overridden on the command
# line with a -d option.
sudo_password   = dummy


# Use this section to support installation from a deployable package.
[install]
# Where's the Ansible deployment script? (Can be a path relative to where the test is started.)
deploy-script-dir = ../../../ansible/scripts
# Which script?
deploy-script   = deploy_fds.sh
# Where's the Ansible inventory template file?
inventory-template = ansible-inventory/generic-lxc-nodes
# Is the deployable package pulled from a dev environment(local) or the nightly build (nightly)?
deb-location    = nightly

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
#ip              = lxc-node-01
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
services        = dm,sm,am

[node2]
enable          = true
ip              = localhost
#ip              = lxc-node-02
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm,am

[node3]
enable          = true
ip              = localhost
#ip              = lxc-node-03
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm

[node4]
enable          = true
ip              = localhost
#ip              = lxc-node-04
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

[volume2]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

[volume3]
# Name of the server AM node to attach to
client = node2
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# TEST STEPS or CASES or SCENARIOS



###################################################################
# Preliminaries.
###################################################################
[scenario_domain_install]
log_marker      = Install the domain
script          = [domain]
action          = install

[scenario_config_adjust_1]
log_marker      = Change platform.conf to allow DM additions after boot up
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = prevent_adding_dm_after_startup.*,prevent_adding_dm_after_startup = false

[scenario_config_adjust_2]
log_marker      = Change platform.conf to allow failed services to be restarted by PM
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string
params          = restart_failed_children_process.*,restart_failed_children_processes = true

[scenario_domain_boot]
log_marker      = Boot up the domain
script          = [domain]
action          = boot-activate


[scenario_volume1_create]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_volume1_attach]
log_marker      = Attach volume volume1
script          = [volume1]
action          = attach




###################################################################
# Populate volume volume1 and start a READ client that will persist
# throughout the remainder of the test.
###################################################################
[scenario_create_volume1_content_fork]
log_marker      = Run test cases to create volume1 content.
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/S3/IO_volume1_C.cfg

[scenario_join_create_volume1_content_fork]
log_marker      = Join "create volume1 content" forked test
script          = [join]
join_scenario   = scenario_create_volume1_content_fork

[scenario_read_volume1_client_fork]
log_marker      = Run test cases to load and then continually read volume1.
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/S3/IO_volume1_R.cfg




###################################################################
# Test shooting AM under load.
#
# We expect the application to notice that AM went away but be
# able to continue after a retry or two.
###################################################################
[scenario_shoot_am_under_load_fork]
log_marker      = Run test cases to shoot AM under load.
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/ShootAMUnderLoad.cfg

[scenario_join_shoot_am_under_load_fork]
log_marker      = Join "Shoot AM" forked test
script          = [join]
join_scenario   = scenario_shoot_am_under_load_fork



###################################################################
# The next sequence of tests may be used to repro FS-2604. The
# problem is in the configuration of Boto and results in a slow
# repeat of the above test, but with added verification that the
# DELETEs actually took place.
###################################################################
#[scenario_shoot_am_verify_delete_under_load_fork]
#log_marker      = Run test cases to shoot AM under load.
#script          = [fork]
#real-script     = [scenario]
#fds-scenario    = ../cfg/ActiveIORestartTest/ShootAMUnderLoad_VerifyDelete.cfg
#
#[scenario_join_shoot_am_verify_delete_under_load_fork]
#log_marker      = Join "Shoot AM" forked test
#script          = [join]
#join_scenario   = scenario_shoot_am_verify_delete_under_load_fork



# DISABLE THIS FOR NOW - DM Migration resync has not been completed implemented.
# It's possible that there will be I/O mismatch.
# Turn on as part of FS-3052
###################################################################
# Test shooting DM on node node2 under load.
###################################################################
#[scenario_shoot_dm_node2_under_load_fork]
#log_marker      = Run test cases to shoot DM on node node2 under load.
#script          = [fork]
#real-script     = [scenario]
#fds-scenario    = ../cfg/ActiveIORestartTest/ShootDMUnderLoad_Node2.cfg

#[scenario_join_shoot_dm_node2_under_load_fork]
#log_marker      = Join "Shoot DM" forked test
#script          = [join]
#join_scenario   = scenario_shoot_dm_node2_under_load_fork



# DISABLE THIS FOR NOW - DM Migration resync has not been completed implemented.
# It's possible that there will be I/O mismatch.
###################################################################
# Test shooting another DM under load, mainly in case the one     #
# chosen earlier wasn't a primary DM for our volume.              #
###################################################################
#[scenario_shoot_dm_node1_under_load_fork]
#log_marker      = Run test cases to shoot DM on node node1 under load.
#script          = [fork]
#real-script     = [scenario]
#fds-scenario    = ../cfg/ActiveIORestartTest/ShootDMUnderLoad_Node1.cfg

#[scenario_join_shoot_dm_node1_under_load_fork]
#log_marker      = Join "Shoot DM" forked test
#script          = [join]
#join_scenario   = scenario_shoot_dm_node1_under_load_fork



###################################################################
# Test shooting SM on node node3 under load.
###################################################################
[scenario_shoot_sm_node3_under_load_fork]
log_marker      = Run test cases to shoot SM on node node3 under load.
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/ShootSMUnderLoad_Node3.cfg

[scenario_join_shoot_sm_node3_under_load_fork]
log_marker      = Join "Shoot SM" forked test
script          = [join]
join_scenario   = scenario_shoot_sm_node3_under_load_fork


###################################################################
# Test shooting another SM under load, mainly in case the one     #
# chosen earlier wasn't a primary SM for our objects.             #
###################################################################
#[scenario_shoot_sm_node1_under_load_fork]
#log_marker      = Run test cases to shoot SM on node node1 under load.
#script          = [fork]
#real-script     = [scenario]
#fds-scenario    = ../cfg/ActiveIORestartTest/ShootSMUnderLoad_Node1.cfg
#
#[scenario_join_shoot_sm_node1_under_load_fork]
#log_marker      = Join "Shoot SM" forked test
#script          = [join]
#join_scenario   = scenario_shoot_sm_node1_under_load_fork
#

###################################################################
# Create and attach another volume                                #
###################################################################
[scenario_create_vol2]
log_marker      = Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 5

[scenario_attach_vol2]
log_marker      = Attach volume volume2
script          = [volume2]
action          = attach

###################################################################
# Volume2 is originally attached to the AM on node 1. We'll start some I/O
# against both volumes, kill the AM, allow it to reboot, but try to attach
# volume2 to the AM on node2 while allowing volume1 to stay with node1.
###################################################################
[scenario_volume2_am_failover_fork]
log_marker      = Run test cases to show an I/O process to volume2 failover the AM from node1 to node2
script          = [fork]
real-script     = [scenario]
fds-scenario    = ../cfg/ActiveIORestartTest/AMFailOver.cfg

[scenario_join_volume2_am_failover_fork]
log_marker      = Join "AM Failover" forked test
script          = [join]
join_scenario   = scenario_volume2_am_failover_fork




[scenario_create_vol3]
log_marker      = Create volume volume3
script          = [volume3]
action          = create
delay_wait      = 5

[scenario_attach_vol3]
log_marker      = Attach volume volume3
script          = [volume3]
action          = attach

[scenario_get_s3_token_trafficgen]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_connection_trafficgen]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_reload_obj_vol1]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1


###################################################################
# End the volume1 READ client.
###################################################################
[scenario_read_volume1_client_fork_kill]
log_marker      = Kill "volume1 READ" forked test
script          = [kill]
kill_scenario   = scenario_read_volume1_client_fork




###################################################################
# From here forward needs some TLC.                               #
###################################################################
[scenario_2_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,1,PUT,admin,volume3,5000

# COMMENTING this out as the same as before... DM Resync hasn't been implemented yet
# so there's no point to run ActiveIO and then kill DM as this is causing
# un-necessary BoPR failures. This needs to be reactivated as part of FS-3052

#[scenario_2_10]
#log_marker      = Verify bucket information.
#script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
#param_names     = bucket
#params          = volume1

#[scenario_3]
#log_marker      = Run some IO on a separate process
#script          = [fork]
#real-script     = [testcases.TrafficGen.RunTrafficGen]
#param_names     = hostname,runtime,test_type,username
#params          = localhost,120,PUT,admin

#[scenario_3_0]
#log_marker      = Kill DM service on RANDOM node
#script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
#param_names     = nodes,services,time_window
#params          = node1 node2 node3 node4,dm,0-5
#delay_wait      = 10

#[scenario_3_7]
#log_marker      = Verify that PM has started DM again, and everyone else is up.
#script          = [verify]
#state           = up
## Comma separated list of nodes.
#fds_nodes       = node1,node2,node3,node4

#[scenario_3_8]
#log_marker      = Verify I/O works without errors
#script          = [testcases.TrafficGen.TestTrafficGen]
#param_names     = hostname,runtime,test_type,username,volume_name,timeout
#params          = localhost,1,PUT,admin,volume3,5000
#delay_wait      = 5

[scenario_3_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_3_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_4]
log_marker      = Run some IO on a separate process
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,120,PUT,admin

log_marker      = Kill SM or AM service on RANDOM node
script          = [testcases.TestFDSServiceMgt.TestRndSvcKill]
param_names     = nodes,services,time_window
params          = node1 node2 node3 node4,sm am,0-5
delay_wait      = 10

# Takes 60 sec for DM to realize service is gone.
[scenario_4a]
log_marker      = Allow some time for the domain to settle
script          = [testcases.TestMgt.TestWait]
param_names     = delay,reason
params          = 70,to let the service rejoin

[scenario_4_1]
log_marker      = Verify that PM has started service again, and everyone else is up.
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

[scenario_4_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,1,PUT,admin,volume3,5000

[scenario_4_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_4_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_5]
log_marker      = Run some IO on a separate process
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,120,PUT,admin

# FAILS due to FS-2010
#[scenario_5_0]
#log_marker      = Kill ONLY the OM on Node1
#script          = [service]
#fds_node        = node1
#service         = om
#action          = kill
#delay_wait      = 3

[scenario_5_2]
log_marker      = Verify that local services are still running
script          = [service]
fds_node        = node1
service         = am
action          = verifyup

[scenario_5_3]
script          = [service]
fds_node        = node1
service         = pm
action          = verifyup

[scenario_5_4]
script          = [service]
fds_node        = node1
service         = dm
action          = verifyup

[scenario_5_5]
script          = [service]
fds_node        = node1
service         = sm
action          = verifyup

[scenario_5_6]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,1,PUT,admin,volume3,5000

#[scenario_5_7]
#log_marker      = Restart the OM on Node1 and wait 30 seconds
#script          = [service]
#fds_node        = node1
#service         = om
#action          = boot
#delay_wait      = 30

[scenario_5_7b]
log_marker      = Verifies that the OM servies are started
script          = [testcases.TestFDSServiceMgt.TestOMWait]

[scenario_5_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,1,PUT,admin,volume3,5000

[scenario_5_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_5_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_6]
log_marker      = Run some IO on a separate process
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,120,PUT,admin

# Fails due to FS-2009
#[scenario_6_0]
#log_marker      = Kill ONLY the PM on Node1
#script          = [service]
#fds_node        = node1
#service         = pm
#action          = kill
#delay_wait      = 3

[scenario_6_2]
log_marker      = Verify that local services are still running
script          = [service]
fds_node        = node1
service         = am
action          = verifyup

[scenario_6_3]
script          = [service]
fds_node        = node1
service         = om
action          = verifyup

[scenario_6_4]
script          = [service]
fds_node        = node1
service         = dm
action          = verifyup

[scenario_6_5]
script          = [service]
fds_node        = node1
service         = sm
action          = verifyup

[scenario_6_6]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,1,PUT,admin,volume3,5000

#[scenario_6_7]
#log_marker      = Restart the PM on Node1 and wait 30 seconds
#script          = [service]
#fds_node        = node1
#service         = pm
#action          = boot
#delay_wait      = 30

#[scenario_6_6b]
#log_marker      = Verify I/O works without errors
#script          = [testcases.TrafficGen.TestTrafficGen]
#param_names     = hostname,runtime,test_type,username,volume_name,timeout
#params          = localhost,1,PUT,admin,volume3,5000

[scenario_6_7b]
log_marker      = Verifies that the PM servies are started
script          = [testcases.TestFDSServiceMgt.TestPMWait]

[scenario_6_8]
log_marker      = Verify I/O works without errors
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,runtime,test_type,username,volume_name,timeout
params          = localhost,1,PUT,admin,volume3,5000

[scenario_6_9]
log_marker      = Load bucket information so we can verify its contents.
script          = [testcases.TestS3IntFace.TestS3LoadVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_6_10]
log_marker      = Verify bucket information.
script          = [testcases.TestS3IntFace.TestS3CheckVerifiableObject]
param_names     = bucket
params          = volume1

[scenario_15_5]
log_marker      = Cleanup from test.
script          = [domain]
action          = kill-uninst
delay_wait      = 60
