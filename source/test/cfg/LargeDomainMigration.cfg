#
# Copyright 2015 Formation Data Systems, Inc.
#
# Defines resource, configuration and steps to test
# TEST RESOURCES and TOPOLOGY

[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes parameters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm

[node5]
enable          = true
ip              = localhost
fds_root        = /fds/node5
fds_port        = 7400
services        = sm

[node6]
enable          = true
ip              = localhost
fds_root        = /fds/node6
fds_port        = 7500
services        = sm

[node7]
enable          = true
ip              = localhost
fds_root        = /fds/node7
fds_port        = 7600
services        = sm

[node8]
enable          = true
ip              = localhost
fds_root        = /fds/node8
fds_port        = 7700
services        = sm

# The 'policy' section defines a volume policy
#
[policy1]
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

# Now clean up installation areas.
[scenario_0_0_1]
script          = [domain]
action          = shutdown-uninst

[scenario_0_1]
log_marker      = install up node 1
script          = [node1]
action          = install

[scenario_0_2]
log_marker      = Change platform.conf
script          = [testcases.TestFDSEnvMgt.TestModifyPlatformConf]
param_names     = current_string,replace_string,node
params          = prevent_adding_dm_after_startup.*,prevent_adding_dm_after_startup = false,node1

[scenario_0_3]
log_marker      = Bring up node1
script          = [node1]
action          = boot-activate

[scenario_0_4]
log_marker      = Bring up node2
script          = [node2]
action          = install-boot-activate

[scenario_0_5]
log_marker      = Bring up node3
script          = [node3]
action          = install-boot-activate

[scenario_0_6]
log_marker      = Bring up node4
script          = [node4]
action          = install-boot-activate

[scenario_0_7]
# Verify nodes node1 and 2 are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

[scenario_2_1]
# Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_2_2]
# Attach volume volume1
script          = [volume1]
action          = attach

[scenario_3_1]
# Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_3_2]
# Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_3_3]
log_marker      = Write 42 objects
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,n_reqs,test_type,username,volume_name
params          = localhost,42,PUT,admin,volume1
delay_wait      = 60

[scenario_4_4]
# Verify that the migration was a success
log_marker      = Verify that the migration was a success
script          = [testcases.SmChk.TestVerifyMigrations]

[scenario_5]
log_marker      = Bring up node5
script          = [node5]
action          = install-boot-activate

[scenario_5_0_1]
log_marker      = Wait for log message showing 5 nodes deployed
script          = [waitforlog]
fds_node        = node1
service         = om
logentry        = OM deployed DLT with 5 nodes
occurrences     = 1
maxwait         = 240


[scenario_5_1]
# Verify that the migration was a success
log_marker      = Verify that the migration was a success
script          = [testcases.SmChk.TestVerifyMigrations]

[scenario_6]
log_marker      = Bring up node6
script          = [node6]
action          = install-boot-activate

[scenario_6_0_1]
log_marker      = Wait for log message showing 6 nodes deployed
script          = [waitforlog]
fds_node        = node1
service         = om
logentry        = OM deployed DLT with 6 nodes
occurrences     = 1
maxwait         = 240

[scenario_6_1]
# Verify that the migration was a success
log_marker      = Verify that the migration was a success
script          = [testcases.SmChk.TestVerifyMigrations]

[scenario_7]
log_marker      = Run scavenger
script          = [testcases.Scavenger.TestRunScavenger]
delay_wait      = 60

[scenario_8]
log_marker      = Read back our 42 objects
script          = [testcases.TrafficGen.TestTrafficGen]
param_names     = hostname,n_reqs,test_type,username,volume_name
params          = localhost,42,GET,admin,volume1


