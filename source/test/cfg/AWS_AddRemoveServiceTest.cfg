#
# Copyright 2015 Formation Data Systems, Inc.
#
#The following System tests will cover stop/remove/add/start to one or more FDS services on 
#omnode and non-omnode during active IOs:
#1.  Stop,remove,add,start AM service on OMNode
#2.  Stop,remove,add,start DM service on OMNode
#3.  Stop,remove,add,start SM service on OMNode
#4.  Stop,remove,add,start AM service on non-OMNode
#5.  Stop,remove,add,start DM service on non-OMNode
#6.  Stop,remove,add,start SM service on non-OMNode
#7.  Stop,remove,add,start AM/DM services on OMNode
#8.  Stop,remove,add,start AM/DM services on non-OMNode
#9.  Stop,remove,add,start AM/SM services on OMNode
#10. Stop,remove,add,start AM/SM services on non-OMNode
#11. Stop,remove,add,start DM/SM services on OMNode
#12. Stop,remove,add,start DM/SM services on non-OMNode
#13. Stop,(remove,add - bug),start all three AM/DM/SM services on OMNode
#14. Stop,(remove,add - bug),start all three AM/DM/SM services on non-OMNode
#

[user]
user_name = root
password = passwd

[node1]
om = true
redis = true
influxdb = true
ip = localhost
fds_root = /fds/node1
fds_port = 7000

[node2]
enable=true
ip = localhost
fds_root = /fds/node2
fds_port = 7000

[node3]
enable=true
ip = localhost
fds_root = /fds/node3
fds_port = 7000

[node4]
enable=true
ip = localhost
fds_root = /fds/node4
fds_port = 7000

[node5]
enable=true
ip = localhost
fds_root = /fds/node5
fds_port = 7000

[node6]
enable=true
ip = localhost
fds_root = /fds/node6
fds_port = 7000

[node7]
enable=true
ip = localhost
fds_root = /fds/node7
fds_port = 7000

[node8]
enable=true
ip = localhost
fds_root = /fds/node8
fds_port = 7000

# The 'volume' section defines a volume
[volume1]
## Name of the server AM node to attach to
client = node1
### Apparently meant to be a Tenant ID.
id     = 1
### The size of the volume
size   = 10000
### The volume access type, currently either 'object' or 'block'
access = object
##
### The 'volume' section defines a volume
[volume_AddRemoveServiceTest]
### Name of the server AM node to attach to
client = node1
### Apparently meant to be a Tenant ID.
id     = 2
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume3]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 3
# The size of the volume
size   = 10000000
# The volume access type, currently either 'object' or 'block'
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_verify_nodes_up]
log_marker      = Verify node nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

[scenario_create_volume_AddRemoveServiceTest]
log_marker      = Create volume volume_AddRemoveServiceTest
script          = [volume_AddRemoveServiceTest]
action          = create
delay_wait      = 5

[scenario_attach_volume_AddRemoveServiceTest]
log_marker      = Attach volume
script          = [volume_AddRemoveServiceTest]
action          = attach

[scenario_get_s3_autho_token]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_connection]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_put_s3_blob]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4


#Test AM stop/remove/add/start service on omnode
[scenario_stop_am_on_omnode]
log_marker = Stop AM service on node1.
script     = [service]
fds_nodes  = node1
services   = am
action     = stop,remove,add,start

[scenario_TestS3LoadMBLOB]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin


#Test DM stop/remove/add/start service on omnode
[scenario_stop_dm_on_omnode]
log_marker = Stop DM service on node1.
script     = [service]
fds_nodes   = node1
services    = dm
action     = stop,remove,add,start

[scenario_TestS3LoadMBLOB]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#This test is to ensure that we can't add a fds service to a node that already has the same service running 
[scenario_add_am_service_to_running_service]
log_marker      = Verify AM service cannot be added to a node that already has the same service running
script          = [service]
fds_nodes       = node1
action          = add
services				= am
expect_failure  = true
expect_failed_msg = 500: Error adding service to node

#Test SM stop/remove/add/start service on omnode
[scenario_stop_sm_on_omnode]
log_marker = Stop SM service on node1
script     = [service]
fds_nodes   = node1
services    = sm
action     = stop,remove,add,start

[scenario_TestS3LoadMBLOB]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin


#Test AM stop/remove/add/start service on non-omnode
[scenario_stop_amon_nonomnode]
log_marker = Stop AM service on node2.
script     = [service]
fds_nodes  = node2
services   = am
action     = stop,remove,add,start

[scenario_TestS3LoadMBLOB]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin


#Remove DM service on node2
[scenario_stop_dm_on_nonomnode]
log_marker = Stop DM service on node2.
script     = [service]
fds_nodes  = node2
services   = dm
action     = stop,remove,add,start

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Remove SM service on node2
[scenario_stop_smon_nonomnode]
log_marker = Stop SM service on node2.
script     = [service]
fds_nodes  = node2
services   = sm
action     = stop,remove,add,start

[scenario_TestS3LoadMBLOB]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Check nodes to make sure all services are running before starting new test
[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

#Test two services AM,DM stop/remove/add/start service on omnode
[scenario_stop_am_dm_on_omnode]
log_marker = Stop AM/DM service on node1.
script     = [service]
fds_nodes  = node1
services   = am,dm
action     = stop,remove

[scenario_add_am_dm_on_omnode]
log_marker = Add AM/DM service on node1.
script     = [service]
fds_nodes  = node1
services   = am,dm
action     = add,start

#Test two services AM,SM stop/remove/add/start service on omnode
[scenario_stop_am_sm_on_omnode]
log_marker = Stop AM/SM service on node1.
script     = [service]
fds_nodes  = node1
services   = am,sm
action     = stop,remove

[scenario_add_am_sm_on_omnode]
log_marker = Add AM/SM service on node1.
script     = [service]
fds_nodes  = node1
services   = am,sm
action     = add,start

#Test two services DM,SM stop/remove/add/start service on omnode
[scenario_stop_dm_sm_on_omnode]
log_marker = Stop DM/SM service on node1.
script     = [service]
fds_nodes  = node1
services   = dm,sm
action     = stop,remove

[scenario_add_dm_sm_on_omnode]
log_marker = Add DM/SM service on node1.
script     = [service]
fds_nodes  = node1
services   = dm,sm
action     = add,start

[scenario_TestS3LoadMBLOB]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test two services AM,DM stop/remove/add/start service on non-omnode
[scenario_stop_am_dm_on_nonomnode]
log_marker = Stop AM/DM service on node2
script     = [service]
fds_nodes  = node2
services   = am,dm
action     = stop,remove

[scenario_add_am_dm_on_nonomnode]
log_marker = Add AM/DM service on node2
script     = [service]
fds_nodes  = node2
services   = am,dm
action     = add,start

#Test two services AM,SM stop/remove/add/start service on non-omnode
[scenario_stop_am_sm_on_nonomnode]
log_marker = Stop AM/SM service on node2
script     = [service]
fds_nodes  = node2
services   = am,sm
action     = stop,remove

[scenario_add_am_sm_on_nonomnode]
log_marker = Add AM/SM service on node2
script     = [service]
fds_nodes  = node2
services   = am,sm
action     = add,start

#Test two services DM,SM stop/remove/add/start service on non-omnode
[scenario_stop_dm_sm_on_nonomnode]
log_marker = Stop DM/SM service on node2
script     = [service]
fds_nodes  = node2
services   = dm,sm
action     = stop,remove

[scenario_add_dm_sm_on_nonomnode]
log_marker = Add DM/SM service on node2
script     = [service]
fds_nodes  = node2
services   = dm,sm
action     = add,start

#Check nodes to make sure all services are running before starting new test
[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

[scenario_TestS3LoadMBLOB]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test three services AM,DM,SM stop/remove/add/start service on omnode
[scenario_stop_am_dm_sm_on_omnode]
log_marker = Stop AM/DM/SM service on node1.
script     = [service]
fds_nodes  = node1
services   = am,dm,sm
action     = stop


#due to a bug, you can't remove/add when all three services are down
#Need to add scenarios when bug is fixed

[scenario_start_am_dm_sm_on_omnode]
log_marker = Start AM/DM/SM service on node1.
script     = [service]
fds_nodes  = node1
services   = am,dm,sm
action     = start


#Check nodes to make sure all services are running before starting new test
[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

[scenario_TestS3LoadMBLOB]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test three services AM,DM,SM stop/remove/add/start service on non-omnode
[scenario_stop_am_dm_sm_on_nonomnode]
log_marker = Stop AM/DM/SM service on node2
script     = [service]
fds_nodes  = node2
services   = am,dm,sm
action     = stop

#due to a bug, you can't remove/add when all three services are down
#Need to add scenarios when bug is fixed


[scenario_TestS3LoadMBLOB]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume_AddRemoveServiceTest

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_start_am_dm_sm_on_nonomnode]
log_marker = Start AM/DM/SM service on node2
script     = [service]
fds_nodes  = node2
services   = am,dm,sm
action     = start

#Check nodes to make sure all services are running before starting new test
[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

[scenario_closes_s3_connection]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]
