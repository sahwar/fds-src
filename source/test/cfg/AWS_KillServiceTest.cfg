#
# Copyright 2015 Formation Data Systems, Inc.
#
# The test scenarios here consist of the following:
#   Kill single AM on omnode and non-omnode
#   Kill single DM on omnode and non-omnode
#   Kill single SM on omnode and non-omnode
#   Kill single PM on omnode and non-omnode
#   Kill two services AM/DM on omnode and non-omnode
#   Kill two services AM/SM on omnode and non-omnode
#   Kill two services DM/SM on omnode and non-omnode
#   Kill two services AM/SM on omnode and non-omnode
#   Kill three services AM/DM/SM on omnode and non-omnode
#

[user]
user_name = root
password = passwd

[node1]
om = true
redis = true
influxdb = true
ip = localhost
fds_root = /fds/node1
fds_port = 7000

[node2]
enable=true
ip = localhost
fds_root = /fds/node2
fds_port = 7000

[node3]
enable=true
ip = localhost
fds_root = /fds/node3
fds_port = 7000

[node4]
enable=true
ip = localhost
fds_root = /fds/node4
fds_port = 7000

[node5]
enable=true
ip = localhost
fds_root = /fds/node5
fds_port = 7000

[node6]
enable=true
ip = localhost
fds_root = /fds/node6
fds_port = 7000

[node7]
enable=true
ip = localhost
fds_root = /fds/node7
fds_port = 7000

[node8]
enable=true
ip = localhost
fds_root = /fds/node8
fds_port = 7000

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume2]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 2
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume3]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 3
# The size of the volume
size   = 10000000
# The volume access type, currently either 'object' or 'block'
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_boot_activate]
log_marker      = Bring up domain
script          = [domain]
action          = install-boot-activate

[scenario_verify_nodes_up]
log_marker      = Verify domain is up
script          = [verify]
state           = up

[scenario_verify_nodes_up]
log_marker      = Verify node node1 is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

[scenario_create_volume1]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 5

[scenario_attach_volume]
# Attach volume volume1
log_marker      = Attach volume
script          = [volume1]
action          = attach

[scenario_get_s3_autho_token]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_connection]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_put_s3_blob1]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_fork_io_workload1]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_verify_nodes_up]
log_marker      = Verify nodes node2 and node4 are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4


#Test node kill AM service on Nodes
[scenario_kill_am_1]
log_marker = Kill AM service on node1 and node2.
script     = [service]
fds_nodes  = node1,node2
services   = am
action     = kill
delay_wait = 5

[scenario_kill_am_2]
log_marker = Kill AM service on node3 and node4.
script     = [service]
fds_nodes  = node3,node4
services   = am
action     = kill
delay_wait = 5

[scenario_put_s3_blob2]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_fork_io_workload2]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test node kill SM service on Nodes
[scenario_kill_sm_1]
log_marker = Kill SM service on node1 and node2
script     = [service]
fds_nodes  = node1,node2
services   = sm
action     = kill
delay_wait = 5

[scenario_kill_sm_2]
log_marker = Kill SM service on node3 and node4
script     = [service]
fds_nodes  = node3,node4
services   = sm
action     = kill
delay_wait = 5

[scenario_put_s3_blob3]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_fork_io_workload3]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test node kill DM service on Nodes
[scenario_kill_dm_1]
log_marker = Kill DM service on node1 and node2.
script     = [service]
fds_nodes  = node1,node2
services   = dm
action     = kill
delay_wait = 5

[scenario_kill_dm_2]
log_marker = Kill DM service on node3 and node4.
script     = [service]
fds_nodes  = node3,node4
services   = dm
action     = kill
delay_wait = 5

#Test node kill PM service on Nodes
[scenario_kill_pm_1]
log_marker = Kill PM service on node4.
script     = [service]
fds_nodes  = node1,node2
services   = pm
action     = kill
delay_wait = 5

[scenario_put_s3_blob4]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_fork_io_workload4]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test node kill AM and DM services on a node
[scenario_kill_am_dm_1]
log_marker = Kill AM and DM services on node1 and node2 
script     = [service]
fds_nodes  = node1,node2
services   = am,dm
action     = kill
delay_wait = 7

[scenario_kill_am_dm_2]
log_marker = Kill AM and DM services on node3 and node4.
script     = [service]
fds_nodes  = node3,node4
services   = am,dm
action     = kill
delay_wait = 5

[scenario_put_s3_blob5]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_fork_io_workload5]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test node kill DM and SM services on a node
[scenario_kill_dm_sm_1]
log_marker = Kill DM and SM services on node1 and node2 
script     = [service]
fds_nodes  = node1,node2
services   = dm,sm
action     = kill
delay_wait = 5

[scenario_kill_dm_sm_2]
log_marker = Kill DM and SM services on node3 and node4.
script     = [service]
fds_nodes  = node3,node4
services   = dm,sm
action     = kill
delay_wait = 5

[scenario_put_s3_blob6]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_fork_io_workload6]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test node kill AM and SM services on a node
[scenario_kill_am_sm_1]
log_marker = Kill AM and SM services on node1 and node2 
script     = [service]
fds_nodes  = node1,node2
services   = am,sm
action     = kill
delay_wait = 5

[scenario_kill_am_sm_2]
log_marker = Kill AM and SM services on node3 and node4.
script     = [service]
fds_nodes  = node3,node4
services   = am,sm
action     = kill
delay_wait = 5

[scenario_put_s3_blob7]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_fork_io_workload7]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

#Test node kill AM, DM and SM services on a node
[scenario_kill_am_sm_1]
log_marker = Kill AM and SM services on node1 and node2 
script     = [service]
fds_nodes  = node1,node2
services   = am,dm,sm
action     = kill
delay_wait = 5

[scenario_kill_am_dm_sm_2]
log_marker = Kill AM, DM and SM services on node3 and node4.
script     = [service]
fds_nodes  = node3,node4
services   = am,dm,sm
action     = kill
delay_wait = 5


[scenario_verify_all_nodes_up]
log_marker      = Verify all nodes are up
script          = [verify]
state           = up
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

[scenario_closes_s3_connection]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]


[scenario_kill_and_clean_up]
log_marker      = Kill and cleanup
script          = [domain]
action          = kill-uninst
