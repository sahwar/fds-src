#
# Copyright 2015 Formation Data Systems, Inc.
#
#
#This cfg file contains tests to stop/start different fds services
#on different nodes within the cluster. The test ensures IO does
#not get affected when different FDS services restarting 
#on different nodes.

[user]
user_name = root
password = passwd

[node1]
om = true
redis = true
influxdb = true
ip = localhost
fds_root = /fds/node1
fds_port = 7000

[node2]
enable=true
ip = localhost
fds_root = /fds/node2
fds_port = 7000

[node3]
enable=true
ip = localhost
fds_root = /fds/node3
fds_port = 7000

[node4]
enable=true
ip = localhost
fds_root = /fds/node4
fds_port = 7000

[node5]
enable=true
ip = localhost
fds_root = /fds/node5
fds_port = 7000

[node6]
enable=true
ip = localhost
fds_root = /fds/node6
fds_port = 7000

[node7]
enable=true
ip = localhost
fds_root = /fds/node7
fds_port = 7000

[node8]
enable=true
ip = localhost
fds_root = /fds/node8
fds_port = 7000

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume2]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 2
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

# The 'volume' section defines a volume
[volume3]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 3
# The size of the volume
size   = 10000000
# The volume access type, currently either 'object' or 'block'
access = block

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_verify_nodes_up]
log_marker      = Verify node node1 is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

[scenario_create_volume2]
log_marker      = Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 5

[scenario_attach_volume2]
log_marker      = Attach volume
script          = [volume2]
action          = attach

[scenario_get_s3_autho_token]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_connection]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_put_s3_blob]
# Load some data into volume1 "bucket" using the S3 interface
log_marker      = Test S3 interface by putting blob
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume2

[scenario_fork_io_workload]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin



#Test AWS node AM stop/start service 
[scenario_stop_am_service_test]
log_marker = Stop AM service on node(s) test.
script     = [service]
fds_nodes  = node1,node2,node3
services   = am
action     = stop

[scenario_fork_io_workload2]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_start_am_service_test]
log_marker = Start AM service on node(s).
script     = [service]
fds_nodes  = node1,node2,node3
services   = am
action     = start

[scenario_fork_io_workload4]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8


#Test AWS node DM stop/start service 
[scenario_stop_dm_test]
log_marker = Stop DM service on node1.
script     = [service]
fds_nodes  = node1
services   = dm
action     = stop

[scenario_stop_dm_2]
log_marker = Stop DM service on node2 and node3.
script     = [service]
fds_nodes  = node2,node3
services   = dm
action     = stop

[scenario_fork_io_workload2]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin


[scenario_start_dm_node1]
log_marker = Start DM service on node1.
script     = [service]
fds_nodes  = node1
services   = dm
action     = start

[scenario_start_dm_node2]
log_marker = Start DM service on node2 and node3.
script     = [service]
fds_nodes  = node2,node3
services   = dm
action     = start

[scenario_fork_io_workload4]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8
#
#
#Test AWS node SM stop/start service 
[scenario_stop_sm_1]
log_marker = Stop SM service on node1.
script     = [service]
fds_nodes  = node1,node2
services   = sm
action     = stop

[scenario_stop_sm_2]
log_marker = Stop SM service on node2.
script     = [service]
fds_nodes  = node3
services   = sm
action     = stop

[scenario_fork_io_workload2]
# Run some IO
log_marker      = Fork/run longer IO workload
script          = [fork]
real-script     = [testcases.TrafficGen.RunTrafficGen]
param_names     = hostname,runtime,test_type,username
params          = localhost,3000,PUT,admin

[scenario_start_sm_node1]
log_marker = Start SM service on node1.
script     = [service]
fds_nodes  = node1,node2,node3
services   = sm
action     = start

[scenario_verify_nodes_are_up]
log_marker      = Verify nodes nodes are up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4,node5,node6,node7,node8

#Test stop/start PM service
#NOTE:  stopping PM service will take 5+ minutes for node/service states to get updated
[scenario_stop_pm_on_omnode]
log_marker = Stop PM service on omnode.
script     = [service]
fds_nodes  = node1
services   = pm
#Don't use verifydown as it takes 500+ seconds for the pm state to get updated
action     = stop

[scenario_start_pm_on_omnode]
log_marker = Start PM service on omnode.
script     = [service]
fds_nodes  = node1
services   = pm
action     = start

[scenario_stop_pm_non_omnode]
log_marker = Stop PM service on non-omnode.
script     = [service]
fds_node   = node2
service    = pm
##Don't use verifydown as it takes 500+ seconds for the pm state to get updated
action     = stop

[scenario_start_pm_2]
log_marker = Start PM service on non-omnode.
script     = [service]
fds_node   = node2
service    = pm
action     = start

[scenario_closes_s3_connection]
log_marker      = Close the S3 connection
script          = [testcases.TestS3IntFace.TestS3CloseConn]
