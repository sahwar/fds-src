#
# Copyright 2015 Formation Data Systems, Inc.
#
# Test volume functions with different media types as storage medium.
# Test garbage collection for different media types.
#
# Note: Do not embed white space is comma delimited lists - test framework bug.

# TEST RESOURCES and TOPOLOGY

[user]
user_name       = root
password        = passwd

# The 'node' section defines a nodes paramters. The section must be prefixed
# with 'node' but is also used as a unique ID for the node.
#
[node1]
# Denotes this node will run an OM. Therefore, it is enabled automatically.
om              = true
# We'll start Redis with this node. Since all the other nodes listed
# here are on the same machine, we don't need to specify Redis for
# boot up on them.
redis           = true
# start influxdb
influxdb        = true
# IP of the node
ip              = localhost
# Fds root directory to use
fds_root        = /fds/node1
# Base port for that node, not needed if we don't run all nodes one physical machine
fds_port        = 7000
# By default we get all services on a node. Otherwise we' specify a 'services' option.

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = dm,sm

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = dm,sm

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = dm,sm

# The 'policy' section defines a volume policy
#
[policy1]
# The ID of the policy
id    = 1
# iops_min of the policy
iops_min = 100
# iops_max of the policy
iops_max = 500
# priority of the policy
priority = 1

# The 'volume' section defines a volume
[volume1]
# Name of the server AM node to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 1
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 'object' or 'block'
access = object
# Media type (hdd, ssd, hybrid)
media = ssd

# The 'volume' section defines a volume
[volume2]
# Name of the server AM node to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 2
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 'object' or 'block'
access = object
# Media type (hdd, ssd, hybrid)
media = hdd

# The 'volume' section defines a volume
[volume3]
# Name of the server AM node to attach to
client = node1
# The ID of the volume. Apparently ignored by the FDS system which assigns what it wants.
id     = 3
# The size of the volume
size   = 10000
# A policy ID for the volume, must be defined in the 'policy' section
policy = 1
# The volume access type, currenty either 'object' or 'block'
access = block
# Media type (hdd, ssd, hybrid)
media = hybrid

# TEST STEPS or CASES or SCENARIOS
# Will be ordered according to scenario name.

[scenario_volmedia_1]
log_marker      = Bring up domain
script          = [domain]
action          = install-boot-activate

[scenario_volmedia_2]
log_marker      = Verify domain is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4

[scenario_volmedia_3]
log_marker      = Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 10

[scenario_volmedia_6]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_volmedia_7]
log_marker      = Attach volume volume1
script          = [volume1]
action          = attach

[scenario_volmedia_8]
log_marker      = Create volume volume2
script          = [volume2]
action          = create
delay_wait      = 10

[scenario_volmedia_9]
log_marker      = Attach volume volume2
script          = [volume2]
action          = attach

[scenario_volmedia_10]
log_marker      = Create volume volume3
script          = [volume3]
action          = create
delay_wait      = 10

[scenario_volmedia_11]
log_marker      = Attach volume volume3
script          = [volume3]
action          = attach

[scenario_volmedia_12]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_volmedia_13]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_volmedia_14]
log_marker      = Load some data into volume1 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_volmedia_15]
log_marker      = Check for token files of SSDs
script          = [testcases.TestFDSSysVerify.TestCheckSSDTokenFiles]
# Command separated list of parameter names and values
param_names     = node
params          = node1

[scenario_volmedia_16]
log_marker      = Load some data into volume2 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadLBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume2

[scenario_volmedia_17]
log_marker      = Check for token files of HDDs
script          = [testcases.TestFDSSysVerify.TestCheckHDDTokenFiles]
# Command separated list of parameter names and values
param_names     = node
params          = node1

[scenario_volmedia_18]
log_marker      = Load some data into volume1 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume3

[scenario_volmedia_19]
log_marker      = Check for token files of SSDs and HDDs
script          = [testcases.TestFDSSysVerify.TestCheckHybridTokenFiles]
# Command separated list of parameter names and values
param_names     = node
params          = node1

[scenario_volmedia_20]
log_marker      = Run garbage collector
script          = [testcases.TestFDSSysVerify.TestRunScavenger]

[scenario_volmedia_21]
log_marker      = Verify domain is up
script          = [verify]
state           = up
# Comma separated list of nodes.
fds_nodes       = node1,node2,node3,node4
delay_wait      = 20

[scenario_volmedia_22]
log_marker      = Check for token files of SSDs and HDDs after GC is done
script          = [testcases.TestFDSSysVerify.TestCheckHybridTokenFiles]
# Command separated list of parameter names and values
param_names     = node
params          = node1

[scenario_cleanup]
log_marker      = Shutdown and uninstall domain
script          = [domain]
action          = shutdown-uninst
