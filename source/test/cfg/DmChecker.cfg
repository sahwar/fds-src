#
# Copyright 2015 Formation Data Systems, Inc.
#

# TEST DESCRIPTION
# - Bring up four nodes
# - Inject fault in one random sm service to drop all the puts
# - Run traffic gen
# - Traffic gen should complete successfully

[user]
user_name       = root
password        = passwd

#========== Setup Nodes ===============
[node1]
om              = true
redis           = true
influxdb        = true
ip              = localhost
fds_root        = /fds/node1
fds_port        = 7000
services        = am,sm,dm

[node2]
enable          = true
ip              = localhost
fds_root        = /fds/node2
fds_port        = 7100
services        = sm,dm

[node3]
enable          = true
ip              = localhost
fds_root        = /fds/node3
fds_port        = 7200
services        = sm,dm

[node4]
enable          = true
ip              = localhost
fds_root        = /fds/node4
fds_port        = 7300
services        = sm,dm

#========== Setup Volume ===============
[policy1]
iops_min = 100
iops_max = 500
priority = 1

[volume1]
# Name of the server AM node to attach to
client = node1
# Apparently meant to be a Tenant ID.
id     = 1
# The size of the volume
size   = 10000
# The volume access type, currently either 'object' or 'block'
access = object

#========== Setup Domain and Data ===============
[scenario_startup_cleanup]
log_marker      = Cleanup from test.
script          = [domain]
action          = kill-uninst
delay_wait      = 60

[scenario_install_domain]
log_marker      = Install the domain
script          = [domain]
action          = install-boot-activate

[scenario_verify_allnodes_up]
log_marker      = Verify all nodes are up
script          = [verify]
state           = up
fds_nodes       = node1,node2,node3,node4

#[scenario_drop_sm_puts]
#log_marker      = Set fault injection to drop puts on a random sm
#script          = [testcases.TestFDSServiceMgt.TestServiceInjectFault]
## Command separated list of parameter names and values
#param_names     = node,faultName
#params          = random_node,svc.dropincoming.fpi::PutObjectMsg

[scenario_create_vol_policy]
log_marker      = Create a volume policy.
script          = [policy1]
action          = create
delay_wait      = 10

[scenario_create_vol]
log_marker      = Create volume volume1
script          = [volume1]
action          = create
delay_wait      = 10

[scenario_attach_vol]
log_marker      = Attach volume volume1
script          = [volume1]
action          = attach

[scenario_get_s3_token]
log_marker      = Get an S3 authorization token
script          = [testcases.TestOMIntFace.TestGetAuthToken]

[scenario_get_s3_conn]
log_marker      = Get an S3 connection
script          = [testcases.TestS3IntFace.TestS3GetConn]

[scenario_S3LoadMBLOB]
log_marker      = Load some data into volume1 "bucket" using the S3 interface
script          = [testcases.TestS3IntFace.TestS3LoadMBLOB]
# Command separated list of parameter names and values
param_names     = bucket
params          = volume1

[scenario_kill_dms]
log_marker      = Kill dms
script          = [service]
service		= dm
action		= kill
fds_nodes	= node1,node2,node3,node4
delay_wait	= 5

[scenario_dmchecker]
log_marker      = run dm checker
script          = [testcases.TestFDSSysVerify.TestDMChecker]

