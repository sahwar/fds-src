// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `FDSP.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <FDSP.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __FDS_ProtocolInterface__FDSP_DataPathReq__GetObject_name = "GetObject";

const ::std::string __FDS_ProtocolInterface__FDSP_DataPathReq__PutObject_name = "PutObject";

const ::std::string __FDS_ProtocolInterface__FDSP_DataPathReq__UpdateCatalogObject_name = "UpdateCatalogObject";

const ::std::string __FDS_ProtocolInterface__FDSP_DataPathReq__OffsetWriteObject_name = "OffsetWriteObject";

const ::std::string __FDS_ProtocolInterface__FDSP_DataPathReq__RedirReadObject_name = "RedirReadObject";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::FDS_ProtocolInterface::upCast(::IceProxy::FDS_ProtocolInterface::FDSP_PutObjType* p) { return p; }

void
::IceProxy::FDS_ProtocolInterface::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_PutObjType>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FDS_ProtocolInterface::FDSP_PutObjType;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::FDS_ProtocolInterface::FDSP_PutObjType::ice_staticId()
{
    return ::FDS_ProtocolInterface::FDSP_PutObjType::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_PutObjType::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FDS_ProtocolInterface::FDSP_PutObjType);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_PutObjType::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FDS_ProtocolInterface::FDSP_PutObjType);
}

::IceProxy::Ice::Object*
IceProxy::FDS_ProtocolInterface::FDSP_PutObjType::__newInstance() const
{
    return new FDSP_PutObjType;
}
::IceProxy::Ice::Object* ::IceProxy::FDS_ProtocolInterface::upCast(::IceProxy::FDS_ProtocolInterface::FDSP_GetObjType* p) { return p; }

void
::IceProxy::FDS_ProtocolInterface::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_GetObjType>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FDS_ProtocolInterface::FDSP_GetObjType;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::FDS_ProtocolInterface::FDSP_GetObjType::ice_staticId()
{
    return ::FDS_ProtocolInterface::FDSP_GetObjType::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_GetObjType::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FDS_ProtocolInterface::FDSP_GetObjType);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_GetObjType::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FDS_ProtocolInterface::FDSP_GetObjType);
}

::IceProxy::Ice::Object*
IceProxy::FDS_ProtocolInterface::FDSP_GetObjType::__newInstance() const
{
    return new FDSP_GetObjType;
}
::IceProxy::Ice::Object* ::IceProxy::FDS_ProtocolInterface::upCast(::IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType* p) { return p; }

void
::IceProxy::FDS_ProtocolInterface::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_staticId()
{
    return ::FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FDS_ProtocolInterface::FDSP_OffsetWriteObjType);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FDS_ProtocolInterface::FDSP_OffsetWriteObjType);
}

::IceProxy::Ice::Object*
IceProxy::FDS_ProtocolInterface::FDSP_OffsetWriteObjType::__newInstance() const
{
    return new FDSP_OffsetWriteObjType;
}
::IceProxy::Ice::Object* ::IceProxy::FDS_ProtocolInterface::upCast(::IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType* p) { return p; }

void
::IceProxy::FDS_ProtocolInterface::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_staticId()
{
    return ::FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FDS_ProtocolInterface::FDSP_RedirReadObjType);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FDS_ProtocolInterface::FDSP_RedirReadObjType);
}

::IceProxy::Ice::Object*
IceProxy::FDS_ProtocolInterface::FDSP_RedirReadObjType::__newInstance() const
{
    return new FDSP_RedirReadObjType;
}
::IceProxy::Ice::Object* ::IceProxy::FDS_ProtocolInterface::upCast(::IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType* p) { return p; }

void
::IceProxy::FDS_ProtocolInterface::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType::ice_staticId()
{
    return ::FDS_ProtocolInterface::FDSP_VerifyObjType::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FDS_ProtocolInterface::FDSP_VerifyObjType);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FDS_ProtocolInterface::FDSP_VerifyObjType);
}

::IceProxy::Ice::Object*
IceProxy::FDS_ProtocolInterface::FDSP_VerifyObjType::__newInstance() const
{
    return new FDSP_VerifyObjType;
}
::IceProxy::Ice::Object* ::IceProxy::FDS_ProtocolInterface::upCast(::IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType* p) { return p; }

void
::IceProxy::FDS_ProtocolInterface::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_staticId()
{
    return ::FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FDS_ProtocolInterface::FDSP_UpdateCatalogType);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FDS_ProtocolInterface::FDSP_UpdateCatalogType);
}

::IceProxy::Ice::Object*
IceProxy::FDS_ProtocolInterface::FDSP_UpdateCatalogType::__newInstance() const
{
    return new FDSP_UpdateCatalogType;
}
::IceProxy::Ice::Object* ::IceProxy::FDS_ProtocolInterface::upCast(::IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType* p) { return p; }

void
::IceProxy::FDS_ProtocolInterface::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType::ice_staticId()
{
    return ::FDS_ProtocolInterface::FDSP_MsgHdrType::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FDS_ProtocolInterface::FDSP_MsgHdrType);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FDS_ProtocolInterface::FDSP_MsgHdrType);
}

::IceProxy::Ice::Object*
IceProxy::FDS_ProtocolInterface::FDSP_MsgHdrType::__newInstance() const
{
    return new FDSP_MsgHdrType;
}
::IceProxy::Ice::Object* ::IceProxy::FDS_ProtocolInterface::upCast(::IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq* p) { return p; }

void
::IceProxy::FDS_ProtocolInterface::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __FDS_ProtocolInterface__FDSP_DataPathReq__GetObject_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq* __del = dynamic_cast< ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq*>(__delBase.get());
            __del->GetObject(fdsp_msg, get_obj_req, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::begin_GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FDS_ProtocolInterface__FDSP_DataPathReq__GetObject_name, __del, __cookie);
    try
    {
        __result->__prepare(__FDS_ProtocolInterface__FDSP_DataPathReq__GetObject_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(get_obj_req);
        __os->writePendingObjects();
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::end_GetObject(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FDS_ProtocolInterface__FDSP_DataPathReq__GetObject_name);
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __FDS_ProtocolInterface__FDSP_DataPathReq__PutObject_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq* __del = dynamic_cast< ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq*>(__delBase.get());
            __del->PutObject(fdsp_msg, put_obj_req, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::begin_PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FDS_ProtocolInterface__FDSP_DataPathReq__PutObject_name, __del, __cookie);
    try
    {
        __result->__prepare(__FDS_ProtocolInterface__FDSP_DataPathReq__PutObject_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(put_obj_req);
        __os->writePendingObjects();
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::end_PutObject(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FDS_ProtocolInterface__FDSP_DataPathReq__PutObject_name);
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __FDS_ProtocolInterface__FDSP_DataPathReq__UpdateCatalogObject_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq* __del = dynamic_cast< ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq*>(__delBase.get());
            __del->UpdateCatalogObject(fdsp_msg, cat_obj_req, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::begin_UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FDS_ProtocolInterface__FDSP_DataPathReq__UpdateCatalogObject_name, __del, __cookie);
    try
    {
        __result->__prepare(__FDS_ProtocolInterface__FDSP_DataPathReq__UpdateCatalogObject_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(cat_obj_req);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::end_UpdateCatalogObject(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FDS_ProtocolInterface__FDSP_DataPathReq__UpdateCatalogObject_name);
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __FDS_ProtocolInterface__FDSP_DataPathReq__OffsetWriteObject_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq* __del = dynamic_cast< ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq*>(__delBase.get());
            __del->OffsetWriteObject(fdsp_msg, offset_write_obj_req, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::begin_OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FDS_ProtocolInterface__FDSP_DataPathReq__OffsetWriteObject_name, __del, __cookie);
    try
    {
        __result->__prepare(__FDS_ProtocolInterface__FDSP_DataPathReq__OffsetWriteObject_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(offset_write_obj_req);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::end_OffsetWriteObject(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FDS_ProtocolInterface__FDSP_DataPathReq__OffsetWriteObject_name);
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __FDS_ProtocolInterface__FDSP_DataPathReq__RedirReadObject_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq* __del = dynamic_cast< ::IceDelegate::FDS_ProtocolInterface::FDSP_DataPathReq*>(__delBase.get());
            __del->RedirReadObject(fdsp_msg, redir_write_obj_req, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::begin_RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FDS_ProtocolInterface__FDSP_DataPathReq__RedirReadObject_name, __del, __cookie);
    try
    {
        __result->__prepare(__FDS_ProtocolInterface__FDSP_DataPathReq__RedirReadObject_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(redir_write_obj_req);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::end_RedirReadObject(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FDS_ProtocolInterface__FDSP_DataPathReq__RedirReadObject_name);
}

const ::std::string&
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::ice_staticId()
{
    return ::FDS_ProtocolInterface::FDSP_DataPathReq::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FDS_ProtocolInterface::FDSP_DataPathReq);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FDS_ProtocolInterface::FDSP_DataPathReq);
}

::IceProxy::Ice::Object*
IceProxy::FDS_ProtocolInterface::FDSP_DataPathReq::__newInstance() const
{
    return new FDSP_DataPathReq;
}

void
IceDelegateM::FDS_ProtocolInterface::FDSP_DataPathReq::GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FDS_ProtocolInterface__FDSP_DataPathReq__GetObject_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(get_obj_req);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FDS_ProtocolInterface::FDSP_DataPathReq::PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FDS_ProtocolInterface__FDSP_DataPathReq__PutObject_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(put_obj_req);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FDS_ProtocolInterface::FDSP_DataPathReq::UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FDS_ProtocolInterface__FDSP_DataPathReq__UpdateCatalogObject_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(cat_obj_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FDS_ProtocolInterface::FDSP_DataPathReq::OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FDS_ProtocolInterface__FDSP_DataPathReq__OffsetWriteObject_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(offset_write_obj_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FDS_ProtocolInterface::FDSP_DataPathReq::RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FDS_ProtocolInterface__FDSP_DataPathReq__RedirReadObject_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(fdsp_msg);
        __os->write(redir_write_obj_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::FDS_ProtocolInterface::FDSP_DataPathReq::GetObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& get_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& __p_fdsp_msg, const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& __p_get_obj_req, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_fdsp_msg(__p_fdsp_msg),
            _m_get_obj_req(__p_get_obj_req)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FDS_ProtocolInterface::FDSP_DataPathReq* servant = dynamic_cast< ::FDS_ProtocolInterface::FDSP_DataPathReq*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->GetObject(_m_fdsp_msg, _m_get_obj_req, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& _m_fdsp_msg;
        const ::FDS_ProtocolInterface::FDSP_GetObjTypePtr& _m_get_obj_req;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FDS_ProtocolInterface__FDSP_DataPathReq__GetObject_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(fdsp_msg, get_obj_req, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FDS_ProtocolInterface::FDSP_DataPathReq::PutObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& put_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& __p_fdsp_msg, const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& __p_put_obj_req, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_fdsp_msg(__p_fdsp_msg),
            _m_put_obj_req(__p_put_obj_req)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FDS_ProtocolInterface::FDSP_DataPathReq* servant = dynamic_cast< ::FDS_ProtocolInterface::FDSP_DataPathReq*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->PutObject(_m_fdsp_msg, _m_put_obj_req, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr& _m_fdsp_msg;
        const ::FDS_ProtocolInterface::FDSP_PutObjTypePtr& _m_put_obj_req;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FDS_ProtocolInterface__FDSP_DataPathReq__PutObject_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(fdsp_msg, put_obj_req, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FDS_ProtocolInterface::FDSP_DataPathReq::UpdateCatalogObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& cat_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& __p_fdsp_msg, const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& __p_cat_obj_req, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_fdsp_msg(__p_fdsp_msg),
            _m_cat_obj_req(__p_cat_obj_req)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FDS_ProtocolInterface::FDSP_DataPathReq* servant = dynamic_cast< ::FDS_ProtocolInterface::FDSP_DataPathReq*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->UpdateCatalogObject(_m_fdsp_msg, _m_cat_obj_req, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& _m_fdsp_msg;
        const ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx& _m_cat_obj_req;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FDS_ProtocolInterface__FDSP_DataPathReq__UpdateCatalogObject_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(fdsp_msg, cat_obj_req, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FDS_ProtocolInterface::FDSP_DataPathReq::OffsetWriteObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& offset_write_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& __p_fdsp_msg, const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& __p_offset_write_obj_req, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_fdsp_msg(__p_fdsp_msg),
            _m_offset_write_obj_req(__p_offset_write_obj_req)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FDS_ProtocolInterface::FDSP_DataPathReq* servant = dynamic_cast< ::FDS_ProtocolInterface::FDSP_DataPathReq*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->OffsetWriteObject(_m_fdsp_msg, _m_offset_write_obj_req, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& _m_fdsp_msg;
        const ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx& _m_offset_write_obj_req;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FDS_ProtocolInterface__FDSP_DataPathReq__OffsetWriteObject_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(fdsp_msg, offset_write_obj_req, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FDS_ProtocolInterface::FDSP_DataPathReq::RedirReadObject(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& redir_write_obj_req, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& __p_fdsp_msg, const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& __p_redir_write_obj_req, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_fdsp_msg(__p_fdsp_msg),
            _m_redir_write_obj_req(__p_redir_write_obj_req)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FDS_ProtocolInterface::FDSP_DataPathReq* servant = dynamic_cast< ::FDS_ProtocolInterface::FDSP_DataPathReq*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->RedirReadObject(_m_fdsp_msg, _m_redir_write_obj_req, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx& _m_fdsp_msg;
        const ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx& _m_redir_write_obj_req;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FDS_ProtocolInterface__FDSP_DataPathReq__RedirReadObject_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(fdsp_msg, redir_write_obj_req, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* FDS_ProtocolInterface::upCast(::FDS_ProtocolInterface::FDSP_PutObjType* p) { return p; }
::Ice::ObjectPtr
FDS_ProtocolInterface::FDSP_PutObjType::ice_clone() const
{
    ::Ice::Object* __p = new FDSP_PutObjType(*this);
    return __p;
}

namespace
{
const ::std::string __FDS_ProtocolInterface__FDSP_PutObjType_ids[2] =
{
    "::FDS_ProtocolInterface::FDSP_PutObjType",
    "::Ice::Object"
};

}

bool
FDS_ProtocolInterface::FDSP_PutObjType::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FDS_ProtocolInterface__FDSP_PutObjType_ids, __FDS_ProtocolInterface__FDSP_PutObjType_ids + 2, _s);
}

::std::vector< ::std::string>
FDS_ProtocolInterface::FDSP_PutObjType::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FDS_ProtocolInterface__FDSP_PutObjType_ids[0], &__FDS_ProtocolInterface__FDSP_PutObjType_ids[2]);
}

const ::std::string&
FDS_ProtocolInterface::FDSP_PutObjType::ice_id(const ::Ice::Current&) const
{
    return __FDS_ProtocolInterface__FDSP_PutObjType_ids[0];
}

const ::std::string&
FDS_ProtocolInterface::FDSP_PutObjType::ice_staticId()
{
    return __FDS_ProtocolInterface__FDSP_PutObjType_ids[0];
}

void
FDS_ProtocolInterface::FDSP_PutObjType::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(data_obj_id);
    __os->write(data_obj_len);
    __os->write(volume_offset);
    __os->write(data_obj);
    __os->endWriteSlice();
}

void
FDS_ProtocolInterface::FDSP_PutObjType::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(data_obj_id);
    __is->read(data_obj_len);
    __is->read(volume_offset);
    __is->read(data_obj);
    __is->endReadSlice();
}

namespace
{

class __F__FDS_ProtocolInterface__FDSP_PutObjType : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::FDS_ProtocolInterface::FDSP_PutObjType::ice_staticId());
        return new ::FDS_ProtocolInterface::FDSP_PutObjType;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__FDS_ProtocolInterface__FDSP_PutObjType_Ptr = new __F__FDS_ProtocolInterface__FDSP_PutObjType;

class __F__FDS_ProtocolInterface__FDSP_PutObjType__Init
{
public:

    __F__FDS_ProtocolInterface__FDSP_PutObjType__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::FDS_ProtocolInterface::FDSP_PutObjType::ice_staticId(), __F__FDS_ProtocolInterface__FDSP_PutObjType_Ptr);
    }

    ~__F__FDS_ProtocolInterface__FDSP_PutObjType__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::FDS_ProtocolInterface::FDSP_PutObjType::ice_staticId());
    }
};

const __F__FDS_ProtocolInterface__FDSP_PutObjType__Init __F__FDS_ProtocolInterface__FDSP_PutObjType__i;

}

const ::Ice::ObjectFactoryPtr&
FDS_ProtocolInterface::FDSP_PutObjType::ice_factory()
{
    return __F__FDS_ProtocolInterface__FDSP_PutObjType_Ptr;
}

void 
FDS_ProtocolInterface::__patch(FDSP_PutObjTypePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::FDS_ProtocolInterface::FDSP_PutObjTypePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::FDS_ProtocolInterface::FDSP_PutObjType::ice_staticId(), v);
    }
}

::Ice::Object* FDS_ProtocolInterface::upCast(::FDS_ProtocolInterface::FDSP_GetObjType* p) { return p; }
::Ice::ObjectPtr
FDS_ProtocolInterface::FDSP_GetObjType::ice_clone() const
{
    ::Ice::Object* __p = new FDSP_GetObjType(*this);
    return __p;
}

namespace
{
const ::std::string __FDS_ProtocolInterface__FDSP_GetObjType_ids[2] =
{
    "::FDS_ProtocolInterface::FDSP_GetObjType",
    "::Ice::Object"
};

}

bool
FDS_ProtocolInterface::FDSP_GetObjType::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FDS_ProtocolInterface__FDSP_GetObjType_ids, __FDS_ProtocolInterface__FDSP_GetObjType_ids + 2, _s);
}

::std::vector< ::std::string>
FDS_ProtocolInterface::FDSP_GetObjType::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FDS_ProtocolInterface__FDSP_GetObjType_ids[0], &__FDS_ProtocolInterface__FDSP_GetObjType_ids[2]);
}

const ::std::string&
FDS_ProtocolInterface::FDSP_GetObjType::ice_id(const ::Ice::Current&) const
{
    return __FDS_ProtocolInterface__FDSP_GetObjType_ids[0];
}

const ::std::string&
FDS_ProtocolInterface::FDSP_GetObjType::ice_staticId()
{
    return __FDS_ProtocolInterface__FDSP_GetObjType_ids[0];
}

void
FDS_ProtocolInterface::FDSP_GetObjType::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(data_obj_id);
    __os->write(data_obj_len);
    __os->write(data_obj);
    __os->endWriteSlice();
}

void
FDS_ProtocolInterface::FDSP_GetObjType::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(data_obj_id);
    __is->read(data_obj_len);
    __is->read(data_obj);
    __is->endReadSlice();
}

namespace
{

class __F__FDS_ProtocolInterface__FDSP_GetObjType : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::FDS_ProtocolInterface::FDSP_GetObjType::ice_staticId());
        return new ::FDS_ProtocolInterface::FDSP_GetObjType;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__FDS_ProtocolInterface__FDSP_GetObjType_Ptr = new __F__FDS_ProtocolInterface__FDSP_GetObjType;

class __F__FDS_ProtocolInterface__FDSP_GetObjType__Init
{
public:

    __F__FDS_ProtocolInterface__FDSP_GetObjType__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::FDS_ProtocolInterface::FDSP_GetObjType::ice_staticId(), __F__FDS_ProtocolInterface__FDSP_GetObjType_Ptr);
    }

    ~__F__FDS_ProtocolInterface__FDSP_GetObjType__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::FDS_ProtocolInterface::FDSP_GetObjType::ice_staticId());
    }
};

const __F__FDS_ProtocolInterface__FDSP_GetObjType__Init __F__FDS_ProtocolInterface__FDSP_GetObjType__i;

}

const ::Ice::ObjectFactoryPtr&
FDS_ProtocolInterface::FDSP_GetObjType::ice_factory()
{
    return __F__FDS_ProtocolInterface__FDSP_GetObjType_Ptr;
}

void 
FDS_ProtocolInterface::__patch(FDSP_GetObjTypePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::FDS_ProtocolInterface::FDSP_GetObjTypePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::FDS_ProtocolInterface::FDSP_GetObjType::ice_staticId(), v);
    }
}

::Ice::Object* FDS_ProtocolInterface::upCast(::FDS_ProtocolInterface::FDSP_OffsetWriteObjType* p) { return p; }
::Ice::ObjectPtr
FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_clone() const
{
    ::Ice::Object* __p = new FDSP_OffsetWriteObjType(*this);
    return __p;
}

namespace
{
const ::std::string __FDS_ProtocolInterface__FDSP_OffsetWriteObjType_ids[2] =
{
    "::FDS_ProtocolInterface::FDSP_OffsetWriteObjType",
    "::Ice::Object"
};

}

bool
FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FDS_ProtocolInterface__FDSP_OffsetWriteObjType_ids, __FDS_ProtocolInterface__FDSP_OffsetWriteObjType_ids + 2, _s);
}

::std::vector< ::std::string>
FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FDS_ProtocolInterface__FDSP_OffsetWriteObjType_ids[0], &__FDS_ProtocolInterface__FDSP_OffsetWriteObjType_ids[2]);
}

const ::std::string&
FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_id(const ::Ice::Current&) const
{
    return __FDS_ProtocolInterface__FDSP_OffsetWriteObjType_ids[0];
}

const ::std::string&
FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_staticId()
{
    return __FDS_ProtocolInterface__FDSP_OffsetWriteObjType_ids[0];
}

void
FDS_ProtocolInterface::FDSP_OffsetWriteObjType::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(data_obj_id_old);
    __os->write(data_obj_len);
    __os->write(data_obj_id_new);
    __os->write(data_obj);
    __os->endWriteSlice();
}

void
FDS_ProtocolInterface::FDSP_OffsetWriteObjType::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(data_obj_id_old);
    __is->read(data_obj_len);
    __is->read(data_obj_id_new);
    __is->read(data_obj);
    __is->endReadSlice();
}

namespace
{

class __F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_staticId());
        return new ::FDS_ProtocolInterface::FDSP_OffsetWriteObjType;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType_Ptr = new __F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType;

class __F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType__Init
{
public:

    __F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_staticId(), __F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType_Ptr);
    }

    ~__F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_staticId());
    }
};

const __F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType__Init __F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType__i;

}

const ::Ice::ObjectFactoryPtr&
FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_factory()
{
    return __F__FDS_ProtocolInterface__FDSP_OffsetWriteObjType_Ptr;
}

void 
FDS_ProtocolInterface::__patch(FDSP_OffsetWriteObjTypePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::FDS_ProtocolInterface::FDSP_OffsetWriteObjType::ice_staticId(), v);
    }
}

::Ice::Object* FDS_ProtocolInterface::upCast(::FDS_ProtocolInterface::FDSP_RedirReadObjType* p) { return p; }
::Ice::ObjectPtr
FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_clone() const
{
    ::Ice::Object* __p = new FDSP_RedirReadObjType(*this);
    return __p;
}

namespace
{
const ::std::string __FDS_ProtocolInterface__FDSP_RedirReadObjType_ids[2] =
{
    "::FDS_ProtocolInterface::FDSP_RedirReadObjType",
    "::Ice::Object"
};

}

bool
FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FDS_ProtocolInterface__FDSP_RedirReadObjType_ids, __FDS_ProtocolInterface__FDSP_RedirReadObjType_ids + 2, _s);
}

::std::vector< ::std::string>
FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FDS_ProtocolInterface__FDSP_RedirReadObjType_ids[0], &__FDS_ProtocolInterface__FDSP_RedirReadObjType_ids[2]);
}

const ::std::string&
FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_id(const ::Ice::Current&) const
{
    return __FDS_ProtocolInterface__FDSP_RedirReadObjType_ids[0];
}

const ::std::string&
FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_staticId()
{
    return __FDS_ProtocolInterface__FDSP_RedirReadObjType_ids[0];
}

void
FDS_ProtocolInterface::FDSP_RedirReadObjType::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(data_obj_id_old);
    __os->write(data_obj_len);
    __os->write(data_obj_suboffset);
    __os->write(data_obj_sublen);
    __os->write(data_obj_id_new);
    __os->write(data_obj);
    __os->endWriteSlice();
}

void
FDS_ProtocolInterface::FDSP_RedirReadObjType::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(data_obj_id_old);
    __is->read(data_obj_len);
    __is->read(data_obj_suboffset);
    __is->read(data_obj_sublen);
    __is->read(data_obj_id_new);
    __is->read(data_obj);
    __is->endReadSlice();
}

namespace
{

class __F__FDS_ProtocolInterface__FDSP_RedirReadObjType : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_staticId());
        return new ::FDS_ProtocolInterface::FDSP_RedirReadObjType;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__FDS_ProtocolInterface__FDSP_RedirReadObjType_Ptr = new __F__FDS_ProtocolInterface__FDSP_RedirReadObjType;

class __F__FDS_ProtocolInterface__FDSP_RedirReadObjType__Init
{
public:

    __F__FDS_ProtocolInterface__FDSP_RedirReadObjType__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_staticId(), __F__FDS_ProtocolInterface__FDSP_RedirReadObjType_Ptr);
    }

    ~__F__FDS_ProtocolInterface__FDSP_RedirReadObjType__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_staticId());
    }
};

const __F__FDS_ProtocolInterface__FDSP_RedirReadObjType__Init __F__FDS_ProtocolInterface__FDSP_RedirReadObjType__i;

}

const ::Ice::ObjectFactoryPtr&
FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_factory()
{
    return __F__FDS_ProtocolInterface__FDSP_RedirReadObjType_Ptr;
}

void 
FDS_ProtocolInterface::__patch(FDSP_RedirReadObjTypePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::FDS_ProtocolInterface::FDSP_RedirReadObjType::ice_staticId(), v);
    }
}

::Ice::Object* FDS_ProtocolInterface::upCast(::FDS_ProtocolInterface::FDSP_VerifyObjType* p) { return p; }
::Ice::ObjectPtr
FDS_ProtocolInterface::FDSP_VerifyObjType::ice_clone() const
{
    ::Ice::Object* __p = new FDSP_VerifyObjType(*this);
    return __p;
}

namespace
{
const ::std::string __FDS_ProtocolInterface__FDSP_VerifyObjType_ids[2] =
{
    "::FDS_ProtocolInterface::FDSP_VerifyObjType",
    "::Ice::Object"
};

}

bool
FDS_ProtocolInterface::FDSP_VerifyObjType::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FDS_ProtocolInterface__FDSP_VerifyObjType_ids, __FDS_ProtocolInterface__FDSP_VerifyObjType_ids + 2, _s);
}

::std::vector< ::std::string>
FDS_ProtocolInterface::FDSP_VerifyObjType::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FDS_ProtocolInterface__FDSP_VerifyObjType_ids[0], &__FDS_ProtocolInterface__FDSP_VerifyObjType_ids[2]);
}

const ::std::string&
FDS_ProtocolInterface::FDSP_VerifyObjType::ice_id(const ::Ice::Current&) const
{
    return __FDS_ProtocolInterface__FDSP_VerifyObjType_ids[0];
}

const ::std::string&
FDS_ProtocolInterface::FDSP_VerifyObjType::ice_staticId()
{
    return __FDS_ProtocolInterface__FDSP_VerifyObjType_ids[0];
}

void
FDS_ProtocolInterface::FDSP_VerifyObjType::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(data_obj_id);
    __os->write(data_obj_len);
    __os->write(data_obj);
    __os->endWriteSlice();
}

void
FDS_ProtocolInterface::FDSP_VerifyObjType::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(data_obj_id);
    __is->read(data_obj_len);
    __is->read(data_obj);
    __is->endReadSlice();
}

namespace
{

class __F__FDS_ProtocolInterface__FDSP_VerifyObjType : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::FDS_ProtocolInterface::FDSP_VerifyObjType::ice_staticId());
        return new ::FDS_ProtocolInterface::FDSP_VerifyObjType;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__FDS_ProtocolInterface__FDSP_VerifyObjType_Ptr = new __F__FDS_ProtocolInterface__FDSP_VerifyObjType;

class __F__FDS_ProtocolInterface__FDSP_VerifyObjType__Init
{
public:

    __F__FDS_ProtocolInterface__FDSP_VerifyObjType__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::FDS_ProtocolInterface::FDSP_VerifyObjType::ice_staticId(), __F__FDS_ProtocolInterface__FDSP_VerifyObjType_Ptr);
    }

    ~__F__FDS_ProtocolInterface__FDSP_VerifyObjType__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::FDS_ProtocolInterface::FDSP_VerifyObjType::ice_staticId());
    }
};

const __F__FDS_ProtocolInterface__FDSP_VerifyObjType__Init __F__FDS_ProtocolInterface__FDSP_VerifyObjType__i;

}

const ::Ice::ObjectFactoryPtr&
FDS_ProtocolInterface::FDSP_VerifyObjType::ice_factory()
{
    return __F__FDS_ProtocolInterface__FDSP_VerifyObjType_Ptr;
}

void 
FDS_ProtocolInterface::__patch(FDSP_VerifyObjTypePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::FDS_ProtocolInterface::FDSP_VerifyObjTypePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::FDS_ProtocolInterface::FDSP_VerifyObjType::ice_staticId(), v);
    }
}

::Ice::Object* FDS_ProtocolInterface::upCast(::FDS_ProtocolInterface::FDSP_UpdateCatalogType* p) { return p; }
::Ice::ObjectPtr
FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_clone() const
{
    ::Ice::Object* __p = new FDSP_UpdateCatalogType(*this);
    return __p;
}

namespace
{
const ::std::string __FDS_ProtocolInterface__FDSP_UpdateCatalogType_ids[2] =
{
    "::FDS_ProtocolInterface::FDSP_UpdateCatalogType",
    "::Ice::Object"
};

}

bool
FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FDS_ProtocolInterface__FDSP_UpdateCatalogType_ids, __FDS_ProtocolInterface__FDSP_UpdateCatalogType_ids + 2, _s);
}

::std::vector< ::std::string>
FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FDS_ProtocolInterface__FDSP_UpdateCatalogType_ids[0], &__FDS_ProtocolInterface__FDSP_UpdateCatalogType_ids[2]);
}

const ::std::string&
FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_id(const ::Ice::Current&) const
{
    return __FDS_ProtocolInterface__FDSP_UpdateCatalogType_ids[0];
}

const ::std::string&
FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_staticId()
{
    return __FDS_ProtocolInterface__FDSP_UpdateCatalogType_ids[0];
}

void
FDS_ProtocolInterface::FDSP_UpdateCatalogType::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(volume_offset);
    __os->write(data_obj_id);
    __os->write(dm_transaction_id);
    __os->write(dm_operation);
    __os->endWriteSlice();
}

void
FDS_ProtocolInterface::FDSP_UpdateCatalogType::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(volume_offset);
    __is->read(data_obj_id);
    __is->read(dm_transaction_id);
    __is->read(dm_operation);
    __is->endReadSlice();
}

namespace
{

class __F__FDS_ProtocolInterface__FDSP_UpdateCatalogType : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_staticId());
        return new ::FDS_ProtocolInterface::FDSP_UpdateCatalogType;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__FDS_ProtocolInterface__FDSP_UpdateCatalogType_Ptr = new __F__FDS_ProtocolInterface__FDSP_UpdateCatalogType;

class __F__FDS_ProtocolInterface__FDSP_UpdateCatalogType__Init
{
public:

    __F__FDS_ProtocolInterface__FDSP_UpdateCatalogType__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_staticId(), __F__FDS_ProtocolInterface__FDSP_UpdateCatalogType_Ptr);
    }

    ~__F__FDS_ProtocolInterface__FDSP_UpdateCatalogType__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_staticId());
    }
};

const __F__FDS_ProtocolInterface__FDSP_UpdateCatalogType__Init __F__FDS_ProtocolInterface__FDSP_UpdateCatalogType__i;

}

const ::Ice::ObjectFactoryPtr&
FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_factory()
{
    return __F__FDS_ProtocolInterface__FDSP_UpdateCatalogType_Ptr;
}

void 
FDS_ProtocolInterface::__patch(FDSP_UpdateCatalogTypePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::FDS_ProtocolInterface::FDSP_UpdateCatalogType::ice_staticId(), v);
    }
}

::Ice::Object* FDS_ProtocolInterface::upCast(::FDS_ProtocolInterface::FDSP_MsgHdrType* p) { return p; }
::Ice::ObjectPtr
FDS_ProtocolInterface::FDSP_MsgHdrType::ice_clone() const
{
    ::Ice::Object* __p = new FDSP_MsgHdrType(*this);
    return __p;
}

namespace
{
const ::std::string __FDS_ProtocolInterface__FDSP_MsgHdrType_ids[2] =
{
    "::FDS_ProtocolInterface::FDSP_MsgHdrType",
    "::Ice::Object"
};

}

bool
FDS_ProtocolInterface::FDSP_MsgHdrType::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FDS_ProtocolInterface__FDSP_MsgHdrType_ids, __FDS_ProtocolInterface__FDSP_MsgHdrType_ids + 2, _s);
}

::std::vector< ::std::string>
FDS_ProtocolInterface::FDSP_MsgHdrType::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FDS_ProtocolInterface__FDSP_MsgHdrType_ids[0], &__FDS_ProtocolInterface__FDSP_MsgHdrType_ids[2]);
}

const ::std::string&
FDS_ProtocolInterface::FDSP_MsgHdrType::ice_id(const ::Ice::Current&) const
{
    return __FDS_ProtocolInterface__FDSP_MsgHdrType_ids[0];
}

const ::std::string&
FDS_ProtocolInterface::FDSP_MsgHdrType::ice_staticId()
{
    return __FDS_ProtocolInterface__FDSP_MsgHdrType_ids[0];
}

void
FDS_ProtocolInterface::FDSP_MsgHdrType::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(msg_code);
    __os->write(major_ver);
    __os->write(minor_ver);
    __os->write(msg_id);
    __os->write(payload_len);
    __os->write(num_objects);
    __os->write(frag_len);
    __os->write(frag_num);
    __os->write(tennant_id);
    __os->write(local_domain_id);
    __os->write(glob_volume_id);
    __os->write(src_id);
    __os->write(dst_id);
    __os->write(src_ip_hi_addr);
    __os->write(src_ip_lo_addr);
    __os->write(dst_ip_hi_addr);
    __os->write(dst_ip_lo_addr);
    __os->write(result);
    __os->write(err_msg);
    __os->write(err_code);
    __os->write(req_cookie);
    __os->write(msg_chksum);
    __os->endWriteSlice();
}

void
FDS_ProtocolInterface::FDSP_MsgHdrType::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(msg_code);
    __is->read(major_ver);
    __is->read(minor_ver);
    __is->read(msg_id);
    __is->read(payload_len);
    __is->read(num_objects);
    __is->read(frag_len);
    __is->read(frag_num);
    __is->read(tennant_id);
    __is->read(local_domain_id);
    __is->read(glob_volume_id);
    __is->read(src_id);
    __is->read(dst_id);
    __is->read(src_ip_hi_addr);
    __is->read(src_ip_lo_addr);
    __is->read(dst_ip_hi_addr);
    __is->read(dst_ip_lo_addr);
    __is->read(result);
    __is->read(err_msg);
    __is->read(err_code);
    __is->read(req_cookie);
    __is->read(msg_chksum);
    __is->endReadSlice();
}

namespace
{

class __F__FDS_ProtocolInterface__FDSP_MsgHdrType : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::FDS_ProtocolInterface::FDSP_MsgHdrType::ice_staticId());
        return new ::FDS_ProtocolInterface::FDSP_MsgHdrType;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__FDS_ProtocolInterface__FDSP_MsgHdrType_Ptr = new __F__FDS_ProtocolInterface__FDSP_MsgHdrType;

class __F__FDS_ProtocolInterface__FDSP_MsgHdrType__Init
{
public:

    __F__FDS_ProtocolInterface__FDSP_MsgHdrType__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::FDS_ProtocolInterface::FDSP_MsgHdrType::ice_staticId(), __F__FDS_ProtocolInterface__FDSP_MsgHdrType_Ptr);
    }

    ~__F__FDS_ProtocolInterface__FDSP_MsgHdrType__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::FDS_ProtocolInterface::FDSP_MsgHdrType::ice_staticId());
    }
};

const __F__FDS_ProtocolInterface__FDSP_MsgHdrType__Init __F__FDS_ProtocolInterface__FDSP_MsgHdrType__i;

}

const ::Ice::ObjectFactoryPtr&
FDS_ProtocolInterface::FDSP_MsgHdrType::ice_factory()
{
    return __F__FDS_ProtocolInterface__FDSP_MsgHdrType_Ptr;
}

void 
FDS_ProtocolInterface::__patch(FDSP_MsgHdrTypePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::FDS_ProtocolInterface::FDSP_MsgHdrType::ice_staticId(), v);
    }
}

::Ice::Object* FDS_ProtocolInterface::upCast(::FDS_ProtocolInterface::FDSP_DataPathReq* p) { return p; }

namespace
{
const ::std::string __FDS_ProtocolInterface__FDSP_DataPathReq_ids[2] =
{
    "::FDS_ProtocolInterface::FDSP_DataPathReq",
    "::Ice::Object"
};

}

bool
FDS_ProtocolInterface::FDSP_DataPathReq::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FDS_ProtocolInterface__FDSP_DataPathReq_ids, __FDS_ProtocolInterface__FDSP_DataPathReq_ids + 2, _s);
}

::std::vector< ::std::string>
FDS_ProtocolInterface::FDSP_DataPathReq::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FDS_ProtocolInterface__FDSP_DataPathReq_ids[0], &__FDS_ProtocolInterface__FDSP_DataPathReq_ids[2]);
}

const ::std::string&
FDS_ProtocolInterface::FDSP_DataPathReq::ice_id(const ::Ice::Current&) const
{
    return __FDS_ProtocolInterface__FDSP_DataPathReq_ids[0];
}

const ::std::string&
FDS_ProtocolInterface::FDSP_DataPathReq::ice_staticId()
{
    return __FDS_ProtocolInterface__FDSP_DataPathReq_ids[0];
}

::Ice::DispatchStatus
FDS_ProtocolInterface::FDSP_DataPathReq::___GetObject(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr fdsp_msg;
    ::FDS_ProtocolInterface::FDSP_GetObjTypePtr get_obj_req;
    __is->read(fdsp_msg);
    __is->read(get_obj_req);
    __is->readPendingObjects();
    __inS.endReadParams();
    GetObject(fdsp_msg, get_obj_req, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FDS_ProtocolInterface::FDSP_DataPathReq::___PutObject(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::FDS_ProtocolInterface::FDSP_MsgHdrTypePtr fdsp_msg;
    ::FDS_ProtocolInterface::FDSP_PutObjTypePtr put_obj_req;
    __is->read(fdsp_msg);
    __is->read(put_obj_req);
    __is->readPendingObjects();
    __inS.endReadParams();
    PutObject(fdsp_msg, put_obj_req, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FDS_ProtocolInterface::FDSP_DataPathReq::___UpdateCatalogObject(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx fdsp_msg;
    ::FDS_ProtocolInterface::FDSP_UpdateCatalogTypePrx cat_obj_req;
    __is->read(fdsp_msg);
    __is->read(cat_obj_req);
    __inS.endReadParams();
    UpdateCatalogObject(fdsp_msg, cat_obj_req, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FDS_ProtocolInterface::FDSP_DataPathReq::___OffsetWriteObject(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx fdsp_msg;
    ::FDS_ProtocolInterface::FDSP_OffsetWriteObjTypePrx offset_write_obj_req;
    __is->read(fdsp_msg);
    __is->read(offset_write_obj_req);
    __inS.endReadParams();
    OffsetWriteObject(fdsp_msg, offset_write_obj_req, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FDS_ProtocolInterface::FDSP_DataPathReq::___RedirReadObject(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::FDS_ProtocolInterface::FDSP_MsgHdrTypePrx fdsp_msg;
    ::FDS_ProtocolInterface::FDSP_RedirReadObjTypePrx redir_write_obj_req;
    __is->read(fdsp_msg);
    __is->read(redir_write_obj_req);
    __inS.endReadParams();
    RedirReadObject(fdsp_msg, redir_write_obj_req, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __FDS_ProtocolInterface__FDSP_DataPathReq_all[] =
{
    "GetObject",
    "OffsetWriteObject",
    "PutObject",
    "RedirReadObject",
    "UpdateCatalogObject",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
FDS_ProtocolInterface::FDSP_DataPathReq::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__FDS_ProtocolInterface__FDSP_DataPathReq_all, __FDS_ProtocolInterface__FDSP_DataPathReq_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __FDS_ProtocolInterface__FDSP_DataPathReq_all)
    {
        case 0:
        {
            return ___GetObject(in, current);
        }
        case 1:
        {
            return ___OffsetWriteObject(in, current);
        }
        case 2:
        {
            return ___PutObject(in, current);
        }
        case 3:
        {
            return ___RedirReadObject(in, current);
        }
        case 4:
        {
            return ___UpdateCatalogObject(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
FDS_ProtocolInterface::FDSP_DataPathReq::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
FDS_ProtocolInterface::FDSP_DataPathReq::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
FDS_ProtocolInterface::__patch(FDSP_DataPathReqPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::FDS_ProtocolInterface::FDSP_DataPathReqPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::FDS_ProtocolInterface::FDSP_DataPathReq::ice_staticId(), v);
    }
}
