---
-   name: copy fdsinstall.py to /root/fdsinstally.py
    copy: src=../../../source/tools/install/fdsinstall.py
        dest=/root/fdsinstall.py
        mode=0755
    when: fds_ft_platform_use_new_superblock is not defined or fds_ft_platform_use_new_superblock == "false"
    tags:
        - post-install

# This being in /root is legacy and should probably get removed once
# fdsinstall is no longer referencing disk_type.py here
-   name: copy disk_type.py to /root/disk_type.py
    copy: src=../../../source/platform/python/disk_type.py
        dest=/root/disk_type.py
        mode=0755
    when: fds_ft_platform_use_new_superblock is not defined or fds_ft_platform_use_new_superblock == "false"
    tags:
        - post-install

-   name: ensure directory {{ item }} exists
    when: fds_ft_platform_use_new_superblock is defined and fds_ft_platform_use_new_superblock == "true"
    file:
        state=directory
        path={{ item }}
        owner=root
        group=root
        mode=0755
    with_items:
        - /fds/dev
        - /fds/var/log
        - /fds/var/log/corefiles
        - /fds/var/log/sfs

-   name: create symlink for /fds/dev/logs
    when: fds_ft_platform_use_new_superblock is defined and fds_ft_platform_use_new_superblock == "true"
    file:
        state=link
        src=/fds/var/log
        dest=/fds/var/logs
        owner=root
        group=root

-   name:  Check existance of virtual disk for core file storage
    stat: path=/fds/var/log/sfs/loopmount_sparse_file_system_for_core_files
    register: loopfs

-   name: Create a sparse file to mount the virtual file system for core files
    shell: dd if=/dev/null of=/fds/var/log/sfs/loopmount_sparse_file_system_for_core_files bs=1G seek=12
    when: (loopfs.stat.exists == False) or
          ((clean_fds is defined and clean_fds == "yes") and
          (force is defined and force == "yes") and
          (fds_ft_platform_use_new_superblock is defined and fds_ft_platform_use_new_superblock == "true"))
    register: created_sparse
    tags:
        - post-install

-   name: Format cores sparse file system
    shell: mkfs.xfs -f /fds/var/log/sfs/loopmount_sparse_file_system_for_core_files
    when: created_sparse.changed == True

-   name: add fstab entry and mount cores sparse file system
    mount: name=/fds/var/log/corefiles src=/fds/var/log/sfs/loopmount_sparse_file_system_for_core_files state=mounted fstype=xfs opts=loop
    when: created_sparse.changed == True

-   name: set local for error messages
    command: update-locale LC_MESSAGES=POSIX

# OLD SUPER BLOCK LOCATION
-   name: run fdsinstall step 3 - setup storage
    environment:
        PATH: /opt/fds-deps/embedded/sbin:{{ ansible_env.PATH }}
    shell: ./fdsinstall.py -o 5 -o 3  chdir=/root
    when: (clean_fds is defined and clean_fds == "yes") and (fds_ft_enable_disk_activation is not defined or fds_ft_enable_disk_activation == "false") and (fds_ft_platform_use_new_superblock is not defined or fds_ft_platform_use_new_superblock == "false")
    tags:
        - post-install

# OLD SUPER BLOCK LOCATION and manual disk selection using disk_activation
-   name: manual selection and format disks
    pause: prompt="please select and format disks using [/fds/bin/fds-disk --select] and format [/fds/bin/fds-disk --format]"
    when: (clean_fds is defined and clean_fds == "yes") and (fds_ft_enable_disk_activation is defined and fds_ft_enable_disk_activation == "true") and (fds_ft_platform_use_new_superblock is not defined or fds_ft_platform_use_new_superblock == "false")
    tags:
        - post-install

# NEW Super Block , disk detection
-   name: Automatic disk identification
    command: /fds/bin/disk_id.py -w
    when: (clean_fds is defined and clean_fds == "yes") and (fds_ft_platform_use_new_superblock is defined ) and (fds_ft_platform_use_new_superblock == "true")
    tags:
        - post-install

# NEW Super Block Location, manual verification
-   name: manual disk identification
    pause: prompt="Please examine /fds/dev/disk-config.conf on each node in your cluster, verify correctness and update as necessary for this deployment............  When you have completed the inspection, please return here and press enter to finish the deployment"

    any_errors_fatal: true
    when: (clean_fds is defined and clean_fds == "yes") and (fds_ft_platform_use_new_superblock is defined ) and (fds_ft_platform_use_new_superblock == "true") and (auto_disk_id is not defined or auto_disk_id == "false")
    tags:
        - post-install

# NEW Super Block Location, format disks
-   name: Formatting disks for use by Formation One
    command: /fds/bin/disk_format.py --format --reset
    any_errors_fatal: true
    when: (clean_fds is defined and clean_fds == "yes") and (fds_ft_platform_use_new_superblock is defined ) and (fds_ft_platform_use_new_superblock == "true")
    tags:
        - post-install

-   name: render /fds/etc config files
    template:
        src=../../source/config/etc/{{item}}.conf.j2
        dest=/fds/etc/{{item}}.conf
        owner=root
        group=root
        mode=0644
    when: skip_config_placement is not defined or skip_config_placement == "no"
    with_items:
        - fds
        - platform
        - redis
    tags:
        - post-install
        - fdsconfig

-   name: render /fds/etc/formation_env config file
    template:
        src=../../source/config/etc/formation_env.j2
        dest=/fds/etc/formation_env
        owner=root
        group=root
        mode=0754
    tags:
        - post-install

-   name: render /fds/etc/log4j2.xml config file
    template:
        src=../../source/config/etc/log4j2.xml.j2
        dest=/fds/etc/log4j2.xml
        owner=root
        group=root
        mode=0754
    tags:
        - post-install

-   name: setup influxdb user and group
    group: name=influxdb
    tags:
        - post-install
        - influxdb

-   user: name=influxdb
        createhome=no
        group=influxdb
    tags:
        - post-install
        - influxdb

-   name: render influxdb config
    template:
        src=../templates/deploy_fds/influxdb_config.toml.j2
        dest=/fds/etc/influxdb_config.toml
        owner=influxdb
        group=influxdb
        mode=0644
    tags:
        - post-install
        - influxdb

-   name: copy influxdb init script
    template:
        src=../templates/deploy_fds/influxdb_init.sh.j2
        dest=/etc/init.d/influxdb
        owner=root
        group=root
        mode=0744
    tags:
        - post-install
        - init
        - influxdb

-   name: create influxdb log/data dir
    file:
        path=/opt/influxdb/shared
        state=directory
        owner=influxdb
        group=root
        mode=0755
    tags:
        - post-install
        - influxdb

-   name: put upstart configs in place
    template:
        src=../templates/deploy_fds/upstart/fds-{{item}}.conf.j2
        dest=/etc/init/fds-{{item}}.conf
        owner=root
        group=root
        mode=0644
    with_items:
        - om
        - am
        - bare_am
        - sm
        - dm
        - pm
        - redis
        - influxdb
        - rabbitmq
        - stats-service
    tags:
        - post-install
        - init

-   name: put upstart configs in place (only with the old superblock location)
    template:
        src=../templates/deploy_fds/upstart/fds-{{item}}.conf.j2
        dest=/etc/init/fds-{{item}}.conf
        owner=root
        group=root
        mode=0644
    when: fds_ft_platform_use_new_superblock is not defined or fds_ft_platform_use_new_superblock == "false"
    with_items:
        - disktype
    tags:
        - post-install
        - init

-   name: Remove disktype.conf (initd script) when using new superblock
    file: path=/etc/init/disktype.conf state=absent
    when: fds_ft_platform_use_new_superblock is defined and fds_ft_platform_use_new_superblock == "true"
    tags:
        - post-install
        - init

-   name: add cron job to gzip logs
    cron: name="compress logs" minute=49 hour=*/4
        user="root" job="find /fds/var/log -type f -size +50000000c -mmin +180 | /usr/bin/nice /usr/bin/xargs gzip --quiet --best >> /var/log/fds-gzip-cron.log"
        cron_file=fds-gzip-cron
        state=absent
    tags:
        - post-install


-   name: add cron job to gzip logs
    cron: name="compress logs placed by ansible" minute=49 hour=*/4
        user="root" job="/usr/bin/find /fds/var/log -type f -name '*log' -size +50000000c -mmin +180 | /usr/bin/nice /usr/bin/xargs gzip --quiet --best >> /var/log/fds-gzip-cron.log"
        cron_file=fds-gzip-cron
    tags:
        - post-install
#
