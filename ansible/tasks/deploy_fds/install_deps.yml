---
-   name: sysctl_params
    sysctl: name={{ item.key }} value="{{ item.value }}" state={{ item.state }}
    when: ansible_virtualization_type != "lxc"
    with_items:
        - { key: 'fs.file-max', value: '400000', state: 'present' }
        - { key: 'kernel.core_uses_pid', value: '1', state: 'present' }
        - { key: 'fs.suid_dumpable', value: '1', state: 'present' }
        - { key: 'kernel.core_pattern', value: '|/bin/core.sh fds/var/log/corefiles %e-%p-%u-%t', state: 'present' }
    tags:
        - install-deps

-   name: see if redis-server has been installed via system packages
    stat: path=/etc/init.d/redis-server
        get_checksum=False
        get_md5=False
    register: redis_server_stat
    tags:
        - install-deps

-   name: disable redis start-on-boot
    service: name=redis-server
        state=stopped
        enabled=no
    when: redis_server_stat.stat.exists
    tags:
        - install-deps

-   name: install_limits_conf
    template:
        src=../templates/deploy_fds/fds_limits.conf
        dest=/etc/security/limits.conf
        owner=root
        group=root
        mode=0644
    tags:
        - install-deps

-   name: ensure corefiles does not exist
    file:
        path=/corefiles
        owner=root
        group=root
        mode=0755
        state=absent
    tags:
        - install-deps

-   name: add local mirrors to /etc/hosts
    when: fds_deploy_local_deps is not defined or fds_deploy_local_deps == "no"
    lineinfile: dest=/etc/hosts
        line="{{item}}"
    with_items:
        -   10.3.4.128 awo-apt.formationds.com awo-apt
        -   10.2.10.22 bld-apt.formationds.com bld-apt
        -   10.1.10.50 fre-apt.formationds.com fre-apt
    tags:
        - install-deps

-   name: add artifactory repo key
    when: fds_deploy_local_deps is not defined or fds_deploy_local_deps == "no"
    apt_key: url="http://builder:h7qgA3fYr0P3@artifacts.artifactoryonline.com/artifacts/api/gpg/key/public"
    tags:
        - install-deps

-   name: remove all artifactory repos for a clean slate
    apt_repository: repo="deb http://builder:h7qgA3fYr0P3@artifacts.artifactoryonline.com/artifacts/formation-apt/ platform {{ item }}"
        state=absent
    with_items:
      - nightly
      - beta
    tags:
      - install-deps

-   name: add specified Artifactory fds platform repo
    when: deploy_artifact != "local" and (fds_deploy_local_deps is not defined or fds_deploy_local_deps == "no")
    apt_repository: repo="deb http://builder:h7qgA3fYr0P3@artifacts.artifactoryonline.com/artifacts/formation-apt/ platform {{ deploy_artifact }}"
        state=present
        update_cache=yes
    tags:
      - install-deps


-   name: add nightly Artifactory fds platform repo when installing from local fds-platorm deb
    when: deploy_artifact == "local" and (fds_deploy_local_deps is not defined or fds_deploy_local_deps == "no")
    apt_repository: repo="deb http://builder:h7qgA3fYr0P3@artifacts.artifactoryonline.com/artifacts/formation-apt/ platform nightly"
        state=present
        update_cache=yes
    tags:
        - install-deps

-   name: install fds-deps package from repo
    when: fds_deploy_local_deps is not defined or fds_deploy_local_deps == "no"
    apt: name=fds-deps
        force=yes
        state=latest
        update_cache=yes
    tags:
        - install-deps

-   name: Place core.sh in /bin
    copy: src=../files/core.sh dest=/bin/core.sh owner=root group=root mode=0755

-   name: push local fds-deps deb to cluster nodes
    when: (fds_deploy_local_deps is defined and fds_deploy_local_deps == "yes") and this_is_an_ec2_node is not defined
    copy: src={{ item }}
       dest=/root/fds-deps.deb
    with_fileglob:
       - '../../../omnibus/omnibus-fds-deps/pkg/fds-deps*.deb'
    tags:
      - install-local

-   pause: seconds=5
    when: (fds_deploy_local_deps is defined and fds_deploy_local_deps == "yes") and this_is_an_ec2_node is not defined
    tags:
      - install-local

-   name: install fds deps from local deb
    when: (fds_deploy_local_deps is defined and fds_deploy_local_deps == "yes") and this_is_an_ec2_node is not defined
    apt: deb="/root/fds-deps.deb"
    tags:
      - install-local

-   name: push local fds-deps deb from awo-bh-01 to cluster nodes
    when: (fds_deploy_local_deps is defined and fds_deploy_local_deps == "yes") and (this_is_an_ec2_node is defined and this_is_an_ec2_node)
    synchronize: src="/home/deploy/deb_staging/{{ instance_name_tag }}/fds-deps.deb"
        dest="/home/deploy/fds-deps.deb"
        rsync_timeout=3 mode=push private_key="/home/deploy/.ssh/fds-deploy_rsa"
    delegate_to: awo-bh-01
    tags:
      - install-local

-   name: install fds deps from local deb (ec2)
    when: (fds_deploy_local_deps is defined and fds_deploy_local_deps == "yes") and (this_is_an_ec2_node is defined and this_is_an_ec2_node)
    apt: deb="/home/deploy/fds-deps.deb"
    tags:
      - install-local

-   name: install fds-stats deps from remote
    apt: name=fds-stats-deps force=yes state=latest update_cache=yes
    when: (skip_stats is not defined or skip_stats == "no") and (fds_deploy_local_deps is not defined or fds_deploy_local_deps != "yes")

-   name: install fds-stats deps from local
    when: (skip_stats is not defined or skip_stats == "no") and (fds_deploy_local_deps is defined and fds_deploy_local_deps == "yes")
    copy: src={{ item }}
       dest="/root/fds-stats-deps.deb"
    with_fileglob:
       - '../../../omnibus/omnibus-fds-stats-deps/pkg/fds-stats-deps*.deb'
    tags:
      - install-local

-   name: actually install the fds-stats deps from local
    when: (skip_stats is not defined or skip_stats == "no") and (fds_deploy_local_deps is defined and fds_deploy_local_deps == "yes")
    apt: deb="/root/fds-stats-deps.deb"
    tags:
      - install-local

-   name: Install python-dev
    when: fds_only_install is defined and fds_only_install == "yes"
    apt: name=python-dev

-   name: Install pip
    when: fds_only_install is defined and fds_only_install == "yes"
    apt: name=python-pip

-   pip: name=psutil version=3.1.1
    when: fds_only_install is defined and fds_only_install == "yes"

-   name: Install NBD-Client
    when: fds_only_install is defined and fds_only_install == "yes"
    apt: name=nbd-client

-   name: Install fio
    when: fds_only_install is defined and fds_only_install == "yes"
    apt: name=fio
