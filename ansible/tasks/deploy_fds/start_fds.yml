---
#-   name: disk_type
#    shell: python -m disk_type -m
#    tags:
#      - startup

-   name: start redis
    shell: ./redis.sh start chdir=/fds/sbin
    tags:
      - startup

-   name: start influxdb
    service: name=fds-influxdb state=started
    when: inventory_hostname in om_influxdb_url
    tags:
        - startup

-   name: wait for influxdb port
    wait_for: host={{ fds_om_host }} port=8086 state=started
    when: fds_om_host is defined and fds_om_host == inventory_hostname
    tags:
      - cleaninfluxdb

-   name: clean influxdb
    shell: PATH=$PATH:/opt/fds-deps/embedded/bin curl -X DELETE "{{ om_influxdb_url }}/db/{{ item }}?u=root&p=root" --write-out %{http_code} --silent
    with_items:
      - om-metricdb
      - om-eventdb
    register: influxdb_delete_resp
    until: influxdb_delete_resp|success
    when: (fds_om_host is defined and fds_om_host == inventory_hostname) and (clean_fds is defined and clean_fds == "yes")
    ignore_errors: yes # This is until we fix some issues with influxdb setup - it may fail from time to time (anichols)
    tags:
      - clean
      - cleaninfluxdb

-   debug: var=influxdb_delete_resp
    when: (fds_om_host is defined and fds_om_host == inventory_hostname) and (clean_fds is defined and clean_fds == "yes")
    tags:
      - clean
      - cleaninfluxdb

-   name: start platformd
    service: name=fds-pm state=started
    tags:
      - startup

-   name: wait for platformd to become available on OM host
    wait_for: host={{ fds_om_host }}
        port=7000
        delay=1
        timeout=18
        state=started
    when: fds_om_host is defined and fds_om_host == inventory_hostname
    delegate_to: localhost
    sudo: no
    tags:
      - startup

-   name: start_om
    service: name=fds-om state=started
    when: fds_om_host is defined and fds_om_host == inventory_hostname
    tags:
      - startup

-   name: wait for api to become available
    wait_for: host={{ fds_om_host }}
        port=7777
        delay=1
        timeout=18
        state=started
    delegate_to: localhost
    sudo: no
    when: fds_om_host is defined and fds_om_host == inventory_hostname
    tags:
      - startup
      - activate

-   name: wait for platformd to become available on remaining hosts
    wait_for: host={{ inventory_hostname }}
        port=7000
        delay=1
        timeout=18
        state=started
    when: fds_om_host is defined and fds_om_host != inventory_hostname
    delegate_to: localhost
    sudo: no
    tags:
      - startup
      - activate

-   name: get auth token
    uri: url=http://{{ fds_om_host }}:7777/fds/config/v08/token?login={{ domain_admin_user }}&password={{ domain_admin_pass }}
        method=POST
        return_content=yes
        status_code=200
    delegate_to: localhost
    register: auth_results
    until: auth_results.status == 200
    retries: 20
    delay: 10
    when: fds_installed
    run_once: true
    sudo: no
    tags:
      - startup
      - activate

-   name: Copy add nodes script to OM node
    when: (clean_fds is defined and clean_fds == "yes") and
      fds_om_host is defined and
      fds_om_host == inventory_hostname
    copy: src='../../scripts/add_nodes.py'
        dest="/root/add_nodes.py"
        mode=0777
    tags:
        - startup
        - activate

-   name: render fdscli config
    when: (clean_fds is defined and clean_fds == "yes") and
      fds_om_host is defined and
      fds_om_host == inventory_hostname
    template:
        src=../../scripts/fdscli.conf.j2
        dest=/root/.fdscli.conf
        mode=0644
    tags:
        - post-install
        - influxdb

-   name: Add Nodes to new cluster
    when: (clean_fds is defined and clean_fds == "yes") and
      fds_om_host is defined and
      fds_om_host == inventory_hostname
    command: '/root/add_nodes.py'
    register: command_results
    run_once: true

-   name: remove add node script
    when: (clean_fds is defined and clean_fds == "yes") and
      fds_om_host is defined and
      fds_om_host == inventory_hostname
    file:
        path=/root/add_nodes.py
        state=absent

-   name: remove fdscli conf
    when: (clean_fds is defined and clean_fds == "yes") and
      fds_om_host is defined and
      fds_om_host == inventory_hostname
    file:
        path=/root/.fdscli.conf
        state=absent

-   name: Startup domain services
    when: fds_om_host is defined and
      fds_om_host == inventory_hostname and
      auth_results|success and
      (clean_fds is not defined or clean_fds == "no")
    uri: url=http://{{ fds_om_host }}:7777/fds/config/v08/local_domains/1
        method=PUT
        body_format=json
        body="{{startup_domain_put_body_json}}"
        HEADER_Content-Type="application/json"
        HEADER_Cookie="token={{auth_results['json']['token']}}"
        status_code=200
        return_content=yes
    delegate_to: localhost
    run_once: true
    sudo: no
    tags:
        - startup
        - activate

-   name: wait for services to be available on all nodes
    wait_for: host={{inventory_hostname}}
        port={{item}}
        delay=1
        timeout=18
        state=started
    with_items:
        - 7001
        - 7002
        - 7003
        - 8000
        - 8443
        - 8899
        - 8911
        - 9999
    tags:
      - startup
      - activate
