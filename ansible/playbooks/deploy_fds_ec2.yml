---
-   name: Provision 4-node FDS cluster in EC2
    connection: local
    hosts: localhost
    gather_facts: False
    vars_files:
    -   ../vars_files/credentials/aws_fds_testing.yml
    -   ../vars_files/credentials/fds-deploy_rsa.yml
    vars:
    -   instance_type: "{% if ec2_instance_type is defined %}{{ ec2_instance_type }}{% else %}t2.medium{% endif %}"
    -   root_volume_size_GB: "{% if ec2_root_volume_size_GB is defined %}{{ ec2_root_volume_size_GB }}{% else %}30{% endif %}"
    -   vpc_subnet_id: "{% if ec2_vpc_subnet_id is defined %}{{ ec2_vpc_subnet_id }}{% else %}subnet-195bac40{% endif %}"
    -   image: "{% if ec2_image is defined %}{{ ec2_image }}{% else %}ami-0f114a3f{% endif %}"

    tasks:

    -   name: check for required variables
        fail: 
            msg: "You must supply a value for {{ item }}"
        when: "{{ item }} is not defined"
        with_items:
            - instance_count
            - instance_name_tag

    -   name: copy FDS deploy key locally
        include: ../tasks/deploy_fds/copy_fds_deploy_key.yml

    -   name: spin up a node in the private subnet with an auto-assigned IP
        ec2:
            aws_access_key: "{{ aws_access_key }}"
            aws_secret_key: "{{ aws_secret_key }}"
            instance_tags:
                Name: "{{ instance_name_tag }}"
                fds_purpose: testing
            exact_count: "{{ instance_count }}"
            count_tag:
                Name: "{{ instance_name_tag }}"
                fds_purpose: testing
            key_name: fds-ie
            instance_type:  "{{ instance_type }}"
            image: "{{ image }}"
            volumes:
                -   device_name: /dev/sda1
                    volume_size: "{{ root_volume_size_GB }}"
                    delete_on_termination: true
            vpc_subnet_id: "{{ vpc_subnet_id }}"
            monitoring: no
            region: us-west-2
            zone: us-west-2c
            wait: yes
        register: ec2
        tags: provision

    -   name: Add all instance public IPs to host group
        add_host: hostname={{ item.private_ip }} groupname={{ fds_cluster_name }} 
        with_items: ec2.tagged_instances
        tags: provision

-   hosts: awo-bh-01
    name: stage debs on awo-bh-01 and wait for cluster to be available for deployment
    remote_user: deploy
    gather_facts: false
    sudo: false
    tags: wait

    tasks:
 
    -   name: set variable build defined in inventory file (release or debug)
        set_fact:
            build: "{% if fds_build is defined and fds_build == 'debug' %}dbg{% else %}rel{% endif %}"
        tags:
          - install-local

    -   name: create staging directory on awo-bh-01 to house local fds_platform deb
        when: deploy_artifact == "local"
        file: path=/home/deploy/deb_staging/{{ instance_name_tag }}
                state=directory
        tags:
          - install-local

    -   name: stage local fds-platform deb on awo-bh-01
        when: deploy_artifact == "local"
        copy: src={{ item }}
          dest=/home/deploy/deb_staging/{{ instance_name_tag }}/fds-platform.deb
        with_fileglob:
          - '../../omnibus/omnibus-fds-platform/pkg/fds-platform-*{{ build }}*.deb'
        tags:
          - install-local

    -   name: stage local fds-deps deb on awo-bh-01
        when: fds_deploy_local_deps is defined and fds_deploy_local_deps == "yes"
        copy: src={{ item }}
          dest=/home/deploy/deb_staging/{{ instance_name_tag }}/fds-deps.deb
        with_fileglob:
          - '../../omnibus/omnibus-fds-deps/pkg/fds-deps*.deb'
        tags:
          - install-local

    -   name: wait for SSH to come up on all instances
        wait_for: host={{ item }} port=22 delay=1 timeout=300 state=started
        with_items: groups.{{ fds_cluster_name }}


-   name: Deploy FDS
    hosts: "{{ fds_cluster_name }}"
    remote_user: deploy
    gather_facts: true
    sudo: true
    vars:
        this_is_an_ec2_node: true
    vars_files:
    -   ../vars_files/multi_om_setup.yml
    -   ../vars_files/credentials/ssl_certs.yml
    -   ../vars_files/deploy_fds/start_fds.yml
    -   ../vars_files/deploy_fds/admin_credentials.yml

    handlers:
    -   name: restart ssh
        service: name=ssh
            state=restarted

    tasks:

    -   name: DUMPING EC2 IP ADDRESS AT -- /tmp/yourinventoryfilename_ips.txt
        local_action: template src=../templates/deploy_fds/ec2_ips.txt.j2
            dest=/tmp/{{fds_cluster_name}}_ips.txt
            mode=0400
        sudo: false
        ignore_errors: true

    -   include: ../tasks/deploy_fds/deploy_fds.yml
